/*! For license information please see extension.js.LICENSE.txt */
var __webpack_modules__={82:(e,t,r)=>{var n=r(8423),a=r(812),i=r(4311);e.exports=r(8219)?Object.defineProperties:function(e,t){a(e);for(var r,o=i(t),s=o.length,l=0;s>l;)n.f(e,r=o[l++],t[r]);return e}},181:(e,t,r)=>{var n=r(9383),a=Math.min;e.exports=function(e){return e>0?a(n(e),9007199254740991):0}},210:e=>{e.exports={}},254:(e,t,r)=>{var n=r(6308)("wks"),a=r(9191),i=r(6670).Symbol,o="function"==typeof i;(e.exports=function(e){return n[e]||(n[e]=o&&i[e]||(o?i:a)("Symbol."+e))}).store=n},322:e=>{e.exports=function(e,t){return{value:t,done:!!e}}},539:(e,t,r)=>{t.__esModule=!0;var n,a=(n=r(7479))&&n.__esModule?n:{default:n};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,a.default)(t))&&"function"!=typeof t?e:t}},716:(e,t,r)=>{r(7816)("observable")},752:(e,t,r)=>{var n=r(4401);e.exports=function(e,t){if(!n(e))return e;var r,a;if(t&&"function"==typeof(r=e.toString)&&!n(a=r.call(e)))return a;if("function"==typeof(r=e.valueOf)&&!n(a=r.call(e)))return a;if(!t&&"function"==typeof(r=e.toString)&&!n(a=r.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},812:(e,t,r)=>{var n=r(4401);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},929:(e,t,r)=>{r.r(t),r.d(t,{CompletionStatus:()=>n,RenderMode:()=>a,TodayInitial:()=>i});var n=function(e){return e.Finished="finished",e.Partial="partial",e.Unstarted="unstarted",e}({}),a=function(e){return e.Normal="normal",e.AnswerFirst="answerFirst",e}({}),i={tags:{},combinedToday:{status:n.Unstarted,due:0,new:0,dueUids:[],newUids:[],completed:0,completedUids:[],completedDue:0,completedDueUids:[],completedNew:0,completedNewUids:[]}}},1033:(e,t,r)=>{var n=r(6569),a=r(6260),i=r(5133),o=r(752),s=r(5509),l=r(2484),c=Object.getOwnPropertyDescriptor;t.f=r(8219)?c:function(e,t){if(e=i(e),t=o(t,!0),l)try{return c(e,t)}catch(e){}if(s(e,t))return a(!n.f.call(e,t),e[t])}},1156:(e,t,r)=>{e.exports={default:r(8271),__esModule:!0}},1331:(e,t,r)=>{e.exports=r(2677)},1356:(e,t,r)=>{var n=r(8423).f,a=r(5509),i=r(254)("toStringTag");e.exports=function(e,t,r){e&&!a(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},1609:e=>{e.exports=window.React},1614:(e,t,r)=>{r.d(t,{D:()=>a,Z:()=>n});var n=function(e){return e.FixedInterval="FIXED_INTERVAL",e.DefaultSpacedInterval="SPACED_INTERVAL",e}({}),a=function(e){return e.Days="Days",e.Weeks="Weeks",e.Months="Months",e.Years="Years",e}({})},1724:(e,t,r)=>{r(4284),e.exports=r(6438).Object.setPrototypeOf},1743:(e,t,r)=>{var n=r(5081),a=r(7956).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,a)}},1951:(e,t,r)=>{var n=r(8535);n(n.S,"Object",{create:r(2087)})},1984:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},2074:(e,t,r)=>{var n=r(4401),a=r(812),i=function(e,t){if(a(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,n){try{(n=r(8852)(Function.call,r(1033).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,r){return i(e,r),t?e.__proto__=r:n(e,r),e}}({},!1):void 0),check:i}},2087:(e,t,r)=>{var n=r(812),a=r(82),i=r(7956),o=r(4566)("IE_PROTO"),s=function(){},l="prototype",c=function(){var e,t=r(3802)("iframe"),n=i.length;for(t.style.display="none",r(3879).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;n--;)delete c[l][i[n]];return c()};e.exports=Object.create||function(e,t){var r;return null!==e?(s[l]=n(e),r=new s,s[l]=null,r[o]=e):r=c(),void 0===t?r:a(r,t)}},2160:(e,t,r)=>{r(8128),e.exports=r(6438).Object.getPrototypeOf},2293:(e,t,r)=>{var n=r(2560),a=r(322),i=r(210),o=r(5133);e.exports=r(8839)(Array,"Array",function(e,t){this._t=o(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,a(1)):a(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},2484:(e,t,r)=>{e.exports=!r(8219)&&!r(1984)(function(){return 7!=Object.defineProperty(r(3802)("div"),"a",{get:function(){return 7}}).a})},2560:e=>{e.exports=function(){}},2677:(e,t,r)=>{var n=r(8423),a=r(6260);e.exports=r(8219)?function(e,t,r){return n.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},2694:(e,t,r)=>{var n=r(6925);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,r,a,i,o){if(o!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return r.PropTypes=r,r}},2696:(e,t,r)=>{r(4712);var n=r(6438).Object;e.exports=function(e,t,r){return n.defineProperty(e,t,r)}},2860:(e,t,r)=>{r(7816)("asyncIterator")},2917:(e,t,r)=>{var n=r(9383),a=Math.max,i=Math.min;e.exports=function(e,t){return(e=n(e))<0?a(e+t,0):i(e,t)}},3049:(e,t,r)=>{var n=p(r(5505)),a=p(r(6007)),i=p(r(9506)),o=p(r(7588)),s=p(r(539)),l=p(r(7714)),c=p(r(1609)),u=p(r(5556)),f=p(r(9891));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(){var e,r,n,o;(0,i.default)(this,t);for(var l=arguments.length,c=Array(l),u=0;u<l;u++)c[u]=arguments[u];return r=n=(0,s.default)(this,(e=t.__proto__||(0,a.default)(t)).call.apply(e,[this].concat(c))),n.handleClickToPause=function(){n.anim.isPaused?n.anim.play():n.anim.pause()},o=r,(0,s.default)(n,o)}return(0,l.default)(t,e),(0,o.default)(t,[{key:"componentDidMount",value:function(){var e=this.props,t=e.options,r=e.eventListeners,a=t.loop,i=t.autoplay,o=t.animationData,s=t.rendererSettings,l=t.segments;this.options={container:this.el,renderer:"svg",loop:!1!==a,autoplay:!1!==i,segments:!1!==l,animationData:o,rendererSettings:s},this.options=(0,n.default)({},this.options,t),this.anim=f.default.loadAnimation(this.options),this.registerEvents(r)}},{key:"componentWillUpdate",value:function(e){this.options.animationData!==e.options.animationData&&(this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options=(0,n.default)({},this.options,e.options),this.anim=f.default.loadAnimation(this.options),this.registerEvents(e.eventListeners))}},{key:"componentDidUpdate",value:function(){this.props.isStopped?this.stop():this.props.segments?this.playSegments():this.play(),this.pause(),this.setSpeed(),this.setDirection()}},{key:"componentWillUnmount",value:function(){this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options.animationData=null,this.anim=null}},{key:"setSpeed",value:function(){this.anim.setSpeed(this.props.speed)}},{key:"setDirection",value:function(){this.anim.setDirection(this.props.direction)}},{key:"play",value:function(){this.anim.play()}},{key:"playSegments",value:function(){this.anim.playSegments(this.props.segments)}},{key:"stop",value:function(){this.anim.stop()}},{key:"pause",value:function(){(this.props.isPaused&&!this.anim.isPaused||!this.props.isPaused&&this.anim.isPaused)&&this.anim.pause()}},{key:"destroy",value:function(){this.anim.destroy()}},{key:"registerEvents",value:function(e){var t=this;e.forEach(function(e){t.anim.addEventListener(e.eventName,e.callback)})}},{key:"deRegisterEvents",value:function(e){var t=this;e.forEach(function(e){t.anim.removeEventListener(e.eventName,e.callback)})}},{key:"render",value:function(){var e=this,t=this.props,r=t.width,a=t.height,i=t.ariaRole,o=t.ariaLabel,s=t.isClickToPauseDisabled,l=t.title,u=function(e){return"number"==typeof e?e+"px":e||"100%"},f=(0,n.default)({width:u(r),height:u(a),overflow:"hidden",margin:"0 auto",outline:"none"},this.props.style),p=s?function(){return null}:this.handleClickToPause;return c.default.createElement("div",{ref:function(t){e.el=t},style:f,onClick:p,title:l,role:i,"aria-label":o,tabIndex:"0"})}}]),t}(c.default.Component);t.A=h,h.propTypes={eventListeners:u.default.arrayOf(u.default.object),options:u.default.object.isRequired,height:u.default.oneOfType([u.default.string,u.default.number]),width:u.default.oneOfType([u.default.string,u.default.number]),isStopped:u.default.bool,isPaused:u.default.bool,speed:u.default.number,segments:u.default.arrayOf(u.default.number),direction:u.default.number,ariaRole:u.default.string,ariaLabel:u.default.string,isClickToPauseDisabled:u.default.bool,title:u.default.string,style:u.default.string},h.defaultProps={eventListeners:[],isStopped:!1,isPaused:!1,speed:1,ariaRole:"button",ariaLabel:"animation",isClickToPauseDisabled:!1,title:""}},3172:(e,t,r)=>{var n=r(9383),a=r(7608);e.exports=function(e){return function(t,r){var i,o,s=String(a(t)),l=n(r),c=s.length;return l<0||l>=c?e?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===c||(o=s.charCodeAt(l+1))<56320||o>57343?e?s.charAt(l):i:e?s.slice(l,l+2):o-56320+(i-55296<<10)+65536}}},3193:(e,t,r)=>{e.exports={default:r(4734),__esModule:!0}},3417:e=>{var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},3697:(e,t,r)=>{r.r(t),r.d(t,{applyDeckTransform:()=>O,calculateDaysToDue:()=>C,defaultDotMatrixConfig:()=>S,filterDotsByDeck:()=>T,generateDotMatrixData:()=>E,generateDotMatrixDataWithTitles:()=>A,generatePriorityAxisLabels:()=>I,generateTimeAxisLabels:()=>F,getDeckBounds:()=>M,getNextDueDate:()=>P,logicalToCanvas:()=>D,mapDaysToY:()=>w,mapPriorityToX:()=>k});var n=r(5729);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e){return function(e){if(Array.isArray(e))return x(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||b(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(){var e=p(),t=e.m(o),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,s(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(o=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new d(e,t)},AsyncIterator:f,async:function(e,t,r,a,o){return(n(t)?u:c)(i(e),t,r,a,o)},keys:l,values:s}})()}function s(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(a(e)+" is not iterable")}function l(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function c(e,t,r,n,a){var i=u(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function u(e,t,r,n,a){return new f(p().w(e,t,r,n),a||Promise)}function f(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof d?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(h(f.prototype),h(f.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),h(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function p(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return h(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(h(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,h(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,h(f,"constructor",c),h(c,"constructor",l),l.displayName="GeneratorFunction",h(c,a,"GeneratorFunction"),h(f),h(f,a,"Generator"),h(f,n,function(){return this}),h(f,"toString",function(){return"[object Generator]"}),(p=function(){return{w:i,m:d}})()}function h(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}h=function(e,t,r,n){function i(t,r){h(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},h(e,t,r,n)}function d(e,t){this.v=e,this.k=t}function m(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(Object(r),!0).forEach(function(t){g(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function g(e,t,r){return(t=function(e){var t=function(e){if("object"!=a(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==a(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function v(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function _(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){v(i,n,a,o,s,"next",e)}function s(e){v(i,n,a,o,s,"throw",e)}o(void 0)})}}function b(e,t){if(e){if("string"==typeof e)return x(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?x(e,t):void 0}}function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}var S={maxDays:30,priorityRange:100,dotSize:4,canvasWidth:800,canvasHeight:400,marginX:80,marginY:50},C=function(e){var t=new Date;t.setHours(0,0,0,0);var r=new Date(e);r.setHours(0,0,0,0);var n=r.getTime()-t.getTime();return Math.ceil(n/864e5)},P=function(e){if(!e||0===e.length)return new Date;var t=e[e.length-1];return t.nextDueDate&&t.nextDueDate instanceof Date?t.nextDueDate:new Date},w=function(e,t){return e<=0?0:e>=t.maxDays?100:e/t.maxDays*100},k=function(e){return Math.max(0,Math.min(100,e))},D=function(e,t,r){var n=r.canvasWidth-2*r.marginX,a=r.canvasHeight-2*r.marginY;return{canvasX:r.marginX+e/100*n,canvasY:r.marginY+(100-t)/100*a}},E=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:S,a=[];return Object.entries(t).forEach(function(t){var i,o,s=(o=2,function(e){if(Array.isArray(e))return e}(i=t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}(i,o)||b(i,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0];s[1].forEach(function(t){var i=e[t]||[],o=P(i),s=C(o),c=r.indexOf(t),u=-1===c?50:(r.length-c)/r.length*100,f=1===i.length&&!i[0].grade,p=s<0,h={uid:t,deckName:l,x:k(u),y:w(s,n),dueDate:o,daysToDue:s,priority:u,isOverdue:p,isNew:f};a.push(h)})}),a},A=function(){var e=_(o().mark(function e(t,r,a){var i,s,l=arguments;return o().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=E(t,r,a,l.length>3&&void 0!==l[3]?l[3]:S),s=i.map(function(){var e=_(o().mark(function e(t){var r;return o().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,(0,n.YD)(t.uid);case 3:return r=e.sent,e.abrupt("return",y(y({},t),{},{title:(null==r?void 0:r.string)||t.uid.substring(0,8)+"..."}));case 7:return e.prev=7,e.t0=e.catch(0),console.warn("获取卡片标题失败 ".concat(t.uid,":"),e.t0),e.abrupt("return",y(y({},t),{},{title:t.uid.substring(0,8)+"..."}));case 11:case"end":return e.stop()}},e,null,[[0,7]])}));return function(t){return e.apply(this,arguments)}}()),e.abrupt("return",Promise.all(s));case 4:case"end":return e.stop()}},e)}));return function(t,r,n){return e.apply(this,arguments)}}(),T=function(e,t){return e.filter(function(e){return e.deckName===t})},M=function(e){return 0===e.length?{minX:0,maxX:0,minY:0,maxY:0}:{minX:Math.min.apply(Math,i(e.map(function(e){return e.x}))),maxX:Math.max.apply(Math,i(e.map(function(e){return e.x}))),minY:Math.min.apply(Math,i(e.map(function(e){return e.y}))),maxY:Math.max.apply(Math,i(e.map(function(e){return e.y})))}},O=function(e,t,r){if(0===e.length)return e;var n=M(e),a=(n.minX+n.maxX)/2;return e.map(function(e){return y(y({},e),{},{x:Math.max(0,Math.min(100,a+(e.x-a)*r+t))})})},F=function(e){var t=[];t.push({position:0,label:"今天"});for(var r=7;r<=e.maxDays;r+=7){var n=w(r,e);t.push({position:n,label:"".concat(r,"天")})}return t},I=function(){for(var e=[],t=0;t<=100;t+=25)e.push({position:t,label:"".concat(t,"%")});return e}},3758:(e,t,r)=>{var n=r(8535);n(n.S+n.F,"Object",{assign:r(6854)})},3802:(e,t,r)=>{var n=r(4401),a=r(6670).document,i=n(a)&&n(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},3879:(e,t,r)=>{var n=r(6670).document;e.exports=n&&n.documentElement},4220:(e,t,r)=>{r(7863),r(7914),e.exports=r(4336).f("iterator")},4284:(e,t,r)=>{var n=r(8535);n(n.S,"Object",{setPrototypeOf:r(2074).set})},4311:(e,t,r)=>{var n=r(5081),a=r(7956);e.exports=Object.keys||function(e){return n(e,a)}},4336:(e,t,r)=>{t.f=r(254)},4353:function(e){e.exports=function(){var e=6e4,t=36e5,r="millisecond",n="second",a="minute",i="hour",o="day",s="week",l="month",c="quarter",u="year",f="date",p="Invalid Date",h=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,d=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,m={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(e){var t=["th","st","nd","rd"],r=e%100;return"["+e+(t[(r-20)%10]||t[r]||t[0])+"]"}},y=function(e,t,r){var n=String(e);return!n||n.length>=t?e:""+Array(t+1-n.length).join(r)+e},g={s:y,z:function(e){var t=-e.utcOffset(),r=Math.abs(t),n=Math.floor(r/60),a=r%60;return(t<=0?"+":"-")+y(n,2,"0")+":"+y(a,2,"0")},m:function e(t,r){if(t.date()<r.date())return-e(r,t);var n=12*(r.year()-t.year())+(r.month()-t.month()),a=t.clone().add(n,l),i=r-a<0,o=t.clone().add(n+(i?-1:1),l);return+(-(n+(r-a)/(i?a-o:o-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:l,y:u,w:s,d:o,D:f,h:i,m:a,s:n,ms:r,Q:c}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},v="en",_={};_[v]=m;var b="$isDayjsObject",x=function(e){return e instanceof w||!(!e||!e[b])},S=function e(t,r,n){var a;if(!t)return v;if("string"==typeof t){var i=t.toLowerCase();_[i]&&(a=i),r&&(_[i]=r,a=i);var o=t.split("-");if(!a&&o.length>1)return e(o[0])}else{var s=t.name;_[s]=t,a=s}return!n&&a&&(v=a),a||!n&&v},C=function(e,t){if(x(e))return e.clone();var r="object"==typeof t?t:{};return r.date=e,r.args=arguments,new w(r)},P=g;P.l=S,P.i=x,P.w=function(e,t){return C(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var w=function(){function m(e){this.$L=S(e.locale,null,!0),this.parse(e),this.$x=this.$x||e.x||{},this[b]=!0}var y=m.prototype;return y.parse=function(e){this.$d=function(e){var t=e.date,r=e.utc;if(null===t)return new Date(NaN);if(P.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var n=t.match(h);if(n){var a=n[2]-1||0,i=(n[7]||"0").substring(0,3);return r?new Date(Date.UTC(n[1],a,n[3]||1,n[4]||0,n[5]||0,n[6]||0,i)):new Date(n[1],a,n[3]||1,n[4]||0,n[5]||0,n[6]||0,i)}}return new Date(t)}(e),this.init()},y.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},y.$utils=function(){return P},y.isValid=function(){return!(this.$d.toString()===p)},y.isSame=function(e,t){var r=C(e);return this.startOf(t)<=r&&r<=this.endOf(t)},y.isAfter=function(e,t){return C(e)<this.startOf(t)},y.isBefore=function(e,t){return this.endOf(t)<C(e)},y.$g=function(e,t,r){return P.u(e)?this[t]:this.set(r,e)},y.unix=function(){return Math.floor(this.valueOf()/1e3)},y.valueOf=function(){return this.$d.getTime()},y.startOf=function(e,t){var r=this,c=!!P.u(t)||t,p=P.p(e),h=function(e,t){var n=P.w(r.$u?Date.UTC(r.$y,t,e):new Date(r.$y,t,e),r);return c?n:n.endOf(o)},d=function(e,t){return P.w(r.toDate()[e].apply(r.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(t)),r)},m=this.$W,y=this.$M,g=this.$D,v="set"+(this.$u?"UTC":"");switch(p){case u:return c?h(1,0):h(31,11);case l:return c?h(1,y):h(0,y+1);case s:var _=this.$locale().weekStart||0,b=(m<_?m+7:m)-_;return h(c?g-b:g+(6-b),y);case o:case f:return d(v+"Hours",0);case i:return d(v+"Minutes",1);case a:return d(v+"Seconds",2);case n:return d(v+"Milliseconds",3);default:return this.clone()}},y.endOf=function(e){return this.startOf(e,!1)},y.$set=function(e,t){var s,c=P.p(e),p="set"+(this.$u?"UTC":""),h=(s={},s[o]=p+"Date",s[f]=p+"Date",s[l]=p+"Month",s[u]=p+"FullYear",s[i]=p+"Hours",s[a]=p+"Minutes",s[n]=p+"Seconds",s[r]=p+"Milliseconds",s)[c],d=c===o?this.$D+(t-this.$W):t;if(c===l||c===u){var m=this.clone().set(f,1);m.$d[h](d),m.init(),this.$d=m.set(f,Math.min(this.$D,m.daysInMonth())).$d}else h&&this.$d[h](d);return this.init(),this},y.set=function(e,t){return this.clone().$set(e,t)},y.get=function(e){return this[P.p(e)]()},y.add=function(r,c){var f,p=this;r=Number(r);var h=P.p(c),d=function(e){var t=C(p);return P.w(t.date(t.date()+Math.round(e*r)),p)};if(h===l)return this.set(l,this.$M+r);if(h===u)return this.set(u,this.$y+r);if(h===o)return d(1);if(h===s)return d(7);var m=(f={},f[a]=e,f[i]=t,f[n]=1e3,f)[h]||1,y=this.$d.getTime()+r*m;return P.w(y,this)},y.subtract=function(e,t){return this.add(-1*e,t)},y.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return r.invalidDate||p;var n=e||"YYYY-MM-DDTHH:mm:ssZ",a=P.z(this),i=this.$H,o=this.$m,s=this.$M,l=r.weekdays,c=r.months,u=r.meridiem,f=function(e,r,a,i){return e&&(e[r]||e(t,n))||a[r].slice(0,i)},h=function(e){return P.s(i%12||12,e,"0")},m=u||function(e,t,r){var n=e<12?"AM":"PM";return r?n.toLowerCase():n};return n.replace(d,function(e,n){return n||function(e){switch(e){case"YY":return String(t.$y).slice(-2);case"YYYY":return P.s(t.$y,4,"0");case"M":return s+1;case"MM":return P.s(s+1,2,"0");case"MMM":return f(r.monthsShort,s,c,3);case"MMMM":return f(c,s);case"D":return t.$D;case"DD":return P.s(t.$D,2,"0");case"d":return String(t.$W);case"dd":return f(r.weekdaysMin,t.$W,l,2);case"ddd":return f(r.weekdaysShort,t.$W,l,3);case"dddd":return l[t.$W];case"H":return String(i);case"HH":return P.s(i,2,"0");case"h":return h(1);case"hh":return h(2);case"a":return m(i,o,!0);case"A":return m(i,o,!1);case"m":return String(o);case"mm":return P.s(o,2,"0");case"s":return String(t.$s);case"ss":return P.s(t.$s,2,"0");case"SSS":return P.s(t.$ms,3,"0");case"Z":return a}return null}(e)||a.replace(":","")})},y.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},y.diff=function(r,f,p){var h,d=this,m=P.p(f),y=C(r),g=(y.utcOffset()-this.utcOffset())*e,v=this-y,_=function(){return P.m(d,y)};switch(m){case u:h=_()/12;break;case l:h=_();break;case c:h=_()/3;break;case s:h=(v-g)/6048e5;break;case o:h=(v-g)/864e5;break;case i:h=v/t;break;case a:h=v/e;break;case n:h=v/1e3;break;default:h=v}return p?h:P.a(h)},y.daysInMonth=function(){return this.endOf(l).$D},y.$locale=function(){return _[this.$L]},y.locale=function(e,t){if(!e)return this.$L;var r=this.clone(),n=S(e,t,!0);return n&&(r.$L=n),r},y.clone=function(){return P.w(this.$d,this)},y.toDate=function(){return new Date(this.valueOf())},y.toJSON=function(){return this.isValid()?this.toISOString():null},y.toISOString=function(){return this.$d.toISOString()},y.toString=function(){return this.$d.toUTCString()},m}(),k=w.prototype;return C.prototype=k,[["$ms",r],["$s",n],["$m",a],["$H",i],["$W",o],["$M",l],["$y",u],["$D",f]].forEach(function(e){k[e[1]]=function(t){return this.$g(t,e[0],e[1])}}),C.extend=function(e,t){return e.$i||(e(t,w,C),e.$i=!0),C},C.locale=S,C.isDayjs=x,C.unix=function(e){return C(1e3*e)},C.en=_[v],C.Ls=_,C.p={},C}()},4401:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},4448:(e,t,r)=>{var n=r(5133),a=r(181),i=r(2917);e.exports=function(e){return function(t,r,o){var s,l=n(t),c=a(l.length),u=i(o,c);if(e&&r!=r){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===r)return e||u||0;return!e&&-1}}},4566:(e,t,r)=>{var n=r(6308)("keys"),a=r(9191);e.exports=function(e){return n[e]||(n[e]=a(e))}},4712:(e,t,r)=>{var n=r(8535);n(n.S+n.F*!r(8219),"Object",{defineProperty:r(8423).f})},4734:(e,t,r)=>{r(3758),e.exports=r(6438).Object.assign},4742:e=>{e.exports=!0},5081:(e,t,r)=>{var n=r(5509),a=r(5133),i=r(4448)(!1),o=r(4566)("IE_PROTO");e.exports=function(e,t){var r,s=a(e),l=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;t.length>l;)n(s,r=t[l++])&&(~i(c,r)||c.push(r));return c}},5133:(e,t,r)=>{var n=r(7001),a=r(7608);e.exports=function(e){return n(a(e))}},5172:(e,t,r)=>{var n=r(9191)("meta"),a=r(4401),i=r(5509),o=r(8423).f,s=0,l=Object.isExtensible||function(){return!0},c=!r(1984)(function(){return l(Object.preventExtensions({}))}),u=function(e){o(e,n,{value:{i:"O"+ ++s,w:{}}})},f=e.exports={KEY:n,NEED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!l(e))return"F";if(!t)return"E";u(e)}return e[n].i},getWeak:function(e,t){if(!i(e,n)){if(!l(e))return!0;if(!t)return!1;u(e)}return e[n].w},onFreeze:function(e){return c&&f.NEED&&l(e)&&!i(e,n)&&u(e),e}}},5207:()=>{!function(e,t,r){if(e.MutationObserver&&"undefined"!=typeof HTMLElement){var n,a=0,i=(n=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector,{matchesSelector:function(e,t){return e instanceof HTMLElement&&n.call(e,t)},addMethod:function(e,t,r){var n=e[t];e[t]=function(){return r.length==arguments.length?r.apply(this,arguments):"function"==typeof n?n.apply(this,arguments):void 0}},callCallbacks:function(e,t){t&&t.options.onceOnly&&1==t.firedElems.length&&(e=[e[0]]);for(var r,n=0;r=e[n];n++)r&&r.callback&&r.callback.call(r.elem,r.elem);t&&t.options.onceOnly&&1==t.firedElems.length&&t.me.unbindEventWithSelectorAndCallback.call(t.target,t.selector,t.callback)},checkChildNodesRecursively:function(e,t,r,n){for(var a,o=0;a=e[o];o++)r(a,t,n)&&n.push({callback:t.callback,elem:a}),a.childNodes.length>0&&i.checkChildNodesRecursively(a.childNodes,t,r,n)},mergeArrays:function(e,t){var r,n={};for(r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);for(r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);return n},toElementsArray:function(t){return void 0===t||"number"==typeof t.length&&t!==e||(t=[t]),t}}),o=function(){var e=function(){this._eventsBucket=[],this._beforeAdding=null,this._beforeRemoving=null};return e.prototype.addEvent=function(e,t,r,n){var a={target:e,selector:t,options:r,callback:n,firedElems:[]};return this._beforeAdding&&this._beforeAdding(a),this._eventsBucket.push(a),a},e.prototype.removeEvent=function(e){for(var t,r=this._eventsBucket.length-1;t=this._eventsBucket[r];r--)if(e(t)){this._beforeRemoving&&this._beforeRemoving(t);var n=this._eventsBucket.splice(r,1);n&&n.length&&(n[0].callback=null)}},e.prototype.beforeAdding=function(e){this._beforeAdding=e},e.prototype.beforeRemoving=function(e){this._beforeRemoving=e},e}(),s=function(t,n){var a=new o,s=this,l={fireOnAttributesModification:!1};return a.beforeAdding(function(r){var a,i=r.target;i!==e.document&&i!==e||(i=document.getElementsByTagName("html")[0]),a=new MutationObserver(function(e){n.call(this,e,r)});var o=t(r.options);a.observe(i,o),r.observer=a,r.me=s}),a.beforeRemoving(function(e){e.observer.disconnect()}),this.bindEvent=function(e,t,r){t=i.mergeArrays(l,t);for(var n=i.toElementsArray(this),o=0;o<n.length;o++)a.addEvent(n[o],e,t,r)},this.unbindEvent=function(){var e=i.toElementsArray(this);a.removeEvent(function(t){for(var n=0;n<e.length;n++)if(this===r||t.target===e[n])return!0;return!1})},this.unbindEventWithSelectorOrCallback=function(e){var t,n=i.toElementsArray(this),o=e;t="function"==typeof e?function(e){for(var t=0;t<n.length;t++)if((this===r||e.target===n[t])&&e.callback===o)return!0;return!1}:function(t){for(var a=0;a<n.length;a++)if((this===r||t.target===n[a])&&t.selector===e)return!0;return!1},a.removeEvent(t)},this.unbindEventWithSelectorAndCallback=function(e,t){var n=i.toElementsArray(this);a.removeEvent(function(a){for(var i=0;i<n.length;i++)if((this===r||a.target===n[i])&&a.selector===e&&a.callback===t)return!0;return!1})},this},l=new function(){var e={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};function t(e,t,n){return!(!i.matchesSelector(e,t.selector)||(e._id===r&&(e._id=a++),-1!=t.firedElems.indexOf(e._id))||(t.firedElems.push(e._id),0))}var n=(l=new s(function(e){var t={attributes:!1,childList:!0,subtree:!0};return e.fireOnAttributesModification&&(t.attributes=!0),t},function(e,r){e.forEach(function(e){var n=e.addedNodes,a=e.target,o=[];null!==n&&n.length>0?i.checkChildNodesRecursively(n,r,t,o):"attributes"===e.type&&t(a,r)&&o.push({callback:r.callback,elem:a}),i.callCallbacks(o,r)})})).bindEvent;return l.bindEvent=function(t,r,a){void 0===a?(a=r,r=e):r=i.mergeArrays(e,r);var o=i.toElementsArray(this);if(r.existing){for(var s=[],l=0;l<o.length;l++)for(var c=o[l].querySelectorAll(t),u=0;u<c.length;u++)s.push({callback:a,elem:c[u]});if(r.onceOnly&&s.length)return a.call(s[0].elem,s[0].elem);setTimeout(i.callCallbacks,1,s)}n.call(this,t,r,a)},l},c=new function(){var e={};function t(e,t){return i.matchesSelector(e,t.selector)}var r=(c=new s(function(){return{childList:!0,subtree:!0}},function(e,r){e.forEach(function(e){var n=e.removedNodes,a=[];null!==n&&n.length>0&&i.checkChildNodesRecursively(n,r,t,a),i.callCallbacks(a,r)})})).bindEvent;return c.bindEvent=function(t,n,a){void 0===a?(a=n,n=e):n=i.mergeArrays(e,n),r.call(this,t,n,a)},c};t&&p(t.fn),p(HTMLElement.prototype),p(NodeList.prototype),p(HTMLCollection.prototype),p(HTMLDocument.prototype),p(Window.prototype);var u={};return f(l,u,"unbindAllArrive"),f(c,u,"unbindAllLeave"),u}function f(e,t,r){i.addMethod(t,r,e.unbindEvent),i.addMethod(t,r,e.unbindEventWithSelectorOrCallback),i.addMethod(t,r,e.unbindEventWithSelectorAndCallback)}function p(e){e.arrive=l.bindEvent,f(l,e,"unbindArrive"),e.leave=c.bindEvent,f(c,e,"unbindLeave")}}(window,"undefined"==typeof jQuery?null:jQuery,void 0)},5219:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},5461:(e,t,r)=>{var n=r(3417);e.exports=Array.isArray||function(e){return"Array"==n(e)}},5505:(e,t,r)=>{t.__esModule=!0;var n,a=(n=r(3193))&&n.__esModule?n:{default:n};t.default=a.default||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}},5509:e=>{var t={}.hasOwnProperty;e.exports=function(e,r){return t.call(e,r)}},5522:(e,t,r)=>{e.exports={default:r(6560),__esModule:!0}},5556:(e,t,r)=>{e.exports=r(2694)()},5729:(e,t,r)=>{r.d(t,{$v:()=>T,$y:()=>w,Lv:()=>A,Q6:()=>D,YD:()=>b,cb:()=>M,eo:()=>P,gG:()=>k,j$:()=>S});var n=r(1614);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach(function(t){s(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function s(e,t,r){return(t=function(e){var t=function(e){if("object"!=a(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==a(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(){var e=d(),t=e.m(l),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,c(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(l=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new y(e,t)},AsyncIterator:h,async:function(e,t,r,a,o){return(n(t)?p:f)(i(e),t,r,a,o)},keys:u,values:c}})()}function c(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(a(e)+" is not iterable")}function u(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function f(e,t,r,n,a){var i=p(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function p(e,t,r,n,a){return new h(d().w(e,t,r,n),a||Promise)}function h(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof y?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(m(h.prototype),m(h.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),m(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function d(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return m(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(m(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,m(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,m(f,"constructor",c),m(c,"constructor",l),l.displayName="GeneratorFunction",m(c,a,"GeneratorFunction"),m(f),m(f,a,"Generator"),m(f,n,function(){return this}),m(f,"toString",function(){return"[object Generator]"}),(d=function(){return{w:i,m:p}})()}function m(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}m=function(e,t,r,n){function i(t,r){m(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},m(e,t,r,n)}function y(e,t){this.v=e,this.k=t}function g(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function v(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){g(i,n,a,o,s,"next",e)}function s(e){g(i,n,a,o,s,"throw",e)}o(void 0)})}}var _=function(){var e=v(l().mark(function e(t){var r,n;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.refUid,e.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?parentIds [\n    :node/title\n    :block/string\n    :block/uid])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n    [?block :block/parents ?parentIds]\n  ]",r);case 3:return n=e.sent,e.abrupt("return",n.map(function(e){return e[0]}));case 5:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),b=function(){var e=v(l().mark(function e(t){var r,n,a,i,o;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?block [\n    :block/string\n    :block/children\n    {:block/children [:block/uid :block/string :block/order]}])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n  ]",t);case 3:if((n=e.sent)&&n[0]&&n[0][0]){e.next=6;break}return e.abrupt("return",null);case 6:return a=n[0][0],e.next=9,_({refUid:t});case 9:return i=e.sent,o=null===(r=a.children)||void 0===r?void 0:r.sort(function(e,t){return e.order-t.order}),e.abrupt("return",{string:a.string,children:null==o?void 0:o.map(function(e){return e.string}),childrenUids:null==o?void 0:o.map(function(e){return e.uid}),breadcrumbs:i,refUid:t});case 14:return e.prev=14,e.t0=e.catch(0),console.warn("获取块信息失败 ".concat(t,":"),e.t0),e.abrupt("return",null);case 18:case"end":return e.stop()}},e,null,[[0,14]])}));return function(t){return e.apply(this,arguments)}}(),x=function(e){var t=window.roamAlphaAPI.q("[\n  :find ?uid :in $ ?title\n  :where\n    [?page :node/title ?title]\n    [?page :block/uid ?uid]\n]",e);if(t.length)return t[0][0]},S=function(){var e=v(l().mark(function e(t){var r,n;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=x(t))){e.next=3;break}return e.abrupt("return",r);case 3:return n=window.roamAlphaAPI.util.generateUID(),e.next=6,window.roamAlphaAPI.data.page.create({page:{title:t,uid:n}});case 6:return e.abrupt("return",x(t));case 7:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),C=function(e,t){var r=window.roamAlphaAPI.q("\n    [:find ?block_uid\n     :in $ ?page_title ?block_string\n     :where\n     [?page :node/title ?page_title]\n     [?page :block/uid ?page_uid]\n     [?block :block/parents ?page]\n     [?block :block/string ?block_string]\n     [?block :block/uid ?block_uid]\n    ]",e,t);if(r.length)return r[0][0]},P=function(e,t){var r=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{exactMatch:!0}).exactMatch?"\n    [:find ?block_uid\n    :in $ ?parent_uid ?block_string\n    :where\n      [?parent :block/uid ?parent_uid]\n      [?block :block/parents ?parent]\n      [?block :block/string ?block_string]\n      [?block :block/uid ?block_uid]\n    ]\n  ":"\n    [:find ?block_uid\n      :in $ ?parent_uid ?block_sub_string\n      :where\n        [?parent :block/uid ?parent_uid]\n        [?block :block/parents ?parent]\n        [?block :block/string ?block_string]\n        [(clojure.string/starts-with? ?block_string ?block_sub_string)]\n        [?block :block/uid ?block_uid]\n    ]\n  ",n=window.roamAlphaAPI.q(r,e,t);if(n.length)return n[0][0]},w=function(e){var t=window.roamAlphaAPI.q("[\n  :find (pull ?tagPage [\n    :block/uid\n    :block/string\n    :block/children\n    {:block/children ...}])\n  :in $ ?tag\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagPage :block/children ?tagPageChildren]\n  ]",e);return t.length?t:[]},k=function(e){try{var t=window.roamAlphaAPI.q("[\n  :find (pull ?child [\n    :block/uid\n    :block/string\n    :block/order])\n  :in $ ?parent_uid\n  :where\n    [?parent :block/uid ?parent_uid]\n    [?parent :block/children ?child]\n  ]",e);if(!t.length)return[];var r=t.map(function(e){return e[0]}).sort(function(e,t){return e.order-t.order});return r}catch(e){return console.error("getChildBlocksByUid 失败:",e),[]}},D=function(){var e=v(l().mark(function e(t,r,n){var a,i,s=arguments;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=s.length>3&&void 0!==s[3]?s[3]:{},n||(n=0),i=window.roamAlphaAPI.util.generateUID(),e.next=5,window.roamAlphaAPI.createBlock({location:{"parent-uid":t,order:n},block:o({string:r,uid:i},a)});case 5:return e.abrupt("return",i);case 6:case"end":return e.stop()}},e)}));return function(t,r,n){return e.apply(this,arguments)}}(),E=function(){var e=v(l().mark(function e(t,r,n,a){var i;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=x(t),e.abrupt("return",D(i,r,n,a));case 2:case"end":return e.stop()}},e)}));return function(t,r,n,a){return e.apply(this,arguments)}}(),A=function(){var e=v(l().mark(function e(t,r,n,a){var i;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(i=C(t,r))){e.next=3;break}return e.abrupt("return",i);case 3:return e.abrupt("return",E(t,r,n,a));case 4:case"end":return e.stop()}},e)}));return function(t,r,n,a){return e.apply(this,arguments)}}(),T=function(){var e=v(l().mark(function e(t,r,n,a){var i;return l().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(i=P(t,r))){e.next=3;break}return e.abrupt("return",i);case 3:return e.abrupt("return",D(t,r,n,a));case 4:case"end":return e.stop()}},e)}));return function(t,r,n,a){return e.apply(this,arguments)}}(),M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.reviewMode,r=void 0===t?n.Z.FixedInterval:t,a=e.dateCreated,i=void 0===a?void 0:a,o=e.isNew,s=void 0===o||o;return r===n.Z.DefaultSpacedInterval?{dateCreated:i||new Date,eFactor:2.5,interval:0,repetitions:0,isNew:s,reviewMode:r}:{dateCreated:i||new Date,intervalMultiplier:3,intervalMultiplierType:n.D.Days,isNew:s,reviewMode:r}}},5971:(e,t,r)=>{e.exports={default:r(1724),__esModule:!0}},6007:(e,t,r)=>{e.exports={default:r(2160),__esModule:!0}},6123:(e,t,r)=>{var n=r(5509),a=r(6310),i=r(4566)("IE_PROTO"),o=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=a(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?o:null}},6260:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6279:function(e){e.exports=function(e,t,r){e=e||{};var n=t.prototype,a={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function i(e,t,r,a){return n.fromToBase(e,t,r,a)}r.en.relativeTime=a,n.fromToBase=function(t,n,i,o,s){for(var l,c,u,f=i.$locale().relativeTime||a,p=e.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],h=p.length,d=0;d<h;d+=1){var m=p[d];m.d&&(l=o?r(t).diff(i,m.d,!0):i.diff(t,m.d,!0));var y=(e.rounding||Math.round)(Math.abs(l));if(u=l>0,y<=m.r||!m.r){y<=1&&d>0&&(m=p[d-1]);var g=f[m.l];s&&(y=s(""+y)),c="string"==typeof g?g.replace("%d",y):g(y,n,m.l,u);break}}if(n)return c;var v=u?f.future:f.past;return"function"==typeof v?v(c):v.replace("%s",c)},n.to=function(e,t){return i(e,t,this,!0)},n.from=function(e,t){return i(e,t,this)};var o=function(e){return e.$u?r.utc():r()};n.toNow=function(e){return this.to(o(this),e)},n.fromNow=function(e){return this.from(o(this),e)}}},6308:(e,t,r)=>{var n=r(6438),a=r(6670),i="__core-js_shared__",o=a[i]||(a[i]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:r(4742)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},6309:(e,t,r)=>{var n=r(5133),a=r(1743).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return o&&"[object Window]"==i.call(e)?function(e){try{return a(e)}catch(e){return o.slice()}}(e):a(n(e))}},6310:(e,t,r)=>{var n=r(7608);e.exports=function(e){return Object(n(e))}},6327:(e,t,r)=>{e.exports={default:r(4220),__esModule:!0}},6438:e=>{var t=e.exports={version:"2.6.12"};"number"==typeof __e&&(__e=t)},6473:(e,t,r)=>{var n=r(4311),a=r(9820),i=r(6569);e.exports=function(e){var t=n(e),r=a.f;if(r)for(var o,s=r(e),l=i.f,c=0;s.length>c;)l.call(e,o=s[c++])&&t.push(o);return t}},6560:(e,t,r)=>{r(9626),r(8978),r(2860),r(716),e.exports=r(6438).Symbol},6569:(e,t)=>{t.f={}.propertyIsEnumerable},6670:e=>{var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},6854:(e,t,r)=>{var n=r(8219),a=r(4311),i=r(9820),o=r(6569),s=r(6310),l=r(7001),c=Object.assign;e.exports=!c||r(1984)(function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach(function(e){t[e]=e}),7!=c({},e)[r]||Object.keys(c({},t)).join("")!=n})?function(e,t){for(var r=s(e),c=arguments.length,u=1,f=i.f,p=o.f;c>u;)for(var h,d=l(arguments[u++]),m=f?a(d).concat(f(d)):a(d),y=m.length,g=0;y>g;)h=m[g++],n&&!p.call(d,h)||(r[h]=d[h]);return r}:c},6925:e=>{e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},7001:(e,t,r)=>{var n=r(3417);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},7331:(e,t,r)=>{var n=r(8535),a=r(6438),i=r(1984);e.exports=function(e,t){var r=(a.Object||{})[e]||Object[e],o={};o[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",o)}},7479:(e,t,r)=>{t.__esModule=!0;var n=o(r(6327)),a=o(r(5522)),i="function"==typeof a.default&&"symbol"==typeof n.default?function(e){return typeof e}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":typeof e};function o(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof a.default&&"symbol"===i(n.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":void 0===e?"undefined":i(e)}},7588:(e,t,r)=>{t.__esModule=!0;var n,a=(n=r(9829))&&n.__esModule?n:{default:n};t.default=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,a.default)(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},7608:e=>{e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},7714:(e,t,r)=>{t.__esModule=!0;var n=o(r(5971)),a=o(r(1156)),i=o(r(7479));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,i.default)(t)));e.prototype=(0,a.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(n.default?(0,n.default)(e,t):e.__proto__=t)}},7816:(e,t,r)=>{var n=r(6670),a=r(6438),i=r(4742),o=r(4336),s=r(8423).f;e.exports=function(e){var t=a.Symbol||(a.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:o.f(e)})}},7863:(e,t,r)=>{var n=r(3172)(!0);r(8839)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},7914:(e,t,r)=>{r(2293);for(var n=r(6670),a=r(2677),i=r(210),o=r(254)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],u=n[c],f=u&&u.prototype;f&&!f[o]&&a(f,o,c),i[c]=i.Array}},7956:e=>{e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},8128:(e,t,r)=>{var n=r(6310),a=r(6123);r(7331)("getPrototypeOf",function(){return function(e){return a(n(e))}})},8219:(e,t,r)=>{e.exports=!r(1984)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},8248:(e,t,r)=>{var n=r(2087),a=r(6260),i=r(1356),o={};r(2677)(o,r(254)("iterator"),function(){return this}),e.exports=function(e,t,r){e.prototype=n(o,{next:a(1,r)}),i(e,t+" Iterator")}},8271:(e,t,r)=>{r(1951);var n=r(6438).Object;e.exports=function(e,t){return n.create(e,t)}},8423:(e,t,r)=>{var n=r(812),a=r(2484),i=r(752),o=Object.defineProperty;t.f=r(8219)?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),a)try{return o(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},8535:(e,t,r)=>{var n=r(6670),a=r(6438),i=r(8852),o=r(2677),s=r(5509),l="prototype",c=function(e,t,r){var u,f,p,h=e&c.F,d=e&c.G,m=e&c.S,y=e&c.P,g=e&c.B,v=e&c.W,_=d?a:a[t]||(a[t]={}),b=_[l],x=d?n:m?n[t]:(n[t]||{})[l];for(u in d&&(r=t),r)(f=!h&&x&&void 0!==x[u])&&s(_,u)||(p=f?x[u]:r[u],_[u]=d&&"function"!=typeof x[u]?r[u]:g&&f?i(p,n):v&&x[u]==p?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[l]=e[l],t}(p):y&&"function"==typeof p?i(Function.call,p):p,y&&((_.virtual||(_.virtual={}))[u]=p,e&c.R&&b&&!b[u]&&o(b,u,p)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},8720:function(e){e.exports=function(e,t,r){var n="h:mm A",a={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};t.prototype.calendar=function(e,t){var n=t||this.$locale().calendar||a,i=r(e||void 0).startOf("d"),o=this.diff(i,"d",!0),s="sameElse",l=o<-6?s:o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":s,c=n[l]||a[l];return"function"==typeof c?c.call(this,r()):this.format(c)}}},8825:(e,t,r)=>{r.r(t),r.d(t,{addDays:()=>c,customFromNow:()=>h,daysBetween:()=>f,fromNow:()=>p,isDate:()=>m,isSameDay:()=>d,subtractDays:()=>u});var n=r(4353),a=r.n(n),i=r(6279),o=r.n(i),s=r(8720),l=r.n(s);a().extend(o()),a().extend(l());var c=function(e,t){var r=new Date(e);return r.setDate(r.getDate()+t),r},u=function(e,t){var r=new Date(e);return r.setDate(r.getDate()-t),r},f=function(e,t){var r=e,n=t;return Math.floor(Math.abs((r-n)/864e5))},p=function(e){return a()(e).fromNow()},h=function(e){var t=new Date,r=new Date(e),n=new Date(t.getFullYear(),t.getMonth(),t.getDate()),a=new Date(r.getFullYear(),r.getMonth(),r.getDate()).getTime()-n.getTime(),i=Math.round(a/864e5);if(i<0){var o=Math.abs(i);return 1===o?"昨天":"".concat(o,"天前")}return 0===i?"今天":1===i?"明天":"".concat(i,"天后")},d=function(e,t){return!(!m(e)||!m(t))&&e.toDateString()===t.toDateString()},m=function(e){return e&&"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e)}},8839:(e,t,r)=>{var n=r(4742),a=r(8535),i=r(1331),o=r(2677),s=r(210),l=r(8248),c=r(1356),u=r(6123),f=r(254)("iterator"),p=!([].keys&&"next"in[].keys()),h="keys",d="values",m=function(){return this};e.exports=function(e,t,r,y,g,v,_){l(r,t,y);var b,x,S,C=function(e){if(!p&&e in D)return D[e];switch(e){case h:case d:return function(){return new r(this,e)}}return function(){return new r(this,e)}},P=t+" Iterator",w=g==d,k=!1,D=e.prototype,E=D[f]||D["@@iterator"]||g&&D[g],A=E||C(g),T=g?w?C("entries"):A:void 0,M="Array"==t&&D.entries||E;if(M&&(S=u(M.call(new e)))!==Object.prototype&&S.next&&(c(S,P,!0),n||"function"==typeof S[f]||o(S,f,m)),w&&E&&E.name!==d&&(k=!0,A=function(){return E.call(this)}),n&&!_||!p&&!k&&D[f]||o(D,f,A),s[t]=A,s[P]=m,g)if(b={values:w?A:C(d),keys:v?A:C(h),entries:T},_)for(x in b)x in D||i(D,x,b[x]);else a(a.P+a.F*(p||k),t,b);return b}},8852:(e,t,r)=>{var n=r(5219);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,a){return e.call(t,r,n,a)}}return function(){return e.apply(t,arguments)}}},8978:()=>{},9191:e=>{var t=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+r).toString(36))}},9383:e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:t)(e)}},9506:(e,t)=>{t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},9626:(e,t,r)=>{var n=r(6670),a=r(5509),i=r(8219),o=r(8535),s=r(1331),l=r(5172).KEY,c=r(1984),u=r(6308),f=r(1356),p=r(9191),h=r(254),d=r(4336),m=r(7816),y=r(6473),g=r(5461),v=r(812),_=r(4401),b=r(6310),x=r(5133),S=r(752),C=r(6260),P=r(2087),w=r(6309),k=r(1033),D=r(9820),E=r(8423),A=r(4311),T=k.f,M=E.f,O=w.f,F=n.Symbol,I=n.JSON,R=I&&I.stringify,j="prototype",L=h("_hidden"),B=h("toPrimitive"),N={}.propertyIsEnumerable,G=u("symbol-registry"),V=u("symbols"),U=u("op-symbols"),z=Object[j],H="function"==typeof F&&!!D.f,W=n.QObject,$=!W||!W[j]||!W[j].findChild,K=i&&c(function(){return 7!=P(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=T(z,t);n&&delete z[t],M(e,t,r),n&&e!==z&&M(z,t,n)}:M,q=function(e){var t=V[e]=P(F[j]);return t._k=e,t},Y=H&&"symbol"==typeof F.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof F},X=function(e,t,r){return e===z&&X(U,t,r),v(e),t=S(t,!0),v(r),a(V,t)?(r.enumerable?(a(e,L)&&e[L][t]&&(e[L][t]=!1),r=P(r,{enumerable:C(0,!1)})):(a(e,L)||M(e,L,C(1,{})),e[L][t]=!0),K(e,t,r)):M(e,t,r)},Q=function(e,t){v(e);for(var r,n=y(t=x(t)),a=0,i=n.length;i>a;)X(e,r=n[a++],t[r]);return e},Z=function(e){var t=N.call(this,e=S(e,!0));return!(this===z&&a(V,e)&&!a(U,e))&&(!(t||!a(this,e)||!a(V,e)||a(this,L)&&this[L][e])||t)},J=function(e,t){if(e=x(e),t=S(t,!0),e!==z||!a(V,t)||a(U,t)){var r=T(e,t);return!r||!a(V,t)||a(e,L)&&e[L][t]||(r.enumerable=!0),r}},ee=function(e){for(var t,r=O(x(e)),n=[],i=0;r.length>i;)a(V,t=r[i++])||t==L||t==l||n.push(t);return n},te=function(e){for(var t,r=e===z,n=O(r?U:x(e)),i=[],o=0;n.length>o;)!a(V,t=n[o++])||r&&!a(z,t)||i.push(V[t]);return i};H||(s((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(r){this===z&&t.call(U,r),a(this,L)&&a(this[L],e)&&(this[L][e]=!1),K(this,e,C(1,r))};return i&&$&&K(z,e,{configurable:!0,set:t}),q(e)})[j],"toString",function(){return this._k}),k.f=J,E.f=X,r(1743).f=w.f=ee,r(6569).f=Z,D.f=te,i&&!r(4742)&&s(z,"propertyIsEnumerable",Z,!0),d.f=function(e){return q(h(e))}),o(o.G+o.W+o.F*!H,{Symbol:F});for(var re="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;re.length>ne;)h(re[ne++]);for(var ae=A(h.store),ie=0;ae.length>ie;)m(ae[ie++]);o(o.S+o.F*!H,"Symbol",{for:function(e){return a(G,e+="")?G[e]:G[e]=F(e)},keyFor:function(e){if(!Y(e))throw TypeError(e+" is not a symbol!");for(var t in G)if(G[t]===e)return t},useSetter:function(){$=!0},useSimple:function(){$=!1}}),o(o.S+o.F*!H,"Object",{create:function(e,t){return void 0===t?P(e):Q(P(e),t)},defineProperty:X,defineProperties:Q,getOwnPropertyDescriptor:J,getOwnPropertyNames:ee,getOwnPropertySymbols:te});var oe=c(function(){D.f(1)});o(o.S+o.F*oe,"Object",{getOwnPropertySymbols:function(e){return D.f(b(e))}}),I&&o(o.S+o.F*(!H||c(function(){var e=F();return"[null]"!=R([e])||"{}"!=R({a:e})||"{}"!=R(Object(e))})),"JSON",{stringify:function(e){for(var t,r,n=[e],a=1;arguments.length>a;)n.push(arguments[a++]);if(r=t=n[1],(_(t)||void 0!==e)&&!Y(e))return g(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!Y(t))return t}),n[1]=t,R.apply(I,n)}}),F[j][B]||r(2677)(F[j],B,F[j].valueOf),f(F,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},9820:(e,t)=>{t.f=Object.getOwnPropertySymbols},9829:(e,t,r)=>{e.exports={default:r(2696),__esModule:!0}},9891:function(module,exports,__webpack_require__){var factory;"undefined"!=typeof navigator&&(factory=function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(e){_useWebWorker=!!e},getWebWorker=function(){return _useWebWorker},setLocationHref=function(e){locationHref=e},getLocationHref=function(){return locationHref};function createTag(e){return document.createElement(e)}function extendPrototype(e,t){var r,n,a=e.length;for(r=0;r<a;r+=1)for(var i in n=e[r].prototype)Object.prototype.hasOwnProperty.call(n,i)&&(t.prototype[i]=n[i])}function getDescriptor(e,t){return Object.getOwnPropertyDescriptor(e,t)}function createProxyFunction(e){function t(){}return t.prototype=e,t}var audioControllerFactory=function(){function e(e){this.audios=[],this.audioFactory=e,this._volume=1,this._isMuted=!1}return e.prototype={addAudio:function(e){this.audios.push(e)},pause:function(){var e,t=this.audios.length;for(e=0;e<t;e+=1)this.audios[e].pause()},resume:function(){var e,t=this.audios.length;for(e=0;e<t;e+=1)this.audios[e].resume()},setRate:function(e){var t,r=this.audios.length;for(t=0;t<r;t+=1)this.audios[t].setRate(e)},createAudio:function(e){return this.audioFactory?this.audioFactory(e):window.Howl?new window.Howl({src:[e]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(e){this.audioFactory=e},setVolume:function(e){this._volume=e,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var e,t=this.audios.length;for(e=0;e<t;e+=1)this.audios[e].volume(this._volume*(this._isMuted?0:1))}},function(){return new e}}(),createTypedArray=function(){function e(e,t){var r,n=0,a=[];switch(e){case"int16":case"uint8c":r=1;break;default:r=1.1}for(n=0;n<t;n+=1)a.push(r);return a}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(t,r){return"float32"===t?new Float32Array(r):"int16"===t?new Int16Array(r):"uint8c"===t?new Uint8ClampedArray(r):e(t,r)}:e}();function createSizedArray(e){return Array.apply(null,{length:e})}function _typeof$6(e){return _typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$6(e)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),_shouldRoundValues=!1,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface$1(){return{}}!function(){var e,t=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],r=t.length;for(e=0;e<r;e+=1)BMMath[t[e]]=Math[t[e]]}(),BMMath.random=Math.random,BMMath.abs=function(e){if("object"===_typeof$6(e)&&e.length){var t,r=createSizedArray(e.length),n=e.length;for(t=0;t<n;t+=1)r[t]=Math.abs(e[t]);return r}return Math.abs(e)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(e){_shouldRoundValues=!!e}function bmRnd(e){return _shouldRoundValues?Math.round(e):e}function styleDiv(e){e.style.position="absolute",e.style.top=0,e.style.left=0,e.style.display="block",e.style.transformOrigin="0 0",e.style.webkitTransformOrigin="0 0",e.style.backfaceVisibility="visible",e.style.webkitBackfaceVisibility="visible",e.style.transformStyle="preserve-3d",e.style.webkitTransformStyle="preserve-3d",e.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(e,t,r,n){this.type=e,this.currentTime=t,this.totalTime=r,this.direction=n<0?-1:1}function BMCompleteEvent(e,t){this.type=e,this.direction=t<0?-1:1}function BMCompleteLoopEvent(e,t,r,n){this.type=e,this.currentLoop=r,this.totalLoops=t,this.direction=n<0?-1:1}function BMSegmentStartEvent(e,t,r){this.type=e,this.firstFrame=t,this.totalFrames=r}function BMDestroyEvent(e,t){this.type=e,this.target=t}function BMRenderFrameErrorEvent(e,t){this.type="renderFrameError",this.nativeError=e,this.currentTime=t}function BMConfigErrorEvent(e){this.type="configError",this.nativeError=e}function BMAnimationConfigErrorEvent(e,t){this.type=e,this.nativeError=t}var createElementID=(_count=0,function(){return idPrefix$1+"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(e,t,r){var n,a,i,o,s,l,c,u;switch(l=r*(1-t),c=r*(1-(s=6*e-(o=Math.floor(6*e)))*t),u=r*(1-(1-s)*t),o%6){case 0:n=r,a=u,i=l;break;case 1:n=c,a=r,i=l;break;case 2:n=l,a=r,i=u;break;case 3:n=l,a=c,i=r;break;case 4:n=u,a=l,i=r;break;case 5:n=r,a=l,i=c}return[n,a,i]}function RGBtoHSV(e,t,r){var n,a=Math.max(e,t,r),i=Math.min(e,t,r),o=a-i,s=0===a?0:o/a,l=a/255;switch(a){case i:n=0;break;case e:n=t-r+o*(t<r?6:0),n/=6*o;break;case t:n=r-e+2*o,n/=6*o;break;case r:n=e-t+4*o,n/=6*o}return[n,s,l]}function addSaturationToRGB(e,t){var r=RGBtoHSV(255*e[0],255*e[1],255*e[2]);return r[1]+=t,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(e,t){var r=RGBtoHSV(255*e[0],255*e[1],255*e[2]);return r[2]+=t,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(e,t){var r=RGBtoHSV(255*e[0],255*e[1],255*e[2]);return r[0]+=t/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var e,t,r=[];for(e=0;e<256;e+=1)t=e.toString(16),r[e]=1===t.length?"0"+t:t;return function(e,t,n){return e<0&&(e=0),t<0&&(t=0),n<0&&(n=0),"#"+r[e]+r[t]+r[n]}}(),setSubframeEnabled=function(e){subframeEnabled=!!e},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(e){expressionsPlugin=e},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(e){expressionsInterfaces=e},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(e){defaultCurveSegments=e},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(e){idPrefix$1=e},getIdPrefix=function(){return idPrefix$1};function createNS(e){return document.createElementNS(svgNS,e)}function _typeof$5(e){return _typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$5(e)}var dataManager=function(){var e,t,r=1,n=[],a={onmessage:function(){},postMessage:function(t){e({data:t})}},i={postMessage:function(e){a.onmessage({data:e})}};function o(){t||(t=function(t){if(window.Worker&&window.Blob&&getWebWorker()){var r=new Blob(["var _workerSelf = self; self.onmessage = ",t.toString()],{type:"text/javascript"}),n=URL.createObjectURL(r);return new Worker(n)}return e=t,a}(function(e){if(i.dataManager||(i.dataManager=function(){function e(a,i){var o,s,l,c,u,p,h=a.length;for(s=0;s<h;s+=1)if("ks"in(o=a[s])&&!o.completed){if(o.completed=!0,o.hasMask){var d=o.masksProperties;for(c=d.length,l=0;l<c;l+=1)if(d[l].pt.k.i)n(d[l].pt.k);else for(p=d[l].pt.k.length,u=0;u<p;u+=1)d[l].pt.k[u].s&&n(d[l].pt.k[u].s[0]),d[l].pt.k[u].e&&n(d[l].pt.k[u].e[0])}0===o.ty?(o.layers=t(o.refId,i),e(o.layers,i)):4===o.ty?r(o.shapes):5===o.ty&&f(o)}}function t(e,t){var r=function(e,t){for(var r=0,n=t.length;r<n;){if(t[r].id===e)return t[r];r+=1}return null}(e,t);return r?r.layers.__used?JSON.parse(JSON.stringify(r.layers)):(r.layers.__used=!0,r.layers):null}function r(e){var t,a,i;for(t=e.length-1;t>=0;t-=1)if("sh"===e[t].ty)if(e[t].ks.k.i)n(e[t].ks.k);else for(i=e[t].ks.k.length,a=0;a<i;a+=1)e[t].ks.k[a].s&&n(e[t].ks.k[a].s[0]),e[t].ks.k[a].e&&n(e[t].ks.k[a].e[0]);else"gr"===e[t].ty&&r(e[t].it)}function n(e){var t,r=e.i.length;for(t=0;t<r;t+=1)e.i[t][0]+=e.v[t][0],e.i[t][1]+=e.v[t][1],e.o[t][0]+=e.v[t][0],e.o[t][1]+=e.v[t][1]}function a(e,t){var r=t?t.split("."):[100,100,100];return e[0]>r[0]||!(r[0]>e[0])&&(e[1]>r[1]||!(r[1]>e[1])&&(e[2]>r[2]||!(r[2]>e[2])&&null))}var i,o=function(){var e=[4,4,14];function t(e){var t=e.t.d;e.t.d={k:[{s:t,t:0}]}}function r(e){var r,n=e.length;for(r=0;r<n;r+=1)5===e[r].ty&&t(e[r])}return function(t){if(a(e,t.v)&&(r(t.layers),t.assets)){var n,i=t.assets.length;for(n=0;n<i;n+=1)t.assets[n].layers&&r(t.assets[n].layers)}}}(),s=(i=[4,7,99],function(e){if(e.chars&&!a(i,e.v)){var t,n=e.chars.length;for(t=0;t<n;t+=1){var o=e.chars[t];o.data&&o.data.shapes&&(r(o.data.shapes),o.data.ip=0,o.data.op=99999,o.data.st=0,o.data.sr=1,o.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},e.chars[t].t||(o.data.shapes.push({ty:"no"}),o.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}),l=function(){var e=[5,7,15];function t(e){var t=e.t.p;"number"==typeof t.a&&(t.a={a:0,k:t.a}),"number"==typeof t.p&&(t.p={a:0,k:t.p}),"number"==typeof t.r&&(t.r={a:0,k:t.r})}function r(e){var r,n=e.length;for(r=0;r<n;r+=1)5===e[r].ty&&t(e[r])}return function(t){if(a(e,t.v)&&(r(t.layers),t.assets)){var n,i=t.assets.length;for(n=0;n<i;n+=1)t.assets[n].layers&&r(t.assets[n].layers)}}}(),c=function(){var e=[4,1,9];function t(e){var r,n,a,i=e.length;for(r=0;r<i;r+=1)if("gr"===e[r].ty)t(e[r].it);else if("fl"===e[r].ty||"st"===e[r].ty)if(e[r].c.k&&e[r].c.k[0].i)for(a=e[r].c.k.length,n=0;n<a;n+=1)e[r].c.k[n].s&&(e[r].c.k[n].s[0]/=255,e[r].c.k[n].s[1]/=255,e[r].c.k[n].s[2]/=255,e[r].c.k[n].s[3]/=255),e[r].c.k[n].e&&(e[r].c.k[n].e[0]/=255,e[r].c.k[n].e[1]/=255,e[r].c.k[n].e[2]/=255,e[r].c.k[n].e[3]/=255);else e[r].c.k[0]/=255,e[r].c.k[1]/=255,e[r].c.k[2]/=255,e[r].c.k[3]/=255}function r(e){var r,n=e.length;for(r=0;r<n;r+=1)4===e[r].ty&&t(e[r].shapes)}return function(t){if(a(e,t.v)&&(r(t.layers),t.assets)){var n,i=t.assets.length;for(n=0;n<i;n+=1)t.assets[n].layers&&r(t.assets[n].layers)}}}(),u=function(){var e=[4,4,18];function t(e){var r,n,a;for(r=e.length-1;r>=0;r-=1)if("sh"===e[r].ty)if(e[r].ks.k.i)e[r].ks.k.c=e[r].closed;else for(a=e[r].ks.k.length,n=0;n<a;n+=1)e[r].ks.k[n].s&&(e[r].ks.k[n].s[0].c=e[r].closed),e[r].ks.k[n].e&&(e[r].ks.k[n].e[0].c=e[r].closed);else"gr"===e[r].ty&&t(e[r].it)}function r(e){var r,n,a,i,o,s,l=e.length;for(n=0;n<l;n+=1){if((r=e[n]).hasMask){var c=r.masksProperties;for(i=c.length,a=0;a<i;a+=1)if(c[a].pt.k.i)c[a].pt.k.c=c[a].cl;else for(s=c[a].pt.k.length,o=0;o<s;o+=1)c[a].pt.k[o].s&&(c[a].pt.k[o].s[0].c=c[a].cl),c[a].pt.k[o].e&&(c[a].pt.k[o].e[0].c=c[a].cl)}4===r.ty&&t(r.shapes)}}return function(t){if(a(e,t.v)&&(r(t.layers),t.assets)){var n,i=t.assets.length;for(n=0;n<i;n+=1)t.assets[n].layers&&r(t.assets[n].layers)}}}();function f(e){0===e.t.a.length&&e.t.p}var p={completeData:function(r){r.__complete||(c(r),o(r),s(r),l(r),u(r),e(r.layers,r.assets),function(r,n){if(r){var a=0,i=r.length;for(a=0;a<i;a+=1)1===r[a].t&&(r[a].data.layers=t(r[a].data.refId,n),e(r[a].data.layers,n))}}(r.chars,r.assets),r.__complete=!0)}};return p.checkColors=c,p.checkChars=s,p.checkPathProperties=l,p.checkShapes=u,p.completeLayers=e,p}()),i.assetLoader||(i.assetLoader=function(){function e(e){var t=e.getResponseHeader("content-type");return t&&"json"===e.responseType&&-1!==t.indexOf("json")||e.response&&"object"===_typeof$5(e.response)?e.response:e.response&&"string"==typeof e.response?JSON.parse(e.response):e.responseText?JSON.parse(e.responseText):null}return{load:function(t,r,n,a){var i,o=new XMLHttpRequest;try{o.responseType="json"}catch(e){}o.onreadystatechange=function(){if(4===o.readyState)if(200===o.status)i=e(o),n(i);else try{i=e(o),n(i)}catch(e){a&&a(e)}};try{o.open(["G","E","T"].join(""),t,!0)}catch(e){o.open(["G","E","T"].join(""),r+"/"+t,!0)}o.send()}}}()),"loadAnimation"===e.data.type)i.assetLoader.load(e.data.path,e.data.fullPath,function(t){i.dataManager.completeData(t),i.postMessage({id:e.data.id,payload:t,status:"success"})},function(){i.postMessage({id:e.data.id,status:"error"})});else if("complete"===e.data.type){var t=e.data.animation;i.dataManager.completeData(t),i.postMessage({id:e.data.id,payload:t,status:"success"})}else"loadData"===e.data.type&&i.assetLoader.load(e.data.path,e.data.fullPath,function(t){i.postMessage({id:e.data.id,payload:t,status:"success"})},function(){i.postMessage({id:e.data.id,status:"error"})})}),t.onmessage=function(e){var t=e.data,r=t.id,a=n[r];n[r]=null,"success"===t.status?a.onComplete(t.payload):a.onError&&a.onError()})}function s(e,t){var a="processId_"+(r+=1);return n[a]={onComplete:e,onError:t},a}return{loadAnimation:function(e,r,n){o();var a=s(r,n);t.postMessage({type:"loadAnimation",path:e,fullPath:window.location.origin+window.location.pathname,id:a})},loadData:function(e,r,n){o();var a=s(r,n);t.postMessage({type:"loadData",path:e,fullPath:window.location.origin+window.location.pathname,id:a})},completeAnimation:function(e,r,n){o();var a=s(r,n);t.postMessage({type:"complete",animation:e,id:a})}}}(),ImagePreloader=function(){var e=function(){var e=createTag("canvas");e.width=1,e.height=1;var t=e.getContext("2d");return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),e}();function t(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function n(e,t,r){var n="";if(e.e)n=e.p;else if(t){var a=e.p;-1!==a.indexOf("images/")&&(a=a.split("/")[1]),n=t+a}else n=r,n+=e.u?e.u:"",n+=e.p;return n}function a(e){var t=0,r=setInterval(function(){(e.getBBox().width||t>500)&&(this._imageLoaded(),clearInterval(r)),t+=1}.bind(this),50)}function i(e){var t={assetData:e},r=n(e,this.assetsPath,this.path);return dataManager.loadData(r,function(e){t.img=e,this._footageLoaded()}.bind(this),function(){t.img={},this._footageLoaded()}.bind(this)),t}function o(){this._imageLoaded=t.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=a.bind(this),this.createFootageData=i.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return o.prototype={loadAssets:function(e,t){var r;this.imagesLoadedCb=t;var n=e.length;for(r=0;r<n;r+=1)e[r].layers||(e[r].t&&"seq"!==e[r].t?3===e[r].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(e[r]))):(this.totalImages+=1,this.images.push(this._createImageData(e[r]))))},setAssetsPath:function(e){this.assetsPath=e||""},setPath:function(e){this.path=e||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(e){for(var t=0,r=this.images.length;t<r;){if(this.images[t].assetData===e)return this.images[t].img;t+=1}return null},createImgData:function(t){var r=n(t,this.assetsPath,this.path),a=createTag("img");a.crossOrigin="anonymous",a.addEventListener("load",this._imageLoaded,!1),a.addEventListener("error",function(){i.img=e,this._imageLoaded()}.bind(this),!1),a.src=r;var i={img:a,assetData:t};return i},createImageData:function(t){var r=n(t,this.assetsPath,this.path),a=createNS("image");isSafari?this.testImageLoaded(a):a.addEventListener("load",this._imageLoaded,!1),a.addEventListener("error",function(){i.img=e,this._imageLoaded()}.bind(this),!1),a.setAttributeNS("http://www.w3.org/1999/xlink","href",r),this._elementHelper.append?this._elementHelper.append(a):this._elementHelper.appendChild(a);var i={img:a,assetData:t};return i},imageLoaded:t,footageLoaded:r,setCacheType:function(e,t){"svg"===e?(this._elementHelper=t,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},o}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(e,t){if(this._cbs[e])for(var r=this._cbs[e],n=0;n<r.length;n+=1)r[n](t)},addEventListener:function(e,t){return this._cbs[e]||(this._cbs[e]=[]),this._cbs[e].push(t),function(){this.removeEventListener(e,t)}.bind(this)},removeEventListener:function(e,t){if(t){if(this._cbs[e]){for(var r=0,n=this._cbs[e].length;r<n;)this._cbs[e][r]===t&&(this._cbs[e].splice(r,1),r-=1,n-=1),r+=1;this._cbs[e].length||(this._cbs[e]=null)}}else this._cbs[e]=null}};var markerParser=function(){function e(e){for(var t,r=e.split("\r\n"),n={},a=0,i=0;i<r.length;i+=1)2===(t=r[i].split(":")).length&&(n[t[0]]=t[1].trim(),a+=1);if(0===a)throw new Error;return n}return function(t){for(var r=[],n=0;n<t.length;n+=1){var a=t[n],i={time:a.tm,duration:a.dr};try{i.payload=JSON.parse(t[n].cm)}catch(r){try{i.payload=e(t[n].cm)}catch(e){i.payload={name:t[n].cm}}}r.push(i)}return r}}(),ProjectInterface=function(){function e(e){this.compositions.push(e)}return function(){function t(e){for(var t=0,r=this.compositions.length;t<r;){if(this.compositions[t].data&&this.compositions[t].data.nm===e)return this.compositions[t].prepareFrame&&this.compositions[t].data.xt&&this.compositions[t].prepareFrame(this.currentFrame),this.compositions[t].compInterface;t+=1}return null}return t.compositions=[],t.currentFrame=0,t.registerComposition=e,t}}(),renderers={},registerRenderer=function(e,t){renderers[e]=t};function getRenderer(e){return renderers[e]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var e in renderers)if(renderers[e])return e;return""}function _typeof$4(e){return _typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$4(e)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(e){(e.wrapper||e.container)&&(this.wrapper=e.wrapper||e.container);var t="svg";e.animType?t=e.animType:e.renderer&&(t=e.renderer);var r=getRenderer(t);this.renderer=new r(this,e.rendererSettings),this.imagePreloader.setCacheType(t,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=t,""===e.loop||null===e.loop||void 0===e.loop||!0===e.loop?this.loop=!0:!1===e.loop?this.loop=!1:this.loop=parseInt(e.loop,10),this.autoplay=!("autoplay"in e)||e.autoplay,this.name=e.name?e.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(e,"autoloadSegments")||e.autoloadSegments,this.assetsPath=e.assetsPath,this.initialSegment=e.initialSegment,e.audioFactory&&this.audioController.setAudioFactory(e.audioFactory),e.animationData?this.setupAnimation(e.animationData):e.path&&(-1!==e.path.lastIndexOf("\\")?this.path=e.path.substr(0,e.path.lastIndexOf("\\")+1):this.path=e.path.substr(0,e.path.lastIndexOf("/")+1),this.fileName=e.path.substr(e.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(e.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(e){dataManager.completeAnimation(e,this.configAnimation)},AnimationItem.prototype.setData=function(e,t){t&&"object"!==_typeof$4(t)&&(t=JSON.parse(t));var r={wrapper:e,animationData:t},n=e.attributes;r.path=n.getNamedItem("data-animation-path")?n.getNamedItem("data-animation-path").value:n.getNamedItem("data-bm-path")?n.getNamedItem("data-bm-path").value:n.getNamedItem("bm-path")?n.getNamedItem("bm-path").value:"",r.animType=n.getNamedItem("data-anim-type")?n.getNamedItem("data-anim-type").value:n.getNamedItem("data-bm-type")?n.getNamedItem("data-bm-type").value:n.getNamedItem("bm-type")?n.getNamedItem("bm-type").value:n.getNamedItem("data-bm-renderer")?n.getNamedItem("data-bm-renderer").value:n.getNamedItem("bm-renderer")?n.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var a=n.getNamedItem("data-anim-loop")?n.getNamedItem("data-anim-loop").value:n.getNamedItem("data-bm-loop")?n.getNamedItem("data-bm-loop").value:n.getNamedItem("bm-loop")?n.getNamedItem("bm-loop").value:"";"false"===a?r.loop=!1:"true"===a?r.loop=!0:""!==a&&(r.loop=parseInt(a,10));var i=n.getNamedItem("data-anim-autoplay")?n.getNamedItem("data-anim-autoplay").value:n.getNamedItem("data-bm-autoplay")?n.getNamedItem("data-bm-autoplay").value:!n.getNamedItem("bm-autoplay")||n.getNamedItem("bm-autoplay").value;r.autoplay="false"!==i,r.name=n.getNamedItem("data-name")?n.getNamedItem("data-name").value:n.getNamedItem("data-bm-name")?n.getNamedItem("data-bm-name").value:n.getNamedItem("bm-name")?n.getNamedItem("bm-name").value:"","false"===(n.getNamedItem("data-anim-prerender")?n.getNamedItem("data-anim-prerender").value:n.getNamedItem("data-bm-prerender")?n.getNamedItem("data-bm-prerender").value:n.getNamedItem("bm-prerender")?n.getNamedItem("bm-prerender").value:"")&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(e){e.op>this.animationData.op&&(this.animationData.op=e.op,this.totalFrames=Math.floor(e.op-this.animationData.ip));var t,r,n=this.animationData.layers,a=n.length,i=e.layers,o=i.length;for(r=0;r<o;r+=1)for(t=0;t<a;){if(n[t].id===i[r].id){n[t]=i[r];break}t+=1}if((e.chars||e.fonts)&&(this.renderer.globalData.fontManager.addChars(e.chars),this.renderer.globalData.fontManager.addFonts(e.fonts,this.renderer.globalData.defs)),e.assets)for(a=e.assets.length,t=0;t<a;t+=1)this.animationData.assets.push(e.assets[t]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(e){this.animationData=e;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var e=this.animationData.segments;if(!e||0===e.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var t=e.shift();this.timeCompleted=t.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(e){if(this.renderer)try{this.animationData=e,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(e),e.assets||(e.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(e.assets),this.markers=markerParser(e.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(e){this.triggerConfigError(e)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(e,t){var r="number"==typeof e?e:void 0,n="number"==typeof t?t:void 0;this.renderer.updateContainerSize(r,n)},AnimationItem.prototype.setSubframe=function(e){this.isSubframeEnabled=!!e},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(e){this.triggerRenderFrameError(e)}},AnimationItem.prototype.play=function(e){e&&this.name!==e||!0===this.isPaused&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(e){e&&this.name!==e||!1===this.isPaused&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(e){e&&this.name!==e||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(e){e&&this.name!==e||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(e){for(var t,r=0;r<this.markers.length;r+=1)if((t=this.markers[r]).payload&&t.payload.name===e)return t;return null},AnimationItem.prototype.goToAndStop=function(e,t,r){if(!r||this.name===r){var n=Number(e);if(isNaN(n)){var a=this.getMarkerData(e);a&&this.goToAndStop(a.time,!0)}else t?this.setCurrentRawFrameValue(e):this.setCurrentRawFrameValue(e*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(e,t,r){if(!r||this.name===r){var n=Number(e);if(isNaN(n)){var a=this.getMarkerData(e);a&&(a.duration?this.playSegments([a.time,a.time+a.duration],!0):this.goToAndStop(a.time,!0))}else this.goToAndStop(n,t,r);this.play()}},AnimationItem.prototype.advanceTime=function(e){if(!0!==this.isPaused&&!1!==this.isLoaded){var t=this.currentRawFrame+e*this.frameModifier,r=!1;t>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?t>=this.totalFrames?(this.playCount+=1,this.checkSegments(t%this.totalFrames)||(this.setCurrentRawFrameValue(t%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(t):this.checkSegments(t>this.totalFrames?t%this.totalFrames:0)||(r=!0,t=this.totalFrames-1):t<0?this.checkSegments(t%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(r=!0,t=0):(this.setCurrentRawFrameValue(this.totalFrames+t%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(t),r&&(this.setCurrentRawFrameValue(t),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(e,t){this.playCount=0,e[1]<e[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=e[0]-e[1],this.timeCompleted=this.totalFrames,this.firstFrame=e[1],this.setCurrentRawFrameValue(this.totalFrames-.001-t)):e[1]>e[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=e[1]-e[0],this.timeCompleted=this.totalFrames,this.firstFrame=e[0],this.setCurrentRawFrameValue(.001+t)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(e,t){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<e?r=e:this.currentRawFrame+this.firstFrame>t&&(r=t-e)),this.firstFrame=e,this.totalFrames=t-e,this.timeCompleted=this.totalFrames,-1!==r&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(e,t){if(t&&(this.segments.length=0),"object"===_typeof$4(e[0])){var r,n=e.length;for(r=0;r<n;r+=1)this.segments.push(e[r])}else this.segments.push(e);this.segments.length&&t&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(e){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),e&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(e){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),e),!0)},AnimationItem.prototype.destroy=function(e){e&&this.name!==e||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(e){this.currentRawFrame=e,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(e){this.playSpeed=e,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(e){this.playDirection=e<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(e){this.loop=e},AnimationItem.prototype.setVolume=function(e,t){t&&this.name!==t||this.audioController.setVolume(e)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(e){e&&this.name!==e||this.audioController.mute()},AnimationItem.prototype.unmute=function(e){e&&this.name!==e||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(e){var t="";if(e.e)t=e.p;else if(this.assetsPath){var r=e.p;-1!==r.indexOf("images/")&&(r=r.split("/")[1]),t=this.assetsPath+r}else t=this.path,t+=e.u?e.u:"",t+=e.p;return t},AnimationItem.prototype.getAssetData=function(e){for(var t=0,r=this.assets.length;t<r;){if(e===this.assets[t].id)return this.assets[t];t+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(e){return e?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(e,t,r){try{this.renderer.getElementByPath(e).updateDocumentData(t,r)}catch(e){}},AnimationItem.prototype.trigger=function(e){if(this._cbs&&this._cbs[e])switch(e){case"enterFrame":this.triggerEvent(e,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(e,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(e,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(e,new BMCompleteEvent(e,this.frameMult));break;case"segmentStart":this.triggerEvent(e,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(e,new BMDestroyEvent(e,this));break;default:this.triggerEvent(e)}"enterFrame"===e&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===e&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult)),"complete"===e&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(e,this.frameMult)),"segmentStart"===e&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames)),"destroy"===e&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(e,this))},AnimationItem.prototype.triggerRenderFrameError=function(e){var t=new BMRenderFrameErrorEvent(e,this.currentFrame);this.triggerEvent("error",t),this.onError&&this.onError.call(this,t)},AnimationItem.prototype.triggerConfigError=function(e){var t=new BMConfigErrorEvent(e,this.currentFrame);this.triggerEvent("error",t),this.onError&&this.onError.call(this,t)};var animationManager=function(){var e={},t=[],r=0,n=0,a=0,i=!0,o=!1;function s(e){for(var r=0,a=e.target;r<n;)t[r].animation===a&&(t.splice(r,1),r-=1,n-=1,a.isPaused||u()),r+=1}function l(e,r){if(!e)return null;for(var a=0;a<n;){if(t[a].elem===e&&null!==t[a].elem)return t[a].animation;a+=1}var i=new AnimationItem;return f(i,e),i.setData(e,r),i}function c(){a+=1,d()}function u(){a-=1}function f(e,r){e.addEventListener("destroy",s),e.addEventListener("_active",c),e.addEventListener("_idle",u),t.push({elem:r,animation:e}),n+=1}function p(e){var s,l=e-r;for(s=0;s<n;s+=1)t[s].animation.advanceTime(l);r=e,a&&!o?window.requestAnimationFrame(p):i=!0}function h(e){r=e,window.requestAnimationFrame(p)}function d(){!o&&a&&i&&(window.requestAnimationFrame(h),i=!1)}return e.registerAnimation=l,e.loadAnimation=function(e){var t=new AnimationItem;return f(t,null),t.setParams(e),t},e.setSpeed=function(e,r){var a;for(a=0;a<n;a+=1)t[a].animation.setSpeed(e,r)},e.setDirection=function(e,r){var a;for(a=0;a<n;a+=1)t[a].animation.setDirection(e,r)},e.play=function(e){var r;for(r=0;r<n;r+=1)t[r].animation.play(e)},e.pause=function(e){var r;for(r=0;r<n;r+=1)t[r].animation.pause(e)},e.stop=function(e){var r;for(r=0;r<n;r+=1)t[r].animation.stop(e)},e.togglePause=function(e){var r;for(r=0;r<n;r+=1)t[r].animation.togglePause(e)},e.searchAnimations=function(e,t,r){var n,a=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),i=a.length;for(n=0;n<i;n+=1)r&&a[n].setAttribute("data-bm-type",r),l(a[n],e);if(t&&0===i){r||(r="svg");var o=document.getElementsByTagName("body")[0];o.innerText="";var s=createTag("div");s.style.width="100%",s.style.height="100%",s.setAttribute("data-bm-type",r),o.appendChild(s),l(s,e)}},e.resize=function(){var e;for(e=0;e<n;e+=1)t[e].animation.resize()},e.goToAndStop=function(e,r,a){var i;for(i=0;i<n;i+=1)t[i].animation.goToAndStop(e,r,a)},e.destroy=function(e){var r;for(r=n-1;r>=0;r-=1)t[r].animation.destroy(e)},e.freeze=function(){o=!0},e.unfreeze=function(){o=!1,d()},e.setVolume=function(e,r){var a;for(a=0;a<n;a+=1)t[a].animation.setVolume(e,r)},e.mute=function(e){var r;for(r=0;r<n;r+=1)t[r].animation.mute(e)},e.unmute=function(e){var r;for(r=0;r<n;r+=1)t[r].animation.unmute(e)},e.getRegisteredAnimations=function(){var e,r=t.length,n=[];for(e=0;e<r;e+=1)n.push(t[e].animation);return n},e}(),BezierFactory=function(){var e={getBezierEasing:function(e,r,n,a,i){var o=i||("bez_"+e+"_"+r+"_"+n+"_"+a).replace(/\./g,"p");if(t[o])return t[o];var s=new u([e,r,n,a]);return t[o]=s,s}},t={},r=11,n=1/(r-1),a="function"==typeof Float32Array;function i(e,t){return 1-3*t+3*e}function o(e,t){return 3*t-6*e}function s(e){return 3*e}function l(e,t,r){return((i(t,r)*e+o(t,r))*e+s(t))*e}function c(e,t,r){return 3*i(t,r)*e*e+2*o(t,r)*e+s(t)}function u(e){this._p=e,this._mSampleValues=a?new Float32Array(r):new Array(r),this._precomputed=!1,this.get=this.get.bind(this)}return u.prototype={get:function(e){var t=this._p[0],r=this._p[1],n=this._p[2],a=this._p[3];return this._precomputed||this._precompute(),t===r&&n===a?e:0===e?0:1===e?1:l(this._getTForX(e),r,a)},_precompute:function(){var e=this._p[0],t=this._p[1],r=this._p[2],n=this._p[3];this._precomputed=!0,e===t&&r===n||this._calcSampleValues()},_calcSampleValues:function(){for(var e=this._p[0],t=this._p[2],a=0;a<r;++a)this._mSampleValues[a]=l(a*n,e,t)},_getTForX:function(e){for(var t=this._p[0],a=this._p[2],i=this._mSampleValues,o=0,s=1,u=r-1;s!==u&&i[s]<=e;++s)o+=n;var f=o+(e-i[--s])/(i[s+1]-i[s])*n,p=c(f,t,a);return p>=.001?function(e,t,r,n){for(var a=0;a<4;++a){var i=c(t,r,n);if(0===i)return t;t-=(l(t,r,n)-e)/i}return t}(e,f,t,a):0===p?f:function(e,t,r,n,a){var i,o,s=0;do{(i=l(o=t+(r-t)/2,n,a)-e)>0?r=o:t=o}while(Math.abs(i)>1e-7&&++s<10);return o}(e,o,o+n,t,a)}},e}(),pooling={double:function(e){return e.concat(createSizedArray(e.length))}},poolFactory=function(e,t,r){var n=0,a=e,i=createSizedArray(a);return{newElement:function(){return n?i[n-=1]:t()},release:function(e){n===a&&(i=pooling.double(i),a*=2),r&&r(e),i[n]=e,n+=1}}},bezierLengthPool=poolFactory(8,function(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}),segmentsLengthPool=poolFactory(8,function(){return{lengths:[],totalLength:0}},function(e){var t,r=e.lengths.length;for(t=0;t<r;t+=1)bezierLengthPool.release(e.lengths[t]);e.lengths.length=0});function bezFunction(){var e=Math;function t(e,t,r,n,a,i){var o=e*n+t*a+r*i-a*n-i*e-r*t;return o>-.001&&o<.001}var r=function(e,t,r,n){var a,i,o,s,l,c,u=getDefaultCurveSegments(),f=0,p=[],h=[],d=bezierLengthPool.newElement();for(o=r.length,a=0;a<u;a+=1){for(l=a/(u-1),c=0,i=0;i<o;i+=1)s=bmPow(1-l,3)*e[i]+3*bmPow(1-l,2)*l*r[i]+3*(1-l)*bmPow(l,2)*n[i]+bmPow(l,3)*t[i],p[i]=s,null!==h[i]&&(c+=bmPow(p[i]-h[i],2)),h[i]=p[i];c&&(f+=c=bmSqrt(c)),d.percents[a]=l,d.lengths[a]=f}return d.addedLength=f,d};function n(e){this.segmentLength=0,this.points=new Array(e)}function a(e,t){this.partialLength=e,this.point=t}var i,o=(i={},function(e,r,o,s){var l=(e[0]+"_"+e[1]+"_"+r[0]+"_"+r[1]+"_"+o[0]+"_"+o[1]+"_"+s[0]+"_"+s[1]).replace(/\./g,"p");if(!i[l]){var c,u,f,p,h,d,m,y=getDefaultCurveSegments(),g=0,v=null;2===e.length&&(e[0]!==r[0]||e[1]!==r[1])&&t(e[0],e[1],r[0],r[1],e[0]+o[0],e[1]+o[1])&&t(e[0],e[1],r[0],r[1],r[0]+s[0],r[1]+s[1])&&(y=2);var _=new n(y);for(f=o.length,c=0;c<y;c+=1){for(m=createSizedArray(f),h=c/(y-1),d=0,u=0;u<f;u+=1)p=bmPow(1-h,3)*e[u]+3*bmPow(1-h,2)*h*(e[u]+o[u])+3*(1-h)*bmPow(h,2)*(r[u]+s[u])+bmPow(h,3)*r[u],m[u]=p,null!==v&&(d+=bmPow(m[u]-v[u],2));g+=d=bmSqrt(d),_.points[c]=new a(d,m),v=m}_.segmentLength=g,i[l]=_}return i[l]});function s(e,t){var r=t.percents,n=t.lengths,a=r.length,i=bmFloor((a-1)*e),o=e*t.addedLength,s=0;if(i===a-1||0===i||o===n[i])return r[i];for(var l=n[i]>o?-1:1,c=!0;c;)if(n[i]<=o&&n[i+1]>o?(s=(o-n[i])/(n[i+1]-n[i]),c=!1):i+=l,i<0||i>=a-1){if(i===a-1)return r[i];c=!1}return r[i]+(r[i+1]-r[i])*s}var l=createTypedArray("float32",8);return{getSegmentsLength:function(e){var t,n=segmentsLengthPool.newElement(),a=e.c,i=e.v,o=e.o,s=e.i,l=e._length,c=n.lengths,u=0;for(t=0;t<l-1;t+=1)c[t]=r(i[t],i[t+1],o[t],s[t+1]),u+=c[t].addedLength;return a&&l&&(c[t]=r(i[t],i[0],o[t],s[0]),u+=c[t].addedLength),n.totalLength=u,n},getNewSegment:function(t,r,n,a,i,o,c){i<0?i=0:i>1&&(i=1);var u,f=s(i,c),p=s(o=o>1?1:o,c),h=t.length,d=1-f,m=1-p,y=d*d*d,g=f*d*d*3,v=f*f*d*3,_=f*f*f,b=d*d*m,x=f*d*m+d*f*m+d*d*p,S=f*f*m+d*f*p+f*d*p,C=f*f*p,P=d*m*m,w=f*m*m+d*p*m+d*m*p,k=f*p*m+d*p*p+f*m*p,D=f*p*p,E=m*m*m,A=p*m*m+m*p*m+m*m*p,T=p*p*m+m*p*p+p*m*p,M=p*p*p;for(u=0;u<h;u+=1)l[4*u]=e.round(1e3*(y*t[u]+g*n[u]+v*a[u]+_*r[u]))/1e3,l[4*u+1]=e.round(1e3*(b*t[u]+x*n[u]+S*a[u]+C*r[u]))/1e3,l[4*u+2]=e.round(1e3*(P*t[u]+w*n[u]+k*a[u]+D*r[u]))/1e3,l[4*u+3]=e.round(1e3*(E*t[u]+A*n[u]+T*a[u]+M*r[u]))/1e3;return l},getPointInSegment:function(t,r,n,a,i,o){var l=s(i,o),c=1-l;return[e.round(1e3*(c*c*c*t[0]+(l*c*c+c*l*c+c*c*l)*n[0]+(l*l*c+c*l*l+l*c*l)*a[0]+l*l*l*r[0]))/1e3,e.round(1e3*(c*c*c*t[1]+(l*c*c+c*l*c+c*c*l)*n[1]+(l*l*c+c*l*l+l*c*l)*a[1]+l*l*l*r[1]))/1e3]},buildBezierData:o,pointOnLine2D:t,pointOnLine3D:function(r,n,a,i,o,s,l,c,u){if(0===a&&0===s&&0===u)return t(r,n,i,o,l,c);var f,p=e.sqrt(e.pow(i-r,2)+e.pow(o-n,2)+e.pow(s-a,2)),h=e.sqrt(e.pow(l-r,2)+e.pow(c-n,2)+e.pow(u-a,2)),d=e.sqrt(e.pow(l-i,2)+e.pow(c-o,2)+e.pow(u-s,2));return(f=p>h?p>d?p-h-d:d-h-p:d>h?d-h-p:h-p-d)>-1e-4&&f<1e-4}}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(e,t){var r,n=this.offsetTime;"multidimensional"===this.propType&&(r=createTypedArray("float32",this.pv.length));for(var a,i,o,s,l,c,u,f,p,h=t.lastIndex,d=h,m=this.keyframes.length-1,y=!0;y;){if(a=this.keyframes[d],i=this.keyframes[d+1],d===m-1&&e>=i.t-n){a.h&&(a=i),h=0;break}if(i.t-n>e){h=d;break}d<m-1?d+=1:(h=0,y=!1)}o=this.keyframesMetadata[d]||{};var g,v=i.t-n,_=a.t-n;if(a.to){o.bezierData||(o.bezierData=bez.buildBezierData(a.s,i.s||a.e,a.to,a.ti));var b=o.bezierData;if(e>=v||e<_){var x=e>=v?b.points.length-1:0;for(l=b.points[x].point.length,s=0;s<l;s+=1)r[s]=b.points[x].point[s]}else{o.__fnct?p=o.__fnct:(p=BezierFactory.getBezierEasing(a.o.x,a.o.y,a.i.x,a.i.y,a.n).get,o.__fnct=p),c=p((e-_)/(v-_));var S,C=b.segmentLength*c,P=t.lastFrame<e&&t._lastKeyframeIndex===d?t._lastAddedLength:0;for(f=t.lastFrame<e&&t._lastKeyframeIndex===d?t._lastPoint:0,y=!0,u=b.points.length;y;){if(P+=b.points[f].partialLength,0===C||0===c||f===b.points.length-1){for(l=b.points[f].point.length,s=0;s<l;s+=1)r[s]=b.points[f].point[s];break}if(C>=P&&C<P+b.points[f+1].partialLength){for(S=(C-P)/b.points[f+1].partialLength,l=b.points[f].point.length,s=0;s<l;s+=1)r[s]=b.points[f].point[s]+(b.points[f+1].point[s]-b.points[f].point[s])*S;break}f<u-1?f+=1:y=!1}t._lastPoint=f,t._lastAddedLength=P-b.points[f].partialLength,t._lastKeyframeIndex=d}}else{var w,k,D,E,A;if(m=a.s.length,g=i.s||a.e,this.sh&&1!==a.h)e>=v?(r[0]=g[0],r[1]=g[1],r[2]=g[2]):e<=_?(r[0]=a.s[0],r[1]=a.s[1],r[2]=a.s[2]):quaternionToEuler(r,slerp(createQuaternion(a.s),createQuaternion(g),(e-_)/(v-_)));else for(d=0;d<m;d+=1)1!==a.h&&(e>=v?c=1:e<_?c=0:(a.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[d]?p=o.__fnct[d]:(w=void 0===a.o.x[d]?a.o.x[0]:a.o.x[d],k=void 0===a.o.y[d]?a.o.y[0]:a.o.y[d],D=void 0===a.i.x[d]?a.i.x[0]:a.i.x[d],E=void 0===a.i.y[d]?a.i.y[0]:a.i.y[d],p=BezierFactory.getBezierEasing(w,k,D,E).get,o.__fnct[d]=p)):o.__fnct?p=o.__fnct:(w=a.o.x,k=a.o.y,D=a.i.x,E=a.i.y,p=BezierFactory.getBezierEasing(w,k,D,E).get,a.keyframeMetadata=p),c=p((e-_)/(v-_)))),g=i.s||a.e,A=1===a.h?a.s[d]:a.s[d]+(g[d]-a.s[d])*c,"multidimensional"===this.propType?r[d]=A:r=A}return t.lastIndex=h,r}function slerp(e,t,r){var n,a,i,o,s,l=[],c=e[0],u=e[1],f=e[2],p=e[3],h=t[0],d=t[1],m=t[2],y=t[3];return(a=c*h+u*d+f*m+p*y)<0&&(a=-a,h=-h,d=-d,m=-m,y=-y),1-a>1e-6?(n=Math.acos(a),i=Math.sin(n),o=Math.sin((1-r)*n)/i,s=Math.sin(r*n)/i):(o=1-r,s=r),l[0]=o*c+s*h,l[1]=o*u+s*d,l[2]=o*f+s*m,l[3]=o*p+s*y,l}function quaternionToEuler(e,t){var r=t[0],n=t[1],a=t[2],i=t[3],o=Math.atan2(2*n*i-2*r*a,1-2*n*n-2*a*a),s=Math.asin(2*r*n+2*a*i),l=Math.atan2(2*r*i-2*n*a,1-2*r*r-2*a*a);e[0]=o/degToRads,e[1]=s/degToRads,e[2]=l/degToRads}function createQuaternion(e){var t=e[0]*degToRads,r=e[1]*degToRads,n=e[2]*degToRads,a=Math.cos(t/2),i=Math.cos(r/2),o=Math.cos(n/2),s=Math.sin(t/2),l=Math.sin(r/2),c=Math.sin(n/2);return[s*l*o+a*i*c,s*i*o+a*l*c,a*l*o-s*i*c,a*i*o-s*l*c]}function getValueAtCurrentTime(){var e=this.comp.renderedFrame-this.offsetTime,t=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(e===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&e>=r||this._caching.lastFrame<t&&e<t))){this._caching.lastFrame>=e&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var n=this.interpolateValue(e,this._caching);this.pv=n}return this._caching.lastFrame=e,this.pv}function setVValue(e){var t;if("unidimensional"===this.propType)t=e*this.mult,mathAbs(this.v-t)>1e-5&&(this.v=t,this._mdf=!0);else for(var r=0,n=this.v.length;r<n;)t=e[r]*this.mult,mathAbs(this.v[r]-t)>1e-5&&(this.v[r]=t,this._mdf=!0),r+=1}function processEffectsSequence(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var e;this.lock=!0,this._mdf=this._isFirstFrame;var t=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(e=0;e<t;e+=1)r=this.effectsSequence[e](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(e){this.effectsSequence.push(e),this.container.addDynamicProperty(this)}function ValueProperty(e,t,r,n){this.propType="unidimensional",this.mult=r||1,this.data=t,this.v=r?t.k*r:t.k,this.pv=t.k,this._mdf=!1,this.elem=e,this.container=n,this.comp=e.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(e,t,r,n){var a;this.propType="multidimensional",this.mult=r||1,this.data=t,this._mdf=!1,this.elem=e,this.container=n,this.comp=e.comp,this.k=!1,this.kf=!1,this.frameId=-1;var i=t.k.length;for(this.v=createTypedArray("float32",i),this.pv=createTypedArray("float32",i),this.vel=createTypedArray("float32",i),a=0;a<i;a+=1)this.v[a]=t.k[a]*this.mult,this.pv[a]=t.k[a];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(e,t,r,n){this.propType="unidimensional",this.keyframes=t.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=t,this.mult=r||1,this.elem=e,this.container=n,this.comp=e.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(e,t,r,n){var a;this.propType="multidimensional";var i,o,s,l,c=t.k.length;for(a=0;a<c-1;a+=1)t.k[a].to&&t.k[a].s&&t.k[a+1]&&t.k[a+1].s&&(i=t.k[a].s,o=t.k[a+1].s,s=t.k[a].to,l=t.k[a].ti,(2===i.length&&(i[0]!==o[0]||i[1]!==o[1])&&bez.pointOnLine2D(i[0],i[1],o[0],o[1],i[0]+s[0],i[1]+s[1])&&bez.pointOnLine2D(i[0],i[1],o[0],o[1],o[0]+l[0],o[1]+l[1])||3===i.length&&(i[0]!==o[0]||i[1]!==o[1]||i[2]!==o[2])&&bez.pointOnLine3D(i[0],i[1],i[2],o[0],o[1],o[2],i[0]+s[0],i[1]+s[1],i[2]+s[2])&&bez.pointOnLine3D(i[0],i[1],i[2],o[0],o[1],o[2],o[0]+l[0],o[1]+l[1],o[2]+l[2]))&&(t.k[a].to=null,t.k[a].ti=null),i[0]===o[0]&&i[1]===o[1]&&0===s[0]&&0===s[1]&&0===l[0]&&0===l[1]&&(2===i.length||i[2]===o[2]&&0===s[2]&&0===l[2])&&(t.k[a].to=null,t.k[a].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=t,this.keyframes=t.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=e,this.container=n,this.comp=e.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var u=t.k[0].s.length;for(this.v=createTypedArray("float32",u),this.pv=createTypedArray("float32",u),a=0;a<u;a+=1)this.v[a]=initFrame,this.pv[a]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",u)},this.addEffect=addEffect}var PropertyFactory=(ob={getProp:function(e,t,r,n,a){var i;if(t.sid&&(t=e.globalData.slotManager.getProp(t)),t.k.length)if("number"==typeof t.k[0])i=new MultiDimensionalProperty(e,t,n,a);else switch(r){case 0:i=new KeyframedValueProperty(e,t,n,a);break;case 1:i=new KeyframedMultidimensionalProperty(e,t,n,a)}else i=new ValueProperty(e,t,n,a);return i.effectsSequence.length&&a.addDynamicProperty(i),i}},ob),ob;function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(e){-1===this.dynamicProperties.indexOf(e)&&(this.dynamicProperties.push(e),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var e;this._mdf=!1;var t=this.dynamicProperties.length;for(e=0;e<t;e+=1)this.dynamicProperties[e].getValue(),this.dynamicProperties[e]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(e){this.container=e,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=poolFactory(8,function(){return createTypedArray("float32",2)});function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(e,t){this.c=e,this.setLength(t);for(var r=0;r<t;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(e){for(;this._maxLength<e;)this.doubleArrayLength();this._length=e},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(e,t,r,n,a){var i;switch(this._length=Math.max(this._length,n+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":i=this.v;break;case"i":i=this.i;break;case"o":i=this.o;break;default:i=[]}(!i[n]||i[n]&&!a)&&(i[n]=pointPool.newElement()),i[n][0]=e,i[n][1]=t},ShapePath.prototype.setTripleAt=function(e,t,r,n,a,i,o,s){this.setXYAt(e,t,"v",o,s),this.setXYAt(r,n,"o",o,s),this.setXYAt(a,i,"i",o,s)},ShapePath.prototype.reverse=function(){var e=new ShapePath;e.setPathData(this.c,this._length);var t=this.v,r=this.o,n=this.i,a=0;this.c&&(e.setTripleAt(t[0][0],t[0][1],n[0][0],n[0][1],r[0][0],r[0][1],0,!1),a=1);var i,o=this._length-1,s=this._length;for(i=a;i<s;i+=1)e.setTripleAt(t[o][0],t[o][1],n[o][0],n[o][1],r[o][0],r[o][1],i,!1),o-=1;return e},ShapePath.prototype.length=function(){return this._length};var shapePool=(factory=poolFactory(4,function(){return new ShapePath},function(e){var t,r=e._length;for(t=0;t<r;t+=1)pointPool.release(e.v[t]),pointPool.release(e.i[t]),pointPool.release(e.o[t]),e.v[t]=null,e.i[t]=null,e.o[t]=null;e._length=0,e.c=!1}),factory.clone=function(e){var t,r=factory.newElement(),n=void 0===e._length?e.v.length:e._length;for(r.setLength(n),r.c=e.c,t=0;t<n;t+=1)r.setTripleAt(e.v[t][0],e.v[t][1],e.o[t][0],e.o[t][1],e.i[t][0],e.i[t][1],t);return r},factory),factory;function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(e){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=e,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var e;for(e=0;e<this._length;e+=1)shapePool.release(this.shapes[e]);this._length=0};var shapeCollectionPool=function(){var e={newShapeCollection:function(){return t?n[t-=1]:new ShapeCollection},release:function(e){var a,i=e._length;for(a=0;a<i;a+=1)shapePool.release(e.shapes[a]);e._length=0,t===r&&(n=pooling.double(n),r*=2),n[t]=e,t+=1}},t=0,r=4,n=createSizedArray(r);return e}(),ShapePropertyFactory=function(){var e=-999999;function t(e,t,r){var n,a,i,o,s,l,c,u,f,p=r.lastIndex,h=this.keyframes;if(e<h[0].t-this.offsetTime)n=h[0].s[0],i=!0,p=0;else if(e>=h[h.length-1].t-this.offsetTime)n=h[h.length-1].s?h[h.length-1].s[0]:h[h.length-2].e[0],i=!0;else{for(var d,m,y,g=p,v=h.length-1,_=!0;_&&(d=h[g],!((m=h[g+1]).t-this.offsetTime>e));)g<v-1?g+=1:_=!1;if(y=this.keyframesMetadata[g]||{},p=g,!(i=1===d.h)){if(e>=m.t-this.offsetTime)u=1;else if(e<d.t-this.offsetTime)u=0;else{var b;y.__fnct?b=y.__fnct:(b=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,y.__fnct=b),u=b((e-(d.t-this.offsetTime))/(m.t-this.offsetTime-(d.t-this.offsetTime)))}a=m.s?m.s[0]:d.e[0]}n=d.s[0]}for(l=t._length,c=n.i[0].length,r.lastIndex=p,o=0;o<l;o+=1)for(s=0;s<c;s+=1)f=i?n.i[o][s]:n.i[o][s]+(a.i[o][s]-n.i[o][s])*u,t.i[o][s]=f,f=i?n.o[o][s]:n.o[o][s]+(a.o[o][s]-n.o[o][s])*u,t.o[o][s]=f,f=i?n.v[o][s]:n.v[o][s]+(a.v[o][s]-n.v[o][s])*u,t.v[o][s]=f}function r(){var t=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,n=this.keyframes[this.keyframes.length-1].t-this.offsetTime,a=this._caching.lastFrame;return a!==e&&(a<r&&t<r||a>n&&t>n)||(this._caching.lastIndex=a<t?this._caching.lastIndex:0,this.interpolateShape(t,this.pv,this._caching)),this._caching.lastFrame=t,this.pv}function n(){this.paths=this.localShapeCollection}function a(e){(function(e,t){if(e._length!==t._length||e.c!==t.c)return!1;var r,n=e._length;for(r=0;r<n;r+=1)if(e.v[r][0]!==t.v[r][0]||e.v[r][1]!==t.v[r][1]||e.o[r][0]!==t.o[r][0]||e.o[r][1]!==t.o[r][1]||e.i[r][0]!==t.i[r][0]||e.i[r][1]!==t.i[r][1])return!1;return!0})(this.v,e)||(this.v=shapePool.clone(e),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function i(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var e,t;this.lock=!0,this._mdf=!1,e=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var r=this.effectsSequence.length;for(t=0;t<r;t+=1)e=this.effectsSequence[t](e);this.setVValue(e),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function o(e,t,r){this.propType="shape",this.comp=e.comp,this.container=e,this.elem=e,this.data=t,this.k=!1,this.kf=!1,this._mdf=!1;var a=3===r?t.pt.k:t.ks.k;this.v=shapePool.clone(a),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=n,this.effectsSequence=[]}function s(e){this.effectsSequence.push(e),this.container.addDynamicProperty(this)}function l(t,a,i){this.propType="shape",this.comp=t.comp,this.elem=t,this.container=t,this.offsetTime=t.data.st,this.keyframes=3===i?a.pt.k:a.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var o=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,o),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=e,this.reset=n,this._caching={lastFrame:e,lastIndex:0},this.effectsSequence=[r.bind(this)]}o.prototype.interpolateShape=t,o.prototype.getValue=i,o.prototype.setVValue=a,o.prototype.addEffect=s,l.prototype.getValue=i,l.prototype.interpolateShape=t,l.prototype.setVValue=a,l.prototype.addEffect=s;var c=function(){var e=roundCorner;function t(e,t){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=t.d,this.elem=e,this.comp=e.comp,this.frameId=-1,this.initDynamicPropertyContainer(e),this.p=PropertyFactory.getProp(e,t.p,1,0,this),this.s=PropertyFactory.getProp(e,t.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return t.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var t=this.p.v[0],r=this.p.v[1],n=this.s.v[0]/2,a=this.s.v[1]/2,i=3!==this.d,o=this.v;o.v[0][0]=t,o.v[0][1]=r-a,o.v[1][0]=i?t+n:t-n,o.v[1][1]=r,o.v[2][0]=t,o.v[2][1]=r+a,o.v[3][0]=i?t-n:t+n,o.v[3][1]=r,o.i[0][0]=i?t-n*e:t+n*e,o.i[0][1]=r-a,o.i[1][0]=i?t+n:t-n,o.i[1][1]=r-a*e,o.i[2][0]=i?t+n*e:t-n*e,o.i[2][1]=r+a,o.i[3][0]=i?t-n:t+n,o.i[3][1]=r+a*e,o.o[0][0]=i?t+n*e:t-n*e,o.o[0][1]=r-a,o.o[1][0]=i?t+n:t-n,o.o[1][1]=r+a*e,o.o[2][0]=i?t-n*e:t+n*e,o.o[2][1]=r+a,o.o[3][0]=i?t-n:t+n,o.o[3][1]=r-a*e}},extendPrototype([DynamicPropertyContainer],t),t}(),u=function(){function e(e,t){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=e,this.comp=e.comp,this.data=t,this.frameId=-1,this.d=t.d,this.initDynamicPropertyContainer(e),1===t.sy?(this.ir=PropertyFactory.getProp(e,t.ir,0,0,this),this.is=PropertyFactory.getProp(e,t.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(e,t.pt,0,0,this),this.p=PropertyFactory.getProp(e,t.p,1,0,this),this.r=PropertyFactory.getProp(e,t.r,0,degToRads,this),this.or=PropertyFactory.getProp(e,t.or,0,0,this),this.os=PropertyFactory.getProp(e,t.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return e.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var e,t,r,n,a=2*Math.floor(this.pt.v),i=2*Math.PI/a,o=!0,s=this.or.v,l=this.ir.v,c=this.os.v,u=this.is.v,f=2*Math.PI*s/(2*a),p=2*Math.PI*l/(2*a),h=-Math.PI/2;h+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,e=0;e<a;e+=1){r=o?c:u,n=o?f:p;var m=(t=o?s:l)*Math.cos(h),y=t*Math.sin(h),g=0===m&&0===y?0:y/Math.sqrt(m*m+y*y),v=0===m&&0===y?0:-m/Math.sqrt(m*m+y*y);m+=+this.p.v[0],y+=+this.p.v[1],this.v.setTripleAt(m,y,m-g*n*r*d,y-v*n*r*d,m+g*n*r*d,y+v*n*r*d,e,!0),o=!o,h+=i*d}},convertPolygonToPath:function(){var e,t=Math.floor(this.pt.v),r=2*Math.PI/t,n=this.or.v,a=this.os.v,i=2*Math.PI*n/(4*t),o=.5*-Math.PI,s=3===this.data.d?-1:1;for(o+=this.r.v,this.v._length=0,e=0;e<t;e+=1){var l=n*Math.cos(o),c=n*Math.sin(o),u=0===l&&0===c?0:c/Math.sqrt(l*l+c*c),f=0===l&&0===c?0:-l/Math.sqrt(l*l+c*c);l+=+this.p.v[0],c+=+this.p.v[1],this.v.setTripleAt(l,c,l-u*i*a*s,c-f*i*a*s,l+u*i*a*s,c+f*i*a*s,e,!0),o+=r*s}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],e),e}(),f=function(){function e(e,t){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=e,this.comp=e.comp,this.frameId=-1,this.d=t.d,this.initDynamicPropertyContainer(e),this.p=PropertyFactory.getProp(e,t.p,1,0,this),this.s=PropertyFactory.getProp(e,t.s,1,0,this),this.r=PropertyFactory.getProp(e,t.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return e.prototype={convertRectToPath:function(){var e=this.p.v[0],t=this.p.v[1],r=this.s.v[0]/2,n=this.s.v[1]/2,a=bmMin(r,n,this.r.v),i=a*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(e+r,t-n+a,e+r,t-n+a,e+r,t-n+i,0,!0),this.v.setTripleAt(e+r,t+n-a,e+r,t+n-i,e+r,t+n-a,1,!0),0!==a?(this.v.setTripleAt(e+r-a,t+n,e+r-a,t+n,e+r-i,t+n,2,!0),this.v.setTripleAt(e-r+a,t+n,e-r+i,t+n,e-r+a,t+n,3,!0),this.v.setTripleAt(e-r,t+n-a,e-r,t+n-a,e-r,t+n-i,4,!0),this.v.setTripleAt(e-r,t-n+a,e-r,t-n+i,e-r,t-n+a,5,!0),this.v.setTripleAt(e-r+a,t-n,e-r+a,t-n,e-r+i,t-n,6,!0),this.v.setTripleAt(e+r-a,t-n,e+r-i,t-n,e+r-a,t-n,7,!0)):(this.v.setTripleAt(e-r,t+n,e-r+i,t+n,e-r,t+n,2),this.v.setTripleAt(e-r,t-n,e-r,t-n+i,e-r,t-n,3))):(this.v.setTripleAt(e+r,t-n+a,e+r,t-n+i,e+r,t-n+a,0,!0),0!==a?(this.v.setTripleAt(e+r-a,t-n,e+r-a,t-n,e+r-i,t-n,1,!0),this.v.setTripleAt(e-r+a,t-n,e-r+i,t-n,e-r+a,t-n,2,!0),this.v.setTripleAt(e-r,t-n+a,e-r,t-n+a,e-r,t-n+i,3,!0),this.v.setTripleAt(e-r,t+n-a,e-r,t+n-i,e-r,t+n-a,4,!0),this.v.setTripleAt(e-r+a,t+n,e-r+a,t+n,e-r+i,t+n,5,!0),this.v.setTripleAt(e+r-a,t+n,e+r-i,t+n,e+r-a,t+n,6,!0),this.v.setTripleAt(e+r,t+n-a,e+r,t+n-a,e+r,t+n-i,7,!0)):(this.v.setTripleAt(e-r,t-n,e-r+i,t-n,e-r,t-n,1,!0),this.v.setTripleAt(e-r,t+n,e-r,t+n-i,e-r,t+n,2,!0),this.v.setTripleAt(e+r,t+n,e+r-i,t+n,e+r,t+n,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:n},extendPrototype([DynamicPropertyContainer],e),e}();return{getShapeProp:function(e,t,r){var n;return 3===r||4===r?n=(3===r?t.pt:t.ks).k.length?new l(e,t,r):new o(e,t,r):5===r?n=new f(e,t):6===r?n=new c(e,t):7===r&&(n=new u(e,t)),n.k&&e.addDynamicProperty(n),n},getConstructorFunction:function(){return o},getKeyframedConstructorFunction:function(){return l}}}(),Matrix=function(){var e=Math.cos,t=Math.sin,r=Math.tan,n=Math.round;function a(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function i(r){if(0===r)return this;var n=e(r),a=t(r);return this._t(n,-a,0,0,a,n,0,0,0,0,1,0,0,0,0,1)}function o(r){if(0===r)return this;var n=e(r),a=t(r);return this._t(1,0,0,0,0,n,-a,0,0,a,n,0,0,0,0,1)}function s(r){if(0===r)return this;var n=e(r),a=t(r);return this._t(n,0,a,0,0,1,0,0,-a,0,n,0,0,0,0,1)}function l(r){if(0===r)return this;var n=e(r),a=t(r);return this._t(n,-a,0,0,a,n,0,0,0,0,1,0,0,0,0,1)}function c(e,t){return this._t(1,t,e,1,0,0)}function u(e,t){return this.shear(r(e),r(t))}function f(n,a){var i=e(a),o=t(a);return this._t(i,o,0,0,-o,i,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(n),1,0,0,0,0,1,0,0,0,0,1)._t(i,-o,0,0,o,i,0,0,0,0,1,0,0,0,0,1)}function p(e,t,r){return r||0===r||(r=1),1===e&&1===t&&1===r?this:this._t(e,0,0,0,0,t,0,0,0,0,r,0,0,0,0,1)}function h(e,t,r,n,a,i,o,s,l,c,u,f,p,h,d,m){return this.props[0]=e,this.props[1]=t,this.props[2]=r,this.props[3]=n,this.props[4]=a,this.props[5]=i,this.props[6]=o,this.props[7]=s,this.props[8]=l,this.props[9]=c,this.props[10]=u,this.props[11]=f,this.props[12]=p,this.props[13]=h,this.props[14]=d,this.props[15]=m,this}function d(e,t,r){return r=r||0,0!==e||0!==t||0!==r?this._t(1,0,0,0,0,1,0,0,0,0,1,0,e,t,r,1):this}function m(e,t,r,n,a,i,o,s,l,c,u,f,p,h,d,m){var y=this.props;if(1===e&&0===t&&0===r&&0===n&&0===a&&1===i&&0===o&&0===s&&0===l&&0===c&&1===u&&0===f)return y[12]=y[12]*e+y[15]*p,y[13]=y[13]*i+y[15]*h,y[14]=y[14]*u+y[15]*d,y[15]*=m,this._identityCalculated=!1,this;var g=y[0],v=y[1],_=y[2],b=y[3],x=y[4],S=y[5],C=y[6],P=y[7],w=y[8],k=y[9],D=y[10],E=y[11],A=y[12],T=y[13],M=y[14],O=y[15];return y[0]=g*e+v*a+_*l+b*p,y[1]=g*t+v*i+_*c+b*h,y[2]=g*r+v*o+_*u+b*d,y[3]=g*n+v*s+_*f+b*m,y[4]=x*e+S*a+C*l+P*p,y[5]=x*t+S*i+C*c+P*h,y[6]=x*r+S*o+C*u+P*d,y[7]=x*n+S*s+C*f+P*m,y[8]=w*e+k*a+D*l+E*p,y[9]=w*t+k*i+D*c+E*h,y[10]=w*r+k*o+D*u+E*d,y[11]=w*n+k*s+D*f+E*m,y[12]=A*e+T*a+M*l+O*p,y[13]=A*t+T*i+M*c+O*h,y[14]=A*r+T*o+M*u+O*d,y[15]=A*n+T*s+M*f+O*m,this._identityCalculated=!1,this}function y(e){var t=e.props;return this.transform(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function g(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function v(e){for(var t=0;t<16;){if(e.props[t]!==this.props[t])return!1;t+=1}return!0}function _(e){var t;for(t=0;t<16;t+=1)e.props[t]=this.props[t];return e}function b(e){var t;for(t=0;t<16;t+=1)this.props[t]=e[t]}function x(e,t,r){return{x:e*this.props[0]+t*this.props[4]+r*this.props[8]+this.props[12],y:e*this.props[1]+t*this.props[5]+r*this.props[9]+this.props[13],z:e*this.props[2]+t*this.props[6]+r*this.props[10]+this.props[14]}}function S(e,t,r){return e*this.props[0]+t*this.props[4]+r*this.props[8]+this.props[12]}function C(e,t,r){return e*this.props[1]+t*this.props[5]+r*this.props[9]+this.props[13]}function P(e,t,r){return e*this.props[2]+t*this.props[6]+r*this.props[10]+this.props[14]}function w(){var e=this.props[0]*this.props[5]-this.props[1]*this.props[4],t=this.props[5]/e,r=-this.props[1]/e,n=-this.props[4]/e,a=this.props[0]/e,i=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/e,o=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/e,s=new Matrix;return s.props[0]=t,s.props[1]=r,s.props[4]=n,s.props[5]=a,s.props[12]=i,s.props[13]=o,s}function k(e){return this.getInverseMatrix().applyToPointArray(e[0],e[1],e[2]||0)}function D(e){var t,r=e.length,n=[];for(t=0;t<r;t+=1)n[t]=k(e[t]);return n}function E(e,t,r){var n=createTypedArray("float32",6);if(this.isIdentity())n[0]=e[0],n[1]=e[1],n[2]=t[0],n[3]=t[1],n[4]=r[0],n[5]=r[1];else{var a=this.props[0],i=this.props[1],o=this.props[4],s=this.props[5],l=this.props[12],c=this.props[13];n[0]=e[0]*a+e[1]*o+l,n[1]=e[0]*i+e[1]*s+c,n[2]=t[0]*a+t[1]*o+l,n[3]=t[0]*i+t[1]*s+c,n[4]=r[0]*a+r[1]*o+l,n[5]=r[0]*i+r[1]*s+c}return n}function A(e,t,r){return this.isIdentity()?[e,t,r]:[e*this.props[0]+t*this.props[4]+r*this.props[8]+this.props[12],e*this.props[1]+t*this.props[5]+r*this.props[9]+this.props[13],e*this.props[2]+t*this.props[6]+r*this.props[10]+this.props[14]]}function T(e,t){if(this.isIdentity())return e+","+t;var r=this.props;return Math.round(100*(e*r[0]+t*r[4]+r[12]))/100+","+Math.round(100*(e*r[1]+t*r[5]+r[13]))/100}function M(){for(var e=0,t=this.props,r="matrix3d(";e<16;)r+=n(1e4*t[e])/1e4,r+=15===e?")":",",e+=1;return r}function O(e){return e<1e-6&&e>0||e>-1e-6&&e<0?n(1e4*e)/1e4:e}function F(){var e=this.props;return"matrix("+O(e[0])+","+O(e[1])+","+O(e[4])+","+O(e[5])+","+O(e[12])+","+O(e[13])+")"}return function(){this.reset=a,this.rotate=i,this.rotateX=o,this.rotateY=s,this.rotateZ=l,this.skew=u,this.skewFromAxis=f,this.shear=c,this.scale=p,this.setTransform=h,this.translate=d,this.transform=m,this.multiply=y,this.applyToPoint=x,this.applyToX=S,this.applyToY=C,this.applyToZ=P,this.applyToPointArray=A,this.applyToTriplePoints=E,this.applyToPointStringified=T,this.toCSS=M,this.to2dCSS=F,this.clone=_,this.cloneFromProps=b,this.equals=v,this.inversePoints=D,this.inversePoint=k,this.getInverseMatrix=w,this._t=this.transform,this.isIdentity=g,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(e){return _typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$3(e)}var lottie={},standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";function setLocation(e){setLocationHref(e)}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(e){setSubframeEnabled(e)}function setPrefix(e){setIdPrefix(e)}function loadAnimation(e){return!0===standalone&&(e.animationData=JSON.parse(animationData)),animationManager.loadAnimation(e)}function setQuality(e){if("string"==typeof e)switch(e){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10)}else!isNaN(e)&&e>1&&setDefaultCurveSegments(e);getDefaultCurveSegments()>=50?roundValues(!1):roundValues(!0)}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(e,t){"expressions"===e&&setExpressionsPlugin(t)}function getFactory(e){switch(e){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(e){for(var t=queryString.split("&"),r=0;r<t.length;r+=1){var n=t[r].split("=");if(decodeURIComponent(n[0])==e)return decodeURIComponent(n[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";var queryString="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{"object"!==_typeof$3(exports)&&__webpack_require__.amdO}catch(e){}var ShapeModifiers=function(){var e={},t={};return e.registerModifier=function(e,r){t[e]||(t[e]=r)},e.getModifier=function(e,r,n){return new t[e](r,n)},e}();function ShapeModifier(){}function TrimModifier(){}function PuckerAndBloatModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(e){if(!this.closed){e.sh.container.addDynamicProperty(e.sh);var t={shape:e.sh,data:e,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(t),this.addShapeToModifier(t),this._isAnimated&&e.setAsAnimated()}},ShapeModifier.prototype.init=function(e,t){this.shapes=[],this.elem=e,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,t),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(e,t){this.s=PropertyFactory.getProp(e,t.s,0,.01,this),this.e=PropertyFactory.getProp(e,t.e,0,.01,this),this.o=PropertyFactory.getProp(e,t.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=t.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(e){e.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(e,t,r,n,a){var i=[];t<=1?i.push({s:e,e:t}):e>=1?i.push({s:e-1,e:t-1}):(i.push({s:e,e:1}),i.push({s:0,e:t-1}));var o,s,l=[],c=i.length;for(o=0;o<c;o+=1){var u,f;(s=i[o]).e*a<n||s.s*a>n+r||(u=s.s*a<=n?0:(s.s*a-n)/r,f=s.e*a>=n+r?1:(s.e*a-n)/r,l.push([u,f]))}return l.length||l.push([0,0]),l},TrimModifier.prototype.releasePathsData=function(e){var t,r=e.length;for(t=0;t<r;t+=1)segmentsLengthPool.release(e[t]);return e.length=0,e},TrimModifier.prototype.processShapes=function(e){var t,r,n,a;if(this._mdf||e){var i=this.o.v%360/360;if(i<0&&(i+=1),(t=this.s.v>1?1+i:this.s.v<0?0+i:this.s.v+i)>(r=this.e.v>1?1+i:this.e.v<0?0+i:this.e.v+i)){var o=t;t=r,r=o}t=1e-4*Math.round(1e4*t),r=1e-4*Math.round(1e4*r),this.sValue=t,this.eValue=r}else t=this.sValue,r=this.eValue;var s,l,c,u,f,p=this.shapes.length,h=0;if(r===t)for(a=0;a<p;a+=1)this.shapes[a].localShapeCollection.releaseShapes(),this.shapes[a].shape._mdf=!0,this.shapes[a].shape.paths=this.shapes[a].localShapeCollection,this._mdf&&(this.shapes[a].pathsData.length=0);else if(1===r&&0===t||0===r&&1===t){if(this._mdf)for(a=0;a<p;a+=1)this.shapes[a].pathsData.length=0,this.shapes[a].shape._mdf=!0}else{var d,m,y=[];for(a=0;a<p;a+=1)if((d=this.shapes[a]).shape._mdf||this._mdf||e||2===this.m){if(l=(n=d.shape.paths)._length,f=0,!d.shape._mdf&&d.pathsData.length)f=d.totalShapeLength;else{for(c=this.releasePathsData(d.pathsData),s=0;s<l;s+=1)u=bez.getSegmentsLength(n.shapes[s]),c.push(u),f+=u.totalLength;d.totalShapeLength=f,d.pathsData=c}h+=f,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var g,v=t,_=r,b=0;for(a=p-1;a>=0;a-=1)if((d=this.shapes[a]).shape._mdf){for((m=d.localShapeCollection).releaseShapes(),2===this.m&&p>1?(g=this.calculateShapeEdges(t,r,d.totalShapeLength,b,h),b+=d.totalShapeLength):g=[[v,_]],l=g.length,s=0;s<l;s+=1){v=g[s][0],_=g[s][1],y.length=0,_<=1?y.push({s:d.totalShapeLength*v,e:d.totalShapeLength*_}):v>=1?y.push({s:d.totalShapeLength*(v-1),e:d.totalShapeLength*(_-1)}):(y.push({s:d.totalShapeLength*v,e:d.totalShapeLength}),y.push({s:0,e:d.totalShapeLength*(_-1)}));var x=this.addShapes(d,y[0]);if(y[0].s!==y[0].e){if(y.length>1)if(d.shape.paths.shapes[d.shape.paths._length-1].c){var S=x.pop();this.addPaths(x,m),x=this.addShapes(d,y[1],S)}else this.addPaths(x,m),x=this.addShapes(d,y[1]);this.addPaths(x,m)}}d.shape.paths=m}}},TrimModifier.prototype.addPaths=function(e,t){var r,n=e.length;for(r=0;r<n;r+=1)t.addShape(e[r])},TrimModifier.prototype.addSegment=function(e,t,r,n,a,i,o){a.setXYAt(t[0],t[1],"o",i),a.setXYAt(r[0],r[1],"i",i+1),o&&a.setXYAt(e[0],e[1],"v",i),a.setXYAt(n[0],n[1],"v",i+1)},TrimModifier.prototype.addSegmentFromArray=function(e,t,r,n){t.setXYAt(e[1],e[5],"o",r),t.setXYAt(e[2],e[6],"i",r+1),n&&t.setXYAt(e[0],e[4],"v",r),t.setXYAt(e[3],e[7],"v",r+1)},TrimModifier.prototype.addShapes=function(e,t,r){var n,a,i,o,s,l,c,u,f=e.pathsData,p=e.shape.paths.shapes,h=e.shape.paths._length,d=0,m=[],y=!0;for(r?(s=r._length,u=r._length):(r=shapePool.newElement(),s=0,u=0),m.push(r),n=0;n<h;n+=1){for(l=f[n].lengths,r.c=p[n].c,i=p[n].c?l.length:l.length+1,a=1;a<i;a+=1)if(d+(o=l[a-1]).addedLength<t.s)d+=o.addedLength,r.c=!1;else{if(d>t.e){r.c=!1;break}t.s<=d&&t.e>=d+o.addedLength?(this.addSegment(p[n].v[a-1],p[n].o[a-1],p[n].i[a],p[n].v[a],r,s,y),y=!1):(c=bez.getNewSegment(p[n].v[a-1],p[n].v[a],p[n].o[a-1],p[n].i[a],(t.s-d)/o.addedLength,(t.e-d)/o.addedLength,l[a-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1),d+=o.addedLength,s+=1}if(p[n].c&&l.length){if(o=l[a-1],d<=t.e){var g=l[a-1].addedLength;t.s<=d&&t.e>=d+g?(this.addSegment(p[n].v[a-1],p[n].o[a-1],p[n].i[0],p[n].v[0],r,s,y),y=!1):(c=bez.getNewSegment(p[n].v[a-1],p[n].v[0],p[n].o[a-1],p[n].i[0],(t.s-d)/g,(t.e-d)/g,l[a-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1)}else r.c=!1;d+=o.addedLength,s+=1}if(r._length&&(r.setXYAt(r.v[u][0],r.v[u][1],"i",u),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>t.e)break;n<h-1&&(r=shapePool.newElement(),y=!0,m.push(r),s=0)}return m},extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,t.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(e,t){var r=t/100,n=[0,0],a=e._length,i=0;for(i=0;i<a;i+=1)n[0]+=e.v[i][0],n[1]+=e.v[i][1];n[0]/=a,n[1]/=a;var o,s,l,c,u,f,p=shapePool.newElement();for(p.c=e.c,i=0;i<a;i+=1)o=e.v[i][0]+(n[0]-e.v[i][0])*r,s=e.v[i][1]+(n[1]-e.v[i][1])*r,l=e.o[i][0]+(n[0]-e.o[i][0])*-r,c=e.o[i][1]+(n[1]-e.o[i][1])*-r,u=e.i[i][0]+(n[0]-e.i[i][0])*-r,f=e.i[i][1]+(n[1]-e.i[i][1])*-r,p.setTripleAt(o,s,l,c,u,f,i);return p},PuckerAndBloatModifier.prototype.processShapes=function(e){var t,r,n,a,i,o,s=this.shapes.length,l=this.amount.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(i=this.shapes[r]).localShapeCollection,i.shape._mdf||this._mdf||e)for(o.releaseShapes(),i.shape._mdf=!0,t=i.shape.paths.shapes,a=i.shape.paths._length,n=0;n<a;n+=1)o.addShape(this.processPath(t[n],l));i.shape.paths=i.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var e=[0,0];function t(e,t,r){if(this.elem=e,this.frameId=-1,this.propType="transform",this.data=t,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(r||e),t.p&&t.p.s?(this.px=PropertyFactory.getProp(e,t.p.x,0,0,this),this.py=PropertyFactory.getProp(e,t.p.y,0,0,this),t.p.z&&(this.pz=PropertyFactory.getProp(e,t.p.z,0,0,this))):this.p=PropertyFactory.getProp(e,t.p||{k:[0,0,0]},1,0,this),t.rx){if(this.rx=PropertyFactory.getProp(e,t.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(e,t.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(e,t.rz,0,degToRads,this),t.or.k[0].ti){var n,a=t.or.k.length;for(n=0;n<a;n+=1)t.or.k[n].to=null,t.or.k[n].ti=null}this.or=PropertyFactory.getProp(e,t.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(e,t.r||{k:0},0,degToRads,this);t.sk&&(this.sk=PropertyFactory.getProp(e,t.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(e,t.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(e,t.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(e,t.s||{k:[100,100,100]},1,.01,this),t.o?this.o=PropertyFactory.getProp(e,t.o,0,.01,e):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return t.prototype={applyToMatrix:function(e){var t=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||t,this.a&&e.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&e.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&e.skewFromAxis(-this.sk.v,this.sa.v),this.r?e.rotate(-this.r.v):e.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?e.translate(this.px.v,this.py.v,-this.pz.v):e.translate(this.px.v,this.py.v,0):e.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(t){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||t){var r;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var n,a;if(r=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(n=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),a=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(n=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),a=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(n=this.p.pv,a=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){n=[],a=[];var i=this.px,o=this.py;i._caching.lastFrame+i.offsetTime<=i.keyframes[0].t?(n[0]=i.getValueAtTime((i.keyframes[0].t+.01)/r,0),n[1]=o.getValueAtTime((o.keyframes[0].t+.01)/r,0),a[0]=i.getValueAtTime(i.keyframes[0].t/r,0),a[1]=o.getValueAtTime(o.keyframes[0].t/r,0)):i._caching.lastFrame+i.offsetTime>=i.keyframes[i.keyframes.length-1].t?(n[0]=i.getValueAtTime(i.keyframes[i.keyframes.length-1].t/r,0),n[1]=o.getValueAtTime(o.keyframes[o.keyframes.length-1].t/r,0),a[0]=i.getValueAtTime((i.keyframes[i.keyframes.length-1].t-.01)/r,0),a[1]=o.getValueAtTime((o.keyframes[o.keyframes.length-1].t-.01)/r,0)):(n=[i.pv,o.pv],a[0]=i.getValueAtTime((i._caching.lastFrame+i.offsetTime-.01)/r,i.offsetTime),a[1]=o.getValueAtTime((o._caching.lastFrame+o.offsetTime-.01)/r,o.offsetTime))}else n=a=e;this.v.rotate(-Math.atan2(n[1]-a[1],n[0]-a[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],t),t.prototype.addDynamicProperty=function(e){this._addDynamicProperty(e),this.elem.addDynamicProperty(e),this._isDirty=!0},t.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(e,r,n){return new t(e,r,n)}}}();function RepeaterModifier(){}function RoundCornersModifier(){}function floatEqual(e,t){return 1e5*Math.abs(e-t)<=Math.min(Math.abs(e),Math.abs(t))}function floatZero(e){return Math.abs(e)<=1e-5}function lerp(e,t,r){return e*(1-r)+t*r}function lerpPoint(e,t,r){return[lerp(e[0],t[0],r),lerp(e[1],t[1],r)]}function quadRoots(e,t,r){if(0===e)return[];var n=t*t-4*e*r;if(n<0)return[];var a=-t/(2*e);if(0===n)return[a];var i=Math.sqrt(n)/(2*e);return[a-i,a+i]}function polynomialCoefficients(e,t,r,n){return[3*t-e-3*r+n,3*e-6*t+3*r,-3*e+3*t,e]}function singlePoint(e){return new PolynomialBezier(e,e,e,e,!1)}function PolynomialBezier(e,t,r,n,a){a&&pointEqual(e,t)&&(t=lerpPoint(e,n,1/3)),a&&pointEqual(r,n)&&(r=lerpPoint(e,n,2/3));var i=polynomialCoefficients(e[0],t[0],r[0],n[0]),o=polynomialCoefficients(e[1],t[1],r[1],n[1]);this.a=[i[0],o[0]],this.b=[i[1],o[1]],this.c=[i[2],o[2]],this.d=[i[3],o[3]],this.points=[e,t,r,n]}function extrema(e,t){var r=e.points[0][t],n=e.points[e.points.length-1][t];if(r>n){var a=n;n=r,r=a}for(var i=quadRoots(3*e.a[t],2*e.b[t],e.c[t]),o=0;o<i.length;o+=1)if(i[o]>0&&i[o]<1){var s=e.point(i[o])[t];s<r?r=s:s>n&&(n=s)}return{min:r,max:n}}function intersectData(e,t,r){var n=e.boundingBox();return{cx:n.cx,cy:n.cy,width:n.width,height:n.height,bez:e,t:(t+r)/2,t1:t,t2:r}}function splitData(e){var t=e.bez.split(.5);return[intersectData(t[0],e.t1,e.t),intersectData(t[1],e.t,e.t2)]}function boxIntersect(e,t){return 2*Math.abs(e.cx-t.cx)<e.width+t.width&&2*Math.abs(e.cy-t.cy)<e.height+t.height}function intersectsImpl(e,t,r,n,a,i){if(boxIntersect(e,t))if(r>=i||e.width<=n&&e.height<=n&&t.width<=n&&t.height<=n)a.push([e.t,t.t]);else{var o=splitData(e),s=splitData(t);intersectsImpl(o[0],s[0],r+1,n,a,i),intersectsImpl(o[0],s[1],r+1,n,a,i),intersectsImpl(o[1],s[0],r+1,n,a,i),intersectsImpl(o[1],s[1],r+1,n,a,i)}}function crossProduct(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function lineIntersection(e,t,r,n){var a=[e[0],e[1],1],i=[t[0],t[1],1],o=[r[0],r[1],1],s=[n[0],n[1],1],l=crossProduct(crossProduct(a,i),crossProduct(o,s));return floatZero(l[2])?null:[l[0]/l[2],l[1]/l[2]]}function polarOffset(e,t,r){return[e[0]+Math.cos(t)*r,e[1]-Math.sin(t)*r]}function pointDistance(e,t){return Math.hypot(e[0]-t[0],e[1]-t[1])}function pointEqual(e,t){return floatEqual(e[0],t[0])&&floatEqual(e[1],t[1])}function ZigZagModifier(){}function setPoint(e,t,r,n,a,i,o){var s=r-Math.PI/2,l=r+Math.PI/2,c=t[0]+Math.cos(r)*n*a,u=t[1]-Math.sin(r)*n*a;e.setTripleAt(c,u,c+Math.cos(s)*i,u-Math.sin(s)*i,c+Math.cos(l)*o,u-Math.sin(l)*o,e.length())}function getPerpendicularVector(e,t){var r=[t[0]-e[0],t[1]-e[1]],n=.5*-Math.PI;return[Math.cos(n)*r[0]-Math.sin(n)*r[1],Math.sin(n)*r[0]+Math.cos(n)*r[1]]}function getProjectingAngle(e,t){var r=0===t?e.length()-1:t-1,n=(t+1)%e.length(),a=getPerpendicularVector(e.v[r],e.v[n]);return Math.atan2(0,1)-Math.atan2(a[1],a[0])}function zigZagCorner(e,t,r,n,a,i,o){var s=getProjectingAngle(t,r),l=t.v[r%t._length],c=t.v[0===r?t._length-1:r-1],u=t.v[(r+1)%t._length],f=2===i?Math.sqrt(Math.pow(l[0]-c[0],2)+Math.pow(l[1]-c[1],2)):0,p=2===i?Math.sqrt(Math.pow(l[0]-u[0],2)+Math.pow(l[1]-u[1],2)):0;setPoint(e,t.v[r%t._length],s,o,n,p/(2*(a+1)),f/(2*(a+1)),i)}function zigZagSegment(e,t,r,n,a,i){for(var o=0;o<n;o+=1){var s=(o+1)/(n+1),l=2===a?Math.sqrt(Math.pow(t.points[3][0]-t.points[0][0],2)+Math.pow(t.points[3][1]-t.points[0][1],2)):0,c=t.normalAngle(s);setPoint(e,t.point(s),c,i,r,l/(2*(n+1)),l/(2*(n+1)),a),i=-i}return i}function linearOffset(e,t,r){var n=Math.atan2(t[0]-e[0],t[1]-e[1]);return[polarOffset(e,n,r),polarOffset(t,n,r)]}function offsetSegment(e,t){var r,n,a,i,o,s,l;r=(l=linearOffset(e.points[0],e.points[1],t))[0],n=l[1],a=(l=linearOffset(e.points[1],e.points[2],t))[0],i=l[1],o=(l=linearOffset(e.points[2],e.points[3],t))[0],s=l[1];var c=lineIntersection(r,n,a,i);null===c&&(c=n);var u=lineIntersection(o,s,a,i);return null===u&&(u=o),new PolynomialBezier(r,c,u,s)}function joinLines(e,t,r,n,a){var i=t.points[3],o=r.points[0];if(3===n)return i;if(pointEqual(i,o))return i;if(2===n){var s=-t.tangentAngle(1),l=-r.tangentAngle(0)+Math.PI,c=lineIntersection(i,polarOffset(i,s+Math.PI/2,100),o,polarOffset(o,s+Math.PI/2,100)),u=c?pointDistance(c,i):pointDistance(i,o)/2,f=polarOffset(i,s,2*u*roundCorner);return e.setXYAt(f[0],f[1],"o",e.length()-1),f=polarOffset(o,l,2*u*roundCorner),e.setTripleAt(o[0],o[1],o[0],o[1],f[0],f[1],e.length()),o}var p=lineIntersection(pointEqual(i,t.points[2])?t.points[0]:t.points[2],i,o,pointEqual(o,r.points[1])?r.points[3]:r.points[1]);return p&&pointDistance(p,i)<a?(e.setTripleAt(p[0],p[1],p[0],p[1],p[0],p[1],e.length()),p):i}function getIntersection(e,t){var r=e.intersections(t);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(e,t){var r=e.slice(),n=t.slice(),a=getIntersection(e[e.length-1],t[0]);return a&&(r[e.length-1]=e[e.length-1].split(a[0])[0],n[0]=t[0].split(a[1])[1]),e.length>1&&t.length>1&&(a=getIntersection(e[0],t[t.length-1]))?[[e[0].split(a[0])[0]],[t[t.length-1].split(a[1])[1]]]:[r,n]}function pruneIntersections(e){for(var t,r=1;r<e.length;r+=1)t=pruneSegmentIntersection(e[r-1],e[r]),e[r-1]=t[0],e[r]=t[1];return e.length>1&&(t=pruneSegmentIntersection(e[e.length-1],e[0]),e[e.length-1]=t[0],e[0]=t[1]),e}function offsetSegmentSplit(e,t){var r,n,a,i,o=e.inflectionPoints();if(0===o.length)return[offsetSegment(e,t)];if(1===o.length||floatEqual(o[1],1))return r=(a=e.split(o[0]))[0],n=a[1],[offsetSegment(r,t),offsetSegment(n,t)];r=(a=e.split(o[0]))[0];var s=(o[1]-o[0])/(1-o[0]);return i=(a=a[1].split(s))[0],n=a[1],[offsetSegment(r,t),offsetSegment(i,t),offsetSegment(n,t)]}function OffsetPathModifier(){}function getFontProperties(e){for(var t=e.fStyle?e.fStyle.split(" "):[],r="normal",n="normal",a=t.length,i=0;i<a;i+=1)switch(t[i].toLowerCase()){case"italic":n="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200"}return{style:n,weight:e.fWeight||r}}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(e,t.c,0,null,this),this.o=PropertyFactory.getProp(e,t.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(e,t.tr,this),this.so=PropertyFactory.getProp(e,t.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(e,t.tr.eo,0,.01,this),this.data=t,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(e,t,r,n,a,i){var o=i?-1:1,s=n.s.v[0]+(1-n.s.v[0])*(1-a),l=n.s.v[1]+(1-n.s.v[1])*(1-a);e.translate(n.p.v[0]*o*a,n.p.v[1]*o*a,n.p.v[2]),t.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),t.rotate(-n.r.v*o*a),t.translate(n.a.v[0],n.a.v[1],n.a.v[2]),r.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),r.scale(i?1/s:s,i?1/l:l),r.translate(n.a.v[0],n.a.v[1],n.a.v[2])},RepeaterModifier.prototype.init=function(e,t,r,n){for(this.elem=e,this.arr=t,this.pos=r,this.elemsData=n,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,t[r]);r>0;)r-=1,this._elements.unshift(t[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(e){var t,r=e.length;for(t=0;t<r;t+=1)e[t]._processed=!1,"gr"===e[t].ty&&this.resetElements(e[t].it)},RepeaterModifier.prototype.cloneElements=function(e){var t=JSON.parse(JSON.stringify(e));return this.resetElements(t),t},RepeaterModifier.prototype.changeGroupRender=function(e,t){var r,n=e.length;for(r=0;r<n;r+=1)e[r]._render=t,"gr"===e[r].ty&&this.changeGroupRender(e[r].it,t)},RepeaterModifier.prototype.processShapes=function(e){var t,r,n,a,i,o=!1;if(this._mdf||e){var s,l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var c={it:this.cloneElements(this._elements),ty:"gr"};c.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,c),this._groups.splice(0,0,c),this._currentCopies+=1}this.elem.reloadShapes(),o=!0}for(i=0,n=0;n<=this._groups.length-1;n+=1){if(s=i<l,this._groups[n]._render=s,this.changeGroupRender(this._groups[n].it,s),!s){var u=this.elemsData[n].it,f=u[u.length-1];0!==f.transform.op.v?(f.transform.op._mdf=!0,f.transform.op.v=0):f.transform.op._mdf=!1}i+=1}this._currentCopies=l;var p=this.o.v,h=p%1,d=p>0?Math.floor(p):Math.ceil(p),m=this.pMatrix.props,y=this.rMatrix.props,g=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var v,_,b=0;if(p>0){for(;b<d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),b+=1;h&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,h,!1),b+=h)}else if(p<0){for(;b>d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),b-=1;h&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-h,!0),b-=h)}for(n=1===this.data.m?0:this._currentCopies-1,a=1===this.data.m?1:-1,i=this._currentCopies;i;){if(_=(r=(t=this.elemsData[n].it)[t.length-1].transform.mProps.v.props).length,t[t.length-1].transform.mProps._mdf=!0,t[t.length-1].transform.op._mdf=!0,t[t.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(n/(this._currentCopies-1)),0!==b){for((0!==n&&1===a||n!==this._currentCopies-1&&-1===a)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),v=0;v<_;v+=1)r[v]=this.matrix.props[v];this.matrix.reset()}else for(this.matrix.reset(),v=0;v<_;v+=1)r[v]=this.matrix.props[v];b+=1,i-=1,n+=a}}else for(i=this._currentCopies,n=0,a=1;i;)r=(t=this.elemsData[n].it)[t.length-1].transform.mProps.v.props,t[t.length-1].transform.mProps._mdf=!1,t[t.length-1].transform.op._mdf=!1,i-=1,n+=a;return o},RepeaterModifier.prototype.addShape=function(){},extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(e,t.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(e,t){var r,n=shapePool.newElement();n.c=e.c;var a,i,o,s,l,c,u,f,p,h,d,m,y=e._length,g=0;for(r=0;r<y;r+=1)a=e.v[r],o=e.o[r],i=e.i[r],a[0]===o[0]&&a[1]===o[1]&&a[0]===i[0]&&a[1]===i[1]?0!==r&&r!==y-1||e.c?(s=0===r?e.v[y-1]:e.v[r-1],c=(l=Math.sqrt(Math.pow(a[0]-s[0],2)+Math.pow(a[1]-s[1],2)))?Math.min(l/2,t)/l:0,u=d=a[0]+(s[0]-a[0])*c,f=m=a[1]-(a[1]-s[1])*c,p=u-(u-a[0])*roundCorner,h=f-(f-a[1])*roundCorner,n.setTripleAt(u,f,p,h,d,m,g),g+=1,s=r===y-1?e.v[0]:e.v[r+1],c=(l=Math.sqrt(Math.pow(a[0]-s[0],2)+Math.pow(a[1]-s[1],2)))?Math.min(l/2,t)/l:0,u=p=a[0]+(s[0]-a[0])*c,f=h=a[1]+(s[1]-a[1])*c,d=u-(u-a[0])*roundCorner,m=f-(f-a[1])*roundCorner,n.setTripleAt(u,f,p,h,d,m,g),g+=1):(n.setTripleAt(a[0],a[1],o[0],o[1],i[0],i[1],g),g+=1):(n.setTripleAt(e.v[r][0],e.v[r][1],e.o[r][0],e.o[r][1],e.i[r][0],e.i[r][1],g),g+=1);return n},RoundCornersModifier.prototype.processShapes=function(e){var t,r,n,a,i,o,s=this.shapes.length,l=this.rd.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(i=this.shapes[r]).localShapeCollection,i.shape._mdf||this._mdf||e)for(o.releaseShapes(),i.shape._mdf=!0,t=i.shape.paths.shapes,a=i.shape.paths._length,n=0;n<a;n+=1)o.addShape(this.processPath(t[n],l));i.shape.paths=i.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},PolynomialBezier.prototype.point=function(e){return[((this.a[0]*e+this.b[0])*e+this.c[0])*e+this.d[0],((this.a[1]*e+this.b[1])*e+this.c[1])*e+this.d[1]]},PolynomialBezier.prototype.derivative=function(e){return[(3*e*this.a[0]+2*this.b[0])*e+this.c[0],(3*e*this.a[1]+2*this.b[1])*e+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(e){var t=this.derivative(e);return Math.atan2(t[1],t[0])},PolynomialBezier.prototype.normalAngle=function(e){var t=this.derivative(e);return Math.atan2(t[0],t[1])},PolynomialBezier.prototype.inflectionPoints=function(){var e=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(e))return[];var t=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/e,r=t*t-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/e;if(r<0)return[];var n=Math.sqrt(r);return floatZero(n)?n>0&&n<1?[t]:[]:[t-n,t+n].filter(function(e){return e>0&&e<1})},PolynomialBezier.prototype.split=function(e){if(e<=0)return[singlePoint(this.points[0]),this];if(e>=1)return[this,singlePoint(this.points[this.points.length-1])];var t=lerpPoint(this.points[0],this.points[1],e),r=lerpPoint(this.points[1],this.points[2],e),n=lerpPoint(this.points[2],this.points[3],e),a=lerpPoint(t,r,e),i=lerpPoint(r,n,e),o=lerpPoint(a,i,e);return[new PolynomialBezier(this.points[0],t,a,o,!0),new PolynomialBezier(o,i,n,this.points[3],!0)]},PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var e=this.bounds();return{left:e.x.min,right:e.x.max,top:e.y.min,bottom:e.y.max,width:e.x.max-e.x.min,height:e.y.max-e.y.min,cx:(e.x.max+e.x.min)/2,cy:(e.y.max+e.y.min)/2}},PolynomialBezier.prototype.intersections=function(e,t,r){void 0===t&&(t=2),void 0===r&&(r=7);var n=[];return intersectsImpl(intersectData(this,0,1),intersectData(e,0,1),0,t,n,r),n},PolynomialBezier.shapeSegment=function(e,t){var r=(t+1)%e.length();return new PolynomialBezier(e.v[t],e.o[t],e.i[r],e.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(e,t){var r=(t+1)%e.length();return new PolynomialBezier(e.v[r],e.i[r],e.o[t],e.v[t],!0)},extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(e,t.s,0,null,this),this.frequency=PropertyFactory.getProp(e,t.r,0,null,this),this.pointsType=PropertyFactory.getProp(e,t.pt,0,null,this),this._isAnimated=0!==this.amplitude.effectsSequence.length||0!==this.frequency.effectsSequence.length||0!==this.pointsType.effectsSequence.length},ZigZagModifier.prototype.processPath=function(e,t,r,n){var a=e._length,i=shapePool.newElement();if(i.c=e.c,e.c||(a-=1),0===a)return i;var o=-1,s=PolynomialBezier.shapeSegment(e,0);zigZagCorner(i,e,0,t,r,n,o);for(var l=0;l<a;l+=1)o=zigZagSegment(i,s,t,r,n,-o),s=l!==a-1||e.c?PolynomialBezier.shapeSegment(e,(l+1)%a):null,zigZagCorner(i,e,l+1,t,r,n,o);return i},ZigZagModifier.prototype.processShapes=function(e){var t,r,n,a,i,o,s=this.shapes.length,l=this.amplitude.v,c=Math.max(0,Math.round(this.frequency.v)),u=this.pointsType.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(i=this.shapes[r]).localShapeCollection,i.shape._mdf||this._mdf||e)for(o.releaseShapes(),i.shape._mdf=!0,t=i.shape.paths.shapes,a=i.shape.paths._length,n=0;n<a;n+=1)o.addShape(this.processPath(t[n],l,c,u));i.shape.paths=i.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,t.a,0,null,this),this.miterLimit=PropertyFactory.getProp(e,t.ml,0,null,this),this.lineJoin=t.lj,this._isAnimated=0!==this.amount.effectsSequence.length},OffsetPathModifier.prototype.processPath=function(e,t,r,n){var a=shapePool.newElement();a.c=e.c;var i,o,s,l=e.length();e.c||(l-=1);var c=[];for(i=0;i<l;i+=1)s=PolynomialBezier.shapeSegment(e,i),c.push(offsetSegmentSplit(s,t));if(!e.c)for(i=l-1;i>=0;i-=1)s=PolynomialBezier.shapeSegmentInverted(e,i),c.push(offsetSegmentSplit(s,t));c=pruneIntersections(c);var u=null,f=null;for(i=0;i<c.length;i+=1){var p=c[i];for(f&&(u=joinLines(a,f,p[0],r,n)),f=p[p.length-1],o=0;o<p.length;o+=1)s=p[o],u&&pointEqual(s.points[0],u)?a.setXYAt(s.points[1][0],s.points[1][1],"o",a.length()-1):a.setTripleAt(s.points[0][0],s.points[0][1],s.points[1][0],s.points[1][1],s.points[0][0],s.points[0][1],a.length()),a.setTripleAt(s.points[3][0],s.points[3][1],s.points[3][0],s.points[3][1],s.points[2][0],s.points[2][1],a.length()),u=s.points[3]}return c.length&&joinLines(a,f,c[0][0],r,n),a},OffsetPathModifier.prototype.processShapes=function(e){var t,r,n,a,i,o,s=this.shapes.length,l=this.amount.v,c=this.miterLimit.v,u=this.lineJoin;if(0!==l)for(r=0;r<s;r+=1){if(o=(i=this.shapes[r]).localShapeCollection,i.shape._mdf||this._mdf||e)for(o.releaseShapes(),i.shape._mdf=!0,t=i.shape.paths.shapes,a=i.shape.paths._length,n=0;n<a;n+=1)o.addShape(this.processPath(t[n],l,u,c));i.shape.paths=i.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var FontManager=function(){var e={w:0,size:0,shapes:[],data:{shapes:[]}},t=[];t=t.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var r=127988,n=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function a(e,t){var r=createTag("span");r.setAttribute("aria-hidden",!0),r.style.fontFamily=t;var n=createTag("span");n.innerText="giItT1WQy@!-/#",r.style.position="absolute",r.style.left="-10000px",r.style.top="-10000px",r.style.fontSize="300px",r.style.fontVariant="normal",r.style.fontStyle="normal",r.style.fontWeight="normal",r.style.letterSpacing="0",r.appendChild(n),document.body.appendChild(r);var a=n.offsetWidth;return n.style.fontFamily=function(e){var t,r=e.split(","),n=r.length,a=[];for(t=0;t<n;t+=1)"sans-serif"!==r[t]&&"monospace"!==r[t]&&a.push(r[t]);return a.join(",")}(e)+", "+t,{node:n,w:a,parent:r}}function i(e,t){var r,n=document.body&&t?"svg":"canvas",a=getFontProperties(e);if("svg"===n){var i=createNS("text");i.style.fontSize="100px",i.setAttribute("font-family",e.fFamily),i.setAttribute("font-style",a.style),i.setAttribute("font-weight",a.weight),i.textContent="1",e.fClass?(i.style.fontFamily="inherit",i.setAttribute("class",e.fClass)):i.style.fontFamily=e.fFamily,t.appendChild(i),r=i}else{var o=new OffscreenCanvas(500,500).getContext("2d");o.font=a.style+" "+a.weight+" 100px "+e.fFamily,r=o}return{measureText:function(e){return"svg"===n?(r.textContent=e,r.getComputedTextLength()):r.measureText(e).width}}}function o(e){var t=0,r=e.charCodeAt(0);if(r>=55296&&r<=56319){var n=e.charCodeAt(1);n>=56320&&n<=57343&&(t=1024*(r-55296)+n-56320+65536)}return t}function s(e){var t=o(e);return t>=127462&&t<=127487}var l=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};l.isModifier=function(e,t){var r=e.toString(16)+t.toString(16);return-1!==n.indexOf(r)},l.isZeroWidthJoiner=function(e){return 8205===e},l.isFlagEmoji=function(e){return s(e.substr(0,2))&&s(e.substr(2,2))},l.isRegionalCode=s,l.isCombinedCharacter=function(e){return-1!==t.indexOf(e)},l.isRegionalFlag=function(e,t){var n=o(e.substr(t,2));if(n!==r)return!1;var a=0;for(t+=2;a<5;){if((n=o(e.substr(t,2)))<917601||n>917626)return!1;a+=1,t+=2}return 917631===o(e.substr(t,2))},l.isVariationSelector=function(e){return 65039===e},l.BLACK_FLAG_CODE_POINT=r;var c={addChars:function(e){if(e){var t;this.chars||(this.chars=[]);var r,n,a=e.length,i=this.chars.length;for(t=0;t<a;t+=1){for(r=0,n=!1;r<i;)this.chars[r].style===e[t].style&&this.chars[r].fFamily===e[t].fFamily&&this.chars[r].ch===e[t].ch&&(n=!0),r+=1;n||(this.chars.push(e[t]),i+=1)}}},addFonts:function(e,t){if(e){if(this.chars)return this.isLoaded=!0,void(this.fonts=e.list);if(!document.body)return this.isLoaded=!0,e.list.forEach(function(e){e.helper=i(e),e.cache={}}),void(this.fonts=e.list);var r,n=e.list,o=n.length,s=o;for(r=0;r<o;r+=1){var l,c,u=!0;if(n[r].loaded=!1,n[r].monoCase=a(n[r].fFamily,"monospace"),n[r].sansCase=a(n[r].fFamily,"sans-serif"),n[r].fPath){if("p"===n[r].fOrigin||3===n[r].origin){if((l=document.querySelectorAll('style[f-forigin="p"][f-family="'+n[r].fFamily+'"], style[f-origin="3"][f-family="'+n[r].fFamily+'"]')).length>0&&(u=!1),u){var f=createTag("style");f.setAttribute("f-forigin",n[r].fOrigin),f.setAttribute("f-origin",n[r].origin),f.setAttribute("f-family",n[r].fFamily),f.type="text/css",f.innerText="@font-face {font-family: "+n[r].fFamily+"; font-style: normal; src: url('"+n[r].fPath+"');}",t.appendChild(f)}}else if("g"===n[r].fOrigin||1===n[r].origin){for(l=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),c=0;c<l.length;c+=1)-1!==l[c].href.indexOf(n[r].fPath)&&(u=!1);if(u){var p=createTag("link");p.setAttribute("f-forigin",n[r].fOrigin),p.setAttribute("f-origin",n[r].origin),p.type="text/css",p.rel="stylesheet",p.href=n[r].fPath,document.body.appendChild(p)}}else if("t"===n[r].fOrigin||2===n[r].origin){for(l=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),c=0;c<l.length;c+=1)n[r].fPath===l[c].src&&(u=!1);if(u){var h=createTag("link");h.setAttribute("f-forigin",n[r].fOrigin),h.setAttribute("f-origin",n[r].origin),h.setAttribute("rel","stylesheet"),h.setAttribute("href",n[r].fPath),t.appendChild(h)}}}else n[r].loaded=!0,s-=1;n[r].helper=i(n[r],t),n[r].cache={},this.fonts.push(n[r])}0===s?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(t,r,n){for(var a=0,i=this.chars.length;a<i;){if(this.chars[a].ch===t&&this.chars[a].style===r&&this.chars[a].fFamily===n)return this.chars[a];a+=1}return("string"==typeof t&&13!==t.charCodeAt(0)||!t)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",t,r,n)),e},getFontByName:function(e){for(var t=0,r=this.fonts.length;t<r;){if(this.fonts[t].fName===e)return this.fonts[t];t+=1}return this.fonts[0]},measureText:function(e,t,r){var n=this.getFontByName(t),a=e;if(!n.cache[a]){var i=n.helper;if(" "===e){var o=i.measureText("|"+e+"|"),s=i.measureText("||");n.cache[a]=(o-s)/100}else n.cache[a]=i.measureText(e)/100}return n.cache[a]*r},checkLoadedFonts:function(){var e,t,r,n=this.fonts.length,a=n;for(e=0;e<n;e+=1)this.fonts[e].loaded?a-=1:"n"===this.fonts[e].fOrigin||0===this.fonts[e].origin?this.fonts[e].loaded=!0:(t=this.fonts[e].monoCase.node,r=this.fonts[e].monoCase.w,t.offsetWidth!==r?(a-=1,this.fonts[e].loaded=!0):(t=this.fonts[e].sansCase.node,r=this.fonts[e].sansCase.w,t.offsetWidth!==r&&(a-=1,this.fonts[e].loaded=!0)),this.fonts[e].loaded&&(this.fonts[e].sansCase.parent.parentNode.removeChild(this.fonts[e].sansCase.parent),this.fonts[e].monoCase.parent.parentNode.removeChild(this.fonts[e].monoCase.parent)));0!==a&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}};return l.prototype=c,l}();function SlotManager(e){this.animationData=e}function slotFactory(e){return new SlotManager(e)}function RenderableElement(){}SlotManager.prototype.getProp=function(e){return this.animationData.slots&&this.animationData.slots[e.sid]?Object.assign(e,this.animationData.slots[e.sid].p):e},RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(e){-1===this.renderableComponents.indexOf(e)&&this.renderableComponents.push(e)},removeRenderableComponent:function(e){-1!==this.renderableComponents.indexOf(e)&&this.renderableComponents.splice(this.renderableComponents.indexOf(e),1)},prepareRenderableFrame:function(e){this.checkLayerLimits(e)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(e){this.data.ip-this.data.st<=e&&this.data.op-this.data.st>e?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var e,t=this.renderableComponents.length;for(e=0;e<t;e+=1)this.renderableComponents[e].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(e){return blendModeEnums[e]||""}),blendModeEnums;function SliderEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function AngleEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function ColorEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,1,0,r)}function PointEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,1,0,r)}function LayerIndexEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function MaskIndexEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function CheckboxEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(e,t){var r,n=e.ef||[];this.effectElements=[];var a,i=n.length;for(r=0;r<i;r+=1)a=new GroupEffect(n[r],t),this.effectElements.push(a)}function GroupEffect(e,t){this.init(e,t)}function BaseElement(){}function FrameElement(){}function FootageElement(e,t,r){this.initFrame(),this.initRenderable(),this.assetData=t.getAssetData(e.refId),this.footageData=t.imageLoader.getAsset(this.assetData),this.initBaseData(e,t,r)}function AudioElement(e,t,r){this.initFrame(),this.initRenderable(),this.assetData=t.getAssetData(e.refId),this.initBaseData(e,t,r),this._isPlaying=!1,this._canPlay=!1;var n=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(n),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,e.au&&e.au.lv?e.au.lv:{k:[100]},1,.01,this)}function BaseRenderer(){}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(e,t){var r;this.data=e,this.effectElements=[],this.initDynamicPropertyContainer(t);var n,a=this.data.ef.length,i=this.data.ef;for(r=0;r<a;r+=1){switch(n=null,i[r].ty){case 0:n=new SliderEffect(i[r],t,this);break;case 1:n=new AngleEffect(i[r],t,this);break;case 2:n=new ColorEffect(i[r],t,this);break;case 3:n=new PointEffect(i[r],t,this);break;case 4:case 7:n=new CheckboxEffect(i[r],t,this);break;case 10:n=new LayerIndexEffect(i[r],t,this);break;case 11:n=new MaskIndexEffect(i[r],t,this);break;case 5:n=new EffectsManager(i[r],t,this);break;default:n=new NoValueEffect(i[r],t,this)}n&&this.effectElements.push(n)}},BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var e=0,t=this.data.masksProperties.length;e<t;){if("n"!==this.data.masksProperties[e].mode&&!1!==this.data.masksProperties[e].cl)return!0;e+=1}return!1},initExpressions:function(){var e=getExpressionInterfaces();if(e){var t=e("layer"),r=e("effects"),n=e("shape"),a=e("text"),i=e("comp");this.layerInterface=t(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var o=r.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(o),0===this.data.ty||this.data.xt?this.compInterface=i(this):4===this.data.ty?(this.layerInterface.shapeInterface=n(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=a(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var e=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=e},initBaseData:function(e,t,r){this.globalData=t,this.comp=r,this.data=e,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(e,t){var r,n=this.dynamicProperties.length;for(r=0;r<n;r+=1)(t||this._isParent&&"transform"===this.dynamicProperties[r].propType)&&(this.dynamicProperties[r].getValue(),this.dynamicProperties[r]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(e){-1===this.dynamicProperties.indexOf(e)&&this.dynamicProperties.push(e)}},FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var e=getExpressionInterfaces();if(e){var t=e("footage");this.layerInterface=t(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData},AudioElement.prototype.prepareFrame=function(e){if(this.prepareRenderableFrame(e,!0),this.prepareProperties(e,!0),this.tm._placeholder)this._currentTime=e/this.data.sr;else{var t=this.tm.v;this._currentTime=t}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(e){this.audio.rate(e)},AudioElement.prototype.volume=function(e){this._volumeMultiplier=e,this._previousVolume=e*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},BaseRenderer.prototype.checkLayers=function(e){var t,r,n=this.layers.length;for(this.completeLayers=!0,t=n-1;t>=0;t-=1)this.elements[t]||(r=this.layers[t]).ip-r.st<=e-this.layers[t].st&&r.op-r.st>e-this.layers[t].st&&this.buildItem(t),this.completeLayers=!!this.elements[t]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(e){switch(e.ty){case 2:return this.createImage(e);case 0:return this.createComp(e);case 1:return this.createSolid(e);case 3:default:return this.createNull(e);case 4:return this.createShape(e);case 5:return this.createText(e);case 6:return this.createAudio(e);case 13:return this.createCamera(e);case 15:return this.createFootage(e)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(e){return new AudioElement(e,this.globalData,this)},BaseRenderer.prototype.createFootage=function(e){return new FootageElement(e,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)this.buildItem(e);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(e){var t;this.completeLayers=!1;var r,n=e.length,a=this.layers.length;for(t=0;t<n;t+=1)for(r=0;r<a;){if(this.layers[r].id===e[t].id){this.layers[r]=e[t];break}r+=1}},BaseRenderer.prototype.setProjectInterface=function(e){this.globalData.projectInterface=e},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(e,t,r){for(var n=this.elements,a=this.layers,i=0,o=a.length;i<o;)a[i].ind==t&&(n[i]&&!0!==n[i]?(r.push(n[i]),n[i].setAsParent(),void 0!==a[i].parent?this.buildElementParenting(e,a[i].parent,r):e.setHierarchy(r)):(this.buildItem(i),this.addPendingElement(e))),i+=1},BaseRenderer.prototype.addPendingElement=function(e){this.pendingElements.push(e)},BaseRenderer.prototype.searchExtraCompositions=function(e){var t,r=e.length;for(t=0;t<r;t+=1)if(e[t].xt){var n=this.createComp(e[t]);n.initExpressions(),this.globalData.projectInterface.registerComposition(n)}},BaseRenderer.prototype.getElementById=function(e){var t,r=this.elements.length;for(t=0;t<r;t+=1)if(this.elements[t].data.ind===e)return this.elements[t];return null},BaseRenderer.prototype.getElementByPath=function(e){var t,r=e.shift();if("number"==typeof r)t=this.elements[r];else{var n,a=this.elements.length;for(n=0;n<a;n+=1)if(this.elements[n].data.nm===r){t=this.elements[n];break}}return 0===e.length?t:t.getElementByPath(e)},BaseRenderer.prototype.setupGlobalData=function(e,t){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(e),this.globalData.fontManager.addChars(e.chars),this.globalData.fontManager.addFonts(e.fonts,t),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=e.fr,this.globalData.nm=e.nm,this.globalData.compSize={w:e.w,h:e.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}function MaskElement(e,t,r){this.data=e,this.element=t,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var n,a,i=this.globalData.defs,o=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(o),this.solidPath="";var s,l,c,u,f,p,h=this.masksProperties,d=0,m=[],y=createElementID(),g="clipPath",v="clip-path";for(n=0;n<o;n+=1)if(("a"!==h[n].mode&&"n"!==h[n].mode||h[n].inv||100!==h[n].o.k||h[n].o.x)&&(g="mask",v="mask"),"s"!==h[n].mode&&"i"!==h[n].mode||0!==d?c=null:((c=createNS("rect")).setAttribute("fill","#ffffff"),c.setAttribute("width",this.element.comp.data.w||0),c.setAttribute("height",this.element.comp.data.h||0),m.push(c)),a=createNS("path"),"n"===h[n].mode)this.viewData[n]={op:PropertyFactory.getProp(this.element,h[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,h[n],3),elem:a,lastPath:""},i.appendChild(a);else{var _;if(d+=1,a.setAttribute("fill","s"===h[n].mode?"#000000":"#ffffff"),a.setAttribute("clip-rule","nonzero"),0!==h[n].x.k?(g="mask",v="mask",p=PropertyFactory.getProp(this.element,h[n].x,0,null,this.element),_=createElementID(),(u=createNS("filter")).setAttribute("id",_),(f=createNS("feMorphology")).setAttribute("operator","erode"),f.setAttribute("in","SourceGraphic"),f.setAttribute("radius","0"),u.appendChild(f),i.appendChild(u),a.setAttribute("stroke","s"===h[n].mode?"#000000":"#ffffff")):(f=null,p=null),this.storedData[n]={elem:a,x:p,expan:f,lastPath:"",lastOperator:"",filterId:_,lastRadius:0},"i"===h[n].mode){l=m.length;var b=createNS("g");for(s=0;s<l;s+=1)b.appendChild(m[s]);var x=createNS("mask");x.setAttribute("mask-type","alpha"),x.setAttribute("id",y+"_"+d),x.appendChild(a),i.appendChild(x),b.setAttribute("mask","url("+getLocationHref()+"#"+y+"_"+d+")"),m.length=0,m.push(b)}else m.push(a);h[n].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[n]={elem:a,lastPath:"",op:PropertyFactory.getProp(this.element,h[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,h[n],3),invRect:c},this.viewData[n].prop.k||this.drawPath(h[n],this.viewData[n].prop.v,this.viewData[n])}for(this.maskElement=createNS(g),o=m.length,n=0;n<o;n+=1)this.maskElement.appendChild(m[n]);d>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(v,"url("+getLocationHref()+"#"+y+")"),i.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}TransformElement.prototype={initTransform:function(){var e=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:e,localMat:e,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var e,t=this.finalTransform.mat,r=0,n=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;r<n;){if(this.hierarchy[r].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}r+=1}if(this.finalTransform._matMdf)for(e=this.finalTransform.mProp.v.props,t.cloneFromProps(e),r=0;r<n;r+=1)t.multiply(this.hierarchy[r].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var e=0,t=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;e<t;)this.localTransforms[e]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[e]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),e+=1;if(this.finalTransform._localMatMdf){var r=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(r),e=1;e<t;e+=1){var n=this.localTransforms[e].matrix;r.multiply(n)}r.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var a=this.finalTransform.localOpacity;for(e=0;e<t;e+=1)a*=.01*this.localTransforms[e].opacity;this.finalTransform.localOpacity=a}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var e=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(e.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var t=0,r=e.length;for(t=0;t<r;t+=1)this.localTransforms.push(e[t])}}},globalToLocal:function(e){var t=[];t.push(this.finalTransform);for(var r,n=!0,a=this.comp;n;)a.finalTransform?(a.data.hasMask&&t.splice(0,0,a.finalTransform),a=a.comp):n=!1;var i,o=t.length;for(r=0;r<o;r+=1)i=t[r].mat.applyToPointArray(0,0,0),e=[e[0]-i[0],e[1]-i[1],0];return e},mHelper:new Matrix},MaskElement.prototype.getMaskProperty=function(e){return this.viewData[e].prop},MaskElement.prototype.renderFrame=function(e){var t,r=this.element.finalTransform.mat,n=this.masksProperties.length;for(t=0;t<n;t+=1)if((this.viewData[t].prop._mdf||e)&&this.drawPath(this.masksProperties[t],this.viewData[t].prop.v,this.viewData[t]),(this.viewData[t].op._mdf||e)&&this.viewData[t].elem.setAttribute("fill-opacity",this.viewData[t].op.v),"n"!==this.masksProperties[t].mode&&(this.viewData[t].invRect&&(this.element.finalTransform.mProp._mdf||e)&&this.viewData[t].invRect.setAttribute("transform",r.getInverseMatrix().to2dCSS()),this.storedData[t].x&&(this.storedData[t].x._mdf||e))){var a=this.storedData[t].expan;this.storedData[t].x.v<0?("erode"!==this.storedData[t].lastOperator&&(this.storedData[t].lastOperator="erode",this.storedData[t].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[t].filterId+")")),a.setAttribute("radius",-this.storedData[t].x.v)):("dilate"!==this.storedData[t].lastOperator&&(this.storedData[t].lastOperator="dilate",this.storedData[t].elem.setAttribute("filter",null)),this.storedData[t].elem.setAttribute("stroke-width",2*this.storedData[t].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var e="M0,0 ";return e+=" h"+this.globalData.compSize.w,e+=" v"+this.globalData.compSize.h,(e+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(e,t,r){var n,a,i=" M"+t.v[0][0]+","+t.v[0][1];for(a=t._length,n=1;n<a;n+=1)i+=" C"+t.o[n-1][0]+","+t.o[n-1][1]+" "+t.i[n][0]+","+t.i[n][1]+" "+t.v[n][0]+","+t.v[n][1];if(t.c&&a>1&&(i+=" C"+t.o[n-1][0]+","+t.o[n-1][1]+" "+t.i[0][0]+","+t.i[0][1]+" "+t.v[0][0]+","+t.v[0][1]),r.lastPath!==i){var o="";r.elem&&(t.c&&(o=e.inv?this.solidPath+i:i),r.elem.setAttribute("d",o)),r.lastPath=i}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory={createFilter:function(e,t){var r=createNS("filter");return r.setAttribute("id",e),!0!==t&&(r.setAttribute("filterUnits","objectBoundingBox"),r.setAttribute("x","0%"),r.setAttribute("y","0%"),r.setAttribute("width","100%"),r.setAttribute("height","100%")),r},createAlphaToLuminanceFilter:function(){var e=createNS("feColorMatrix");return e.setAttribute("type","matrix"),e.setAttribute("color-interpolation-filters","sRGB"),e.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),e}},featureSupport=function(){var e={maskType:!0,svgLumaHidden:!0,offscreenCanvas:"undefined"!=typeof OffscreenCanvas};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(e.maskType=!1),/firefox/i.test(navigator.userAgent)&&(e.svgLumaHidden=!1),e}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(e){var t,r,n="SourceGraphic",a=e.data.ef?e.data.ef.length:0,i=createElementID(),o=filtersFactory.createFilter(i,!0),s=0;for(this.filters=[],t=0;t<a;t+=1){r=null;var l=e.data.ef[t].ty;registeredEffects$1[l]&&(r=new(0,registeredEffects$1[l].effect)(o,e.effectsManager.effectElements[t],e,idPrefix+s,n),n=idPrefix+s,registeredEffects$1[l].countsAsEffect&&(s+=1)),r&&this.filters.push(r)}s&&(e.globalData.defs.appendChild(o),e.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+i+")")),this.filters.length&&e.addRenderableComponent(this)}function registerEffect$1(e,t,r){registeredEffects$1[e]={effect:t,countsAsEffect:r}}function SVGBaseElement(){}function HierarchyElement(){}function RenderableDOMElement(){}function IImageElement(e,t,r){this.assetData=t.getAssetData(e.refId),this.assetData&&this.assetData.sid&&(this.assetData=t.slotManager.getProp(this.assetData)),this.initElement(e,t,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ProcessedElement(e,t){this.elem=e,this.pos=t}function IShapeElement(){}SVGEffects.prototype.renderFrame=function(e){var t,r=this.filters.length;for(t=0;t<r;t+=1)this.filters[t].renderFrame(e)},SVGEffects.prototype.getEffects=function(e){var t,r=this.filters.length,n=[];for(t=0;t<r;t+=1)this.filters[t].type===e&&n.push(this.filters[t]);return n},SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var e=null;if(this.data.td){this.matteMasks={};var t=createNS("g");t.setAttribute("id",this.layerId),t.appendChild(this.layerElement),e=t,this.globalData.defs.appendChild(t)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),e=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var r=createNS("clipPath"),n=createNS("path");n.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var a=createElementID();if(r.setAttribute("id",a),r.appendChild(n),this.globalData.defs.appendChild(r),this.checkMasks()){var i=createNS("g");i.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")"),i.appendChild(this.layerElement),this.transformedElement=i,e?e.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(e){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[e]){var t,r,n,a,i=this.layerId+"_"+e;if(1===e||3===e){var o=createNS("mask");o.setAttribute("id",i),o.setAttribute("mask-type",3===e?"luminance":"alpha"),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),o.appendChild(n),this.globalData.defs.appendChild(o),featureSupport.maskType||1!==e||(o.setAttribute("mask-type","luminance"),t=createElementID(),r=filtersFactory.createFilter(t),this.globalData.defs.appendChild(r),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(a=createNS("g")).appendChild(n),o.appendChild(a),a.setAttribute("filter","url("+getLocationHref()+"#"+t+")"))}else if(2===e){var s=createNS("mask");s.setAttribute("id",i),s.setAttribute("mask-type","alpha");var l=createNS("g");s.appendChild(l),t=createElementID(),r=filtersFactory.createFilter(t);var c=createNS("feComponentTransfer");c.setAttribute("in","SourceGraphic"),r.appendChild(c);var u=createNS("feFuncA");u.setAttribute("type","table"),u.setAttribute("tableValues","1.0 0.0"),c.appendChild(u),this.globalData.defs.appendChild(r);var f=createNS("rect");f.setAttribute("width",this.comp.data.w),f.setAttribute("height",this.comp.data.h),f.setAttribute("x","0"),f.setAttribute("y","0"),f.setAttribute("fill","#ffffff"),f.setAttribute("opacity","0"),l.setAttribute("filter","url("+getLocationHref()+"#"+t+")"),l.appendChild(f),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(n),featureSupport.maskType||(s.setAttribute("mask-type","luminance"),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),a=createNS("g"),l.appendChild(f),a.appendChild(this.layerElement),l.appendChild(a)),this.globalData.defs.appendChild(s)}this.matteMasks[e]=i}return this.matteMasks[e]},setMatte:function(e){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+e+")")}},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(e){this.hierarchy=e},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initTransform(e,t,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(e){this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},IShapeElement.prototype={addShapeToModifiers:function(e){var t,r=this.shapeModifiers.length;for(t=0;t<r;t+=1)this.shapeModifiers[t].addShape(e)},isShapeInAnimatedModifiers:function(e){for(var t=this.shapeModifiers.length;0<t;)if(this.shapeModifiers[0].isAnimatedWithShape(e))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var e,t=this.shapes.length;for(e=0;e<t;e+=1)this.shapes[e].sh.reset();for(e=(t=this.shapeModifiers.length)-1;e>=0&&!this.shapeModifiers[e].processShapes(this._isFirstFrame);e-=1);}},searchProcessedElement:function(e){for(var t=this.processedElements,r=0,n=t.length;r<n;){if(t[r].elem===e)return t[r].pos;r+=1}return 0},addProcessedElement:function(e,t){for(var r=this.processedElements,n=r.length;n;)if(r[n-=1].elem===e)return void(r[n].pos=t);r.push(new ProcessedElement(e,t))},prepareFrame:function(e){this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(e,t,r){this.caches=[],this.styles=[],this.transformers=e,this.lStr="",this.sh=r,this.lvl=t,this._isAnimated=!!r.k;for(var n=0,a=e.length;n<a;){if(e[n].mProps.dynamicProperties.length){this._isAnimated=!0;break}n+=1}}function SVGStyleData(e,t){this.data=e,this.type=e.ty,this.d="",this.lvl=t,this._mdf=!1,this.closed=!0===e.hd,this.pElem=createNS("path"),this.msElem=null}function DashProperty(e,t,r,n){var a;this.elem=e,this.frameId=-1,this.dataProps=createSizedArray(t.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",t.length?t.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(n);var i,o=t.length||0;for(a=0;a<o;a+=1)i=PropertyFactory.getProp(e,t[a].v,0,0,this),this.k=i.k||this.k,this.dataProps[a]={n:t[a].n,p:i};this.k||this.getValue(!0),this._isAnimated=this.k}function SVGStrokeStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.w=PropertyFactory.getProp(e,t.w,0,null,this),this.d=new DashProperty(e,t.d||{},"svg",this),this.c=PropertyFactory.getProp(e,t.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.c=PropertyFactory.getProp(e,t.c,1,255,this),this.style=r}function SVGNoStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.style=r}function GradientProperty(e,t,r){this.data=t,this.c=createTypedArray("uint8c",4*t.p);var n=t.k.k[0].s?t.k.k[0].s.length-4*t.p:t.k.k.length-4*t.p;this.o=createTypedArray("float32",n),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=n,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(e,t.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function SVGGradientFillStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.initGradientData(e,t,r)}function SVGGradientStrokeStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(e,t.w,0,null,this),this.d=new DashProperty(e,t.d||{},"svg",this),this.initGradientData(e,t,r),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(e,t,r){this.transform={mProps:e,op:t,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},DashProperty.prototype.getValue=function(e){if((this.elem.globalData.frameId!==this.frameId||e)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||e,this._mdf)){var t=0,r=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),t=0;t<r;t+=1)"o"!==this.dataProps[t].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[t].p.v:this.dashArray[t]=this.dataProps[t].p.v:this.dashoffset[0]=this.dataProps[t].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),extendPrototype([DynamicPropertyContainer],SVGNoStyleData),GradientProperty.prototype.comparePoints=function(e,t){for(var r=0,n=this.o.length/2;r<n;){if(Math.abs(e[4*r]-e[4*t+2*r])>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var e=0,t=this.data.k.k.length;e<t;){if(!this.comparePoints(this.data.k.k[e].s,this.data.p))return!1;e+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(e){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||e){var t,r,n,a=4*this.data.p;for(t=0;t<a;t+=1)r=t%4==0?100:255,n=Math.round(this.prop.v[t]*r),this.c[t]!==n&&(this.c[t]=n,this._cmdf=!e);if(this.o.length)for(a=this.prop.v.length,t=4*this.data.p;t<a;t+=1)r=t%2==0?100:1,n=t%2==0?Math.round(100*this.prop.v[t]):this.prop.v[t],this.o[t-4*this.data.p]!==n&&(this.o[t-4*this.data.p]=n,this._omdf=!e);this._mdf=!e}},extendPrototype([DynamicPropertyContainer],GradientProperty),SVGGradientFillStyleData.prototype.initGradientData=function(e,t,r){this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.s=PropertyFactory.getProp(e,t.s,1,null,this),this.e=PropertyFactory.getProp(e,t.e,1,null,this),this.h=PropertyFactory.getProp(e,t.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(e,t.a||{k:0},0,degToRads,this),this.g=new GradientProperty(e,t.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,t),this.setGradientOpacity(t,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(e,t){var r=createElementID(),n=createNS(1===t.t?"linearGradient":"radialGradient");n.setAttribute("id",r),n.setAttribute("spreadMethod","pad"),n.setAttribute("gradientUnits","userSpaceOnUse");var a,i,o,s=[];for(o=4*t.g.p,i=0;i<o;i+=4)a=createNS("stop"),n.appendChild(a),s.push(a);e.setAttribute("gf"===t.ty?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=n,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(e,t){if(this.g._hasOpacity&&!this.g._collapsable){var r,n,a,i=createNS("mask"),o=createNS("path");i.appendChild(o);var s=createElementID(),l=createElementID();i.setAttribute("id",l);var c=createNS(1===e.t?"linearGradient":"radialGradient");c.setAttribute("id",s),c.setAttribute("spreadMethod","pad"),c.setAttribute("gradientUnits","userSpaceOnUse"),a=e.g.k.k[0].s?e.g.k.k[0].s.length:e.g.k.k.length;var u=this.stops;for(n=4*e.g.p;n<a;n+=2)(r=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),c.appendChild(r),u.push(r);o.setAttribute("gf"===e.ty?"fill":"stroke","url("+getLocationHref()+"#"+s+")"),"gs"===e.ty&&(o.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),1===e.lj&&o.setAttribute("stroke-miterlimit",e.ml)),this.of=c,this.ms=i,this.ost=u,this.maskId=l,t.msElem=o}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var buildShapeString=function(e,t,r,n){if(0===t)return"";var a,i=e.o,o=e.i,s=e.v,l=" M"+n.applyToPointStringified(s[0][0],s[0][1]);for(a=1;a<t;a+=1)l+=" C"+n.applyToPointStringified(i[a-1][0],i[a-1][1])+" "+n.applyToPointStringified(o[a][0],o[a][1])+" "+n.applyToPointStringified(s[a][0],s[a][1]);return r&&t&&(l+=" C"+n.applyToPointStringified(i[a-1][0],i[a-1][1])+" "+n.applyToPointStringified(o[0][0],o[0][1])+" "+n.applyToPointStringified(s[0][0],s[0][1]),l+="z"),l},SVGElementsRenderer=function(){var e=new Matrix,t=new Matrix;function r(e,t,r){(r||t.transform.op._mdf)&&t.transform.container.setAttribute("opacity",t.transform.op.v),(r||t.transform.mProps._mdf)&&t.transform.container.setAttribute("transform",t.transform.mProps.v.to2dCSS())}function n(){}function a(r,n,a){var i,o,s,l,c,u,f,p,h,d,m=n.styles.length,y=n.lvl;for(u=0;u<m;u+=1){if(l=n.sh._mdf||a,n.styles[u].lvl<y){for(p=t.reset(),h=y-n.styles[u].lvl,d=n.transformers.length-1;!l&&h>0;)l=n.transformers[d].mProps._mdf||l,h-=1,d-=1;if(l)for(h=y-n.styles[u].lvl,d=n.transformers.length-1;h>0;)p.multiply(n.transformers[d].mProps.v),h-=1,d-=1}else p=e;if(o=(f=n.sh.paths)._length,l){for(s="",i=0;i<o;i+=1)(c=f.shapes[i])&&c._length&&(s+=buildShapeString(c,c._length,c.c,p));n.caches[u]=s}else s=n.caches[u];n.styles[u].d+=!0===r.hd?"":s,n.styles[u]._mdf=l||n.styles[u]._mdf}}function i(e,t,r){var n=t.style;(t.c._mdf||r)&&n.pElem.setAttribute("fill","rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||r)&&n.pElem.setAttribute("fill-opacity",t.o.v)}function o(e,t,r){s(e,t,r),l(0,t,r)}function s(e,t,r){var n,a,i,o,s,l=t.gf,c=t.g._hasOpacity,u=t.s.v,f=t.e.v;if(t.o._mdf||r){var p="gf"===e.ty?"fill-opacity":"stroke-opacity";t.style.pElem.setAttribute(p,t.o.v)}if(t.s._mdf||r){var h=1===e.t?"x1":"cx",d="x1"===h?"y1":"cy";l.setAttribute(h,u[0]),l.setAttribute(d,u[1]),c&&!t.g._collapsable&&(t.of.setAttribute(h,u[0]),t.of.setAttribute(d,u[1]))}if(t.g._cmdf||r){n=t.cst;var m=t.g.c;for(i=n.length,a=0;a<i;a+=1)(o=n[a]).setAttribute("offset",m[4*a]+"%"),o.setAttribute("stop-color","rgb("+m[4*a+1]+","+m[4*a+2]+","+m[4*a+3]+")")}if(c&&(t.g._omdf||r)){var y=t.g.o;for(i=(n=t.g._collapsable?t.cst:t.ost).length,a=0;a<i;a+=1)o=n[a],t.g._collapsable||o.setAttribute("offset",y[2*a]+"%"),o.setAttribute("stop-opacity",y[2*a+1])}if(1===e.t)(t.e._mdf||r)&&(l.setAttribute("x2",f[0]),l.setAttribute("y2",f[1]),c&&!t.g._collapsable&&(t.of.setAttribute("x2",f[0]),t.of.setAttribute("y2",f[1])));else if((t.s._mdf||t.e._mdf||r)&&(s=Math.sqrt(Math.pow(u[0]-f[0],2)+Math.pow(u[1]-f[1],2)),l.setAttribute("r",s),c&&!t.g._collapsable&&t.of.setAttribute("r",s)),t.e._mdf||t.h._mdf||t.a._mdf||r){s||(s=Math.sqrt(Math.pow(u[0]-f[0],2)+Math.pow(u[1]-f[1],2)));var g=Math.atan2(f[1]-u[1],f[0]-u[0]),v=t.h.v;v>=1?v=.99:v<=-1&&(v=-.99);var _=s*v,b=Math.cos(g+t.a.v)*_+u[0],x=Math.sin(g+t.a.v)*_+u[1];l.setAttribute("fx",b),l.setAttribute("fy",x),c&&!t.g._collapsable&&(t.of.setAttribute("fx",b),t.of.setAttribute("fy",x))}}function l(e,t,r){var n=t.style,a=t.d;a&&(a._mdf||r)&&a.dashStr&&(n.pElem.setAttribute("stroke-dasharray",a.dashStr),n.pElem.setAttribute("stroke-dashoffset",a.dashoffset[0])),t.c&&(t.c._mdf||r)&&n.pElem.setAttribute("stroke","rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||r)&&n.pElem.setAttribute("stroke-opacity",t.o.v),(t.w._mdf||r)&&(n.pElem.setAttribute("stroke-width",t.w.v),n.msElem&&n.msElem.setAttribute("stroke-width",t.w.v))}return{createRenderFunction:function(e){switch(e.ty){case"fl":return i;case"gf":return s;case"gs":return o;case"st":return l;case"sh":case"el":case"rc":case"sr":return a;case"tr":return r;case"no":return n;default:return null}}}}();function SVGShapeElement(e,t,r){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(e,t,r),this.prevViewData=[]}function LetterProps(e,t,r,n,a,i){this.o=e,this.sw=t,this.sc=r,this.fc=n,this.m=a,this.p=i,this._mdf={o:!0,sw:!!t,sc:!!r,fc:!!n,m:!0,p:!0}}function TextProperty(e,t){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,t.d&&t.d.sid&&(t.d=e.globalData.slotManager.getProp(t.d)),this.data=t,this.elem=e,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var e,t,r,n,a=this.shapes.length,i=this.stylesList.length,o=[],s=!1;for(r=0;r<i;r+=1){for(n=this.stylesList[r],s=!1,o.length=0,e=0;e<a;e+=1)-1!==(t=this.shapes[e]).styles.indexOf(n)&&(o.push(t),s=t._isAnimated||s);o.length>1&&s&&this.setShapesAsAnimated(o)}},SVGShapeElement.prototype.setShapesAsAnimated=function(e){var t,r=e.length;for(t=0;t<r;t+=1)e[t].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(e,t){var r,n=new SVGStyleData(e,t),a=n.pElem;return"st"===e.ty?r=new SVGStrokeStyleData(this,e,n):"fl"===e.ty?r=new SVGFillStyleData(this,e,n):"gf"===e.ty||"gs"===e.ty?(r=new("gf"===e.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,e,n),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),a.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))):"no"===e.ty&&(r=new SVGNoStyleData(this,e,n)),"st"!==e.ty&&"gs"!==e.ty||(a.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),a.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),a.setAttribute("fill-opacity","0"),1===e.lj&&a.setAttribute("stroke-miterlimit",e.ml)),2===e.r&&a.setAttribute("fill-rule","evenodd"),e.ln&&a.setAttribute("id",e.ln),e.cl&&a.setAttribute("class",e.cl),e.bm&&(a.style["mix-blend-mode"]=getBlendMode(e.bm)),this.stylesList.push(n),this.addToAnimatedContents(e,r),r},SVGShapeElement.prototype.createGroupElement=function(e){var t=new ShapeGroupData;return e.ln&&t.gr.setAttribute("id",e.ln),e.cl&&t.gr.setAttribute("class",e.cl),e.bm&&(t.gr.style["mix-blend-mode"]=getBlendMode(e.bm)),t},SVGShapeElement.prototype.createTransformElement=function(e,t){var r=TransformPropertyFactory.getTransformProperty(this,e,this),n=new SVGTransformData(r,r.o,t);return this.addToAnimatedContents(e,n),n},SVGShapeElement.prototype.createShapeElement=function(e,t,r){var n=4;"rc"===e.ty?n=5:"el"===e.ty?n=6:"sr"===e.ty&&(n=7);var a=new SVGShapeData(t,r,ShapePropertyFactory.getShapeProp(this,e,n,this));return this.shapes.push(a),this.addShapeToModifiers(a),this.addToAnimatedContents(e,a),a},SVGShapeElement.prototype.addToAnimatedContents=function(e,t){for(var r=0,n=this.animatedContents.length;r<n;){if(this.animatedContents[r].element===t)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(e),element:t,data:e})},SVGShapeElement.prototype.setElementStyles=function(e){var t,r=e.styles,n=this.stylesList.length;for(t=0;t<n;t+=1)this.stylesList[t].closed||r.push(this.stylesList[t])},SVGShapeElement.prototype.reloadShapes=function(){var e;this._isFirstFrame=!0;var t=this.itemsData.length;for(e=0;e<t;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),t=this.dynamicProperties.length,e=0;e<t;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(e,t,r,n,a,i,o){var s,l,c,u,f,p,h=[].concat(i),d=e.length-1,m=[],y=[];for(s=d;s>=0;s-=1){if((p=this.searchProcessedElement(e[s]))?t[s]=r[p-1]:e[s]._render=o,"fl"===e[s].ty||"st"===e[s].ty||"gf"===e[s].ty||"gs"===e[s].ty||"no"===e[s].ty)p?t[s].style.closed=!1:t[s]=this.createStyleElement(e[s],a),e[s]._render&&t[s].style.pElem.parentNode!==n&&n.appendChild(t[s].style.pElem),m.push(t[s].style);else if("gr"===e[s].ty){if(p)for(c=t[s].it.length,l=0;l<c;l+=1)t[s].prevViewData[l]=t[s].it[l];else t[s]=this.createGroupElement(e[s]);this.searchShapes(e[s].it,t[s].it,t[s].prevViewData,t[s].gr,a+1,h,o),e[s]._render&&t[s].gr.parentNode!==n&&n.appendChild(t[s].gr)}else"tr"===e[s].ty?(p||(t[s]=this.createTransformElement(e[s],n)),u=t[s].transform,h.push(u)):"sh"===e[s].ty||"rc"===e[s].ty||"el"===e[s].ty||"sr"===e[s].ty?(p||(t[s]=this.createShapeElement(e[s],h,a)),this.setElementStyles(t[s])):"tm"===e[s].ty||"rd"===e[s].ty||"ms"===e[s].ty||"pb"===e[s].ty||"zz"===e[s].ty||"op"===e[s].ty?(p?(f=t[s]).closed=!1:((f=ShapeModifiers.getModifier(e[s].ty)).init(this,e[s]),t[s]=f,this.shapeModifiers.push(f)),y.push(f)):"rp"===e[s].ty&&(p?(f=t[s]).closed=!0:(f=ShapeModifiers.getModifier(e[s].ty),t[s]=f,f.init(this,e,s,t),this.shapeModifiers.push(f),o=!1),y.push(f));this.addProcessedElement(e[s],s+1)}for(d=m.length,s=0;s<d;s+=1)m[s].closed=!0;for(d=y.length,s=0;s<d;s+=1)y[s].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var e;this.renderModifiers();var t=this.stylesList.length;for(e=0;e<t;e+=1)this.stylesList[e].reset();for(this.renderShape(),e=0;e<t;e+=1)(this.stylesList[e]._mdf||this._isFirstFrame)&&(this.stylesList[e].msElem&&(this.stylesList[e].msElem.setAttribute("d",this.stylesList[e].d),this.stylesList[e].d="M0 0"+this.stylesList[e].d),this.stylesList[e].pElem.setAttribute("d",this.stylesList[e].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var e,t,r=this.animatedContents.length;for(e=0;e<r;e+=1)t=this.animatedContents[e],(this._isFirstFrame||t.element._isAnimated)&&!0!==t.data&&t.fn(t.data,t.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},LetterProps.prototype.update=function(e,t,r,n,a,i){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var o=!1;return this.o!==e&&(this.o=e,this._mdf.o=!0,o=!0),this.sw!==t&&(this.sw=t,this._mdf.sw=!0,o=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,o=!0),this.fc!==n&&(this.fc=n,this._mdf.fc=!0,o=!0),this.m!==a&&(this.m=a,this._mdf.m=!0,o=!0),!i.length||this.p[0]===i[0]&&this.p[1]===i[1]&&this.p[4]===i[4]&&this.p[5]===i[5]&&this.p[12]===i[12]&&this.p[13]===i[13]||(this.p=i,this._mdf.p=!0,o=!0),o},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},TextProperty.prototype.setCurrentData=function(e){e.__complete||this.completeTextData(e),this.currentData=e,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(e){this.effectsSequence.push(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(e){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||e){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var t=this.currentData,r=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var n;this.lock=!0,this._mdf=!1;var a=this.effectsSequence.length,i=e||this.data.d.k[this.keysIndex].s;for(n=0;n<a;n+=1)i=r!==this.keysIndex?this.effectsSequence[n](i,i.t):this.effectsSequence[n](this.currentData,i.t);t!==i&&this.setCurrentData(i),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var e=this.data.d.k,t=this.elem.comp.renderedFrame,r=0,n=e.length;r<=n-1&&!(r===n-1||e[r+1].t>t);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(e){for(var t,r,n=[],a=0,i=e.length,o=!1,s=!1,l="";a<i;)o=s,s=!1,t=e.charCodeAt(a),l=e.charAt(a),FontManager.isCombinedCharacter(t)?o=!0:t>=55296&&t<=56319?FontManager.isRegionalFlag(e,a)?l=e.substr(a,14):(r=e.charCodeAt(a+1))>=56320&&r<=57343&&(FontManager.isModifier(t,r)?(l=e.substr(a,2),o=!0):l=FontManager.isFlagEmoji(e.substr(a,4))?e.substr(a,4):e.substr(a,2)):t>56319?(r=e.charCodeAt(a+1),FontManager.isVariationSelector(t)&&(o=!0)):FontManager.isZeroWidthJoiner(t)&&(o=!0,s=!0),o?(n[n.length-1]+=l,o=!1):n.push(l),a+=l.length;return n},TextProperty.prototype.completeTextData=function(e){e.__complete=!0;var t,r,n,a,i,o,s,l=this.elem.globalData.fontManager,c=this.data,u=[],f=0,p=c.m.g,h=0,d=0,m=0,y=[],g=0,v=0,_=l.getFontByName(e.f),b=0,x=getFontProperties(_);e.fWeight=x.weight,e.fStyle=x.style,e.finalSize=e.s,e.finalText=this.buildFinalText(e.t),r=e.finalText.length,e.finalLineHeight=e.lh;var S,C=e.tr/1e3*e.finalSize;if(e.sz)for(var P,w,k=!0,D=e.sz[0],E=e.sz[1];k;){P=0,g=0,r=(w=this.buildFinalText(e.t)).length,C=e.tr/1e3*e.finalSize;var A=-1;for(t=0;t<r;t+=1)S=w[t].charCodeAt(0),n=!1," "===w[t]?A=t:13!==S&&3!==S||(g=0,n=!0,P+=e.finalLineHeight||1.2*e.finalSize),l.chars?(s=l.getCharData(w[t],_.fStyle,_.fFamily),b=n?0:s.w*e.finalSize/100):b=l.measureText(w[t],e.f,e.finalSize),g+b>D&&" "!==w[t]?(-1===A?r+=1:t=A,P+=e.finalLineHeight||1.2*e.finalSize,w.splice(t,A===t?1:0,"\r"),A=-1,g=0):(g+=b,g+=C);P+=_.ascent*e.finalSize/100,this.canResize&&e.finalSize>this.minimumFontSize&&E<P?(e.finalSize-=1,e.finalLineHeight=e.finalSize*e.lh/e.s):(e.finalText=w,r=e.finalText.length,k=!1)}g=-C,b=0;var T,M=0;for(t=0;t<r;t+=1)if(n=!1,13===(S=(T=e.finalText[t]).charCodeAt(0))||3===S?(M=0,y.push(g),v=g>v?g:v,g=-2*C,a="",n=!0,m+=1):a=T,l.chars?(s=l.getCharData(T,_.fStyle,l.getFontByName(e.f).fFamily),b=n?0:s.w*e.finalSize/100):b=l.measureText(a,e.f,e.finalSize)," "===T?M+=b+C:(g+=b+C+M,M=0),u.push({l:b,an:b,add:h,n,anIndexes:[],val:a,line:m,animatorJustifyOffset:0}),2==p){if(h+=b,""===a||" "===a||t===r-1){for(""!==a&&" "!==a||(h-=b);d<=t;)u[d].an=h,u[d].ind=f,u[d].extra=b,d+=1;f+=1,h=0}}else if(3==p){if(h+=b,""===a||t===r-1){for(""===a&&(h-=b);d<=t;)u[d].an=h,u[d].ind=f,u[d].extra=b,d+=1;h=0,f+=1}}else u[f].ind=f,u[f].extra=0,f+=1;if(e.l=u,v=g>v?g:v,y.push(g),e.sz)e.boxWidth=e.sz[0],e.justifyOffset=0;else switch(e.boxWidth=v,e.j){case 1:e.justifyOffset=-e.boxWidth;break;case 2:e.justifyOffset=-e.boxWidth/2;break;default:e.justifyOffset=0}e.lineWidths=y;var O,F,I,R,j=c.a;o=j.length;var L=[];for(i=0;i<o;i+=1){for((O=j[i]).a.sc&&(e.strokeColorAnim=!0),O.a.sw&&(e.strokeWidthAnim=!0),(O.a.fc||O.a.fh||O.a.fs||O.a.fb)&&(e.fillColorAnim=!0),R=0,I=O.s.b,t=0;t<r;t+=1)(F=u[t]).anIndexes[i]=R,(1==I&&""!==F.val||2==I&&""!==F.val&&" "!==F.val||3==I&&(F.n||" "==F.val||t==r-1)||4==I&&(F.n||t==r-1))&&(1===O.s.rn&&L.push(R),R+=1);c.a[i].s.totalChars=R;var B,N=-1;if(1===O.s.rn)for(t=0;t<r;t+=1)N!=(F=u[t]).anIndexes[i]&&(N=F.anIndexes[i],B=L.splice(Math.floor(Math.random()*L.length),1)[0]),F.anIndexes[i]=B}e.yOffset=e.finalLineHeight||1.2*e.finalSize,e.ls=e.ls||0,e.ascent=_.ascent*e.finalSize/100},TextProperty.prototype.updateDocumentData=function(e,t){t=void 0===t?this.keysIndex:t;var r=this.copyData({},this.data.d.k[t].s);r=this.copyData(r,e),this.data.d.k[t].s=r,this.recalculate(t),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(e){var t=this.data.d.k[e].s;t.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(t)},TextProperty.prototype.canResizeFont=function(e){this.canResize=e,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(e){this.minimumFontSize=Math.floor(e)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var e=Math.max,t=Math.min,r=Math.floor;function n(e,t){this._currentTextLength=-1,this.k=!1,this.data=t,this.elem=e,this.comp=e.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(e),this.s=PropertyFactory.getProp(e,t.s||{k:0},0,0,this),this.e="e"in t?PropertyFactory.getProp(e,t.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(e,t.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(e,t.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(e,t.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(e,t.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(e,t.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return n.prototype={getMult:function(n){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var a=0,i=0,o=1,s=1;this.ne.v>0?a=this.ne.v/100:i=-this.ne.v/100,this.xe.v>0?o=1-this.xe.v/100:s=1+this.xe.v/100;var l=BezierFactory.getBezierEasing(a,i,o,s).get,c=0,u=this.finalS,f=this.finalE,p=this.data.sh;if(2===p)c=l(c=f===u?n>=f?1:0:e(0,t(.5/(f-u)+(n-u)/(f-u),1)));else if(3===p)c=l(c=f===u?n>=f?0:1:1-e(0,t(.5/(f-u)+(n-u)/(f-u),1)));else if(4===p)f===u?c=0:(c=e(0,t(.5/(f-u)+(n-u)/(f-u),1)))<.5?c*=2:c=1-2*(c-.5),c=l(c);else if(5===p){if(f===u)c=0;else{var h=f-u,d=-h/2+(n=t(e(0,n+.5-u),f-u)),m=h/2;c=Math.sqrt(1-d*d/(m*m))}c=l(c)}else 6===p?(f===u?c=0:(n=t(e(0,n+.5-u),f-u),c=(1+Math.cos(Math.PI+2*Math.PI*n/(f-u)))/2),c=l(c)):(n>=r(u)&&(c=e(0,t(n-u<0?t(f,1)-(u-n):f-n,1))),c=l(c));if(100!==this.sm.v){var y=.01*this.sm.v;0===y&&(y=1e-8);var g=.5-.5*y;c<g?c=0:(c=(c-g)/y)>1&&(c=1)}return c*this.a.v},getValue:function(e){this.iterateDynamicProperties(),this._mdf=e||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,e&&2===this.data.r&&(this.e.v=this._currentTextLength);var t=2===this.data.r?1:100/this.data.totalChars,r=this.o.v/t,n=this.s.v/t+r,a=this.e.v/t+r;if(n>a){var i=n;n=a,a=i}this.finalS=n,this.finalE=a}},extendPrototype([DynamicPropertyContainer],n),{getTextSelectorProp:function(e,t,r){return new n(e,t,r)}}}();function TextAnimatorDataProperty(e,t,r){var n={propType:!1},a=PropertyFactory.getProp,i=t.a;this.a={r:i.r?a(e,i.r,0,degToRads,r):n,rx:i.rx?a(e,i.rx,0,degToRads,r):n,ry:i.ry?a(e,i.ry,0,degToRads,r):n,sk:i.sk?a(e,i.sk,0,degToRads,r):n,sa:i.sa?a(e,i.sa,0,degToRads,r):n,s:i.s?a(e,i.s,1,.01,r):n,a:i.a?a(e,i.a,1,0,r):n,o:i.o?a(e,i.o,0,.01,r):n,p:i.p?a(e,i.p,1,0,r):n,sw:i.sw?a(e,i.sw,0,0,r):n,sc:i.sc?a(e,i.sc,1,0,r):n,fc:i.fc?a(e,i.fc,1,0,r):n,fh:i.fh?a(e,i.fh,0,0,r):n,fs:i.fs?a(e,i.fs,0,.01,r):n,fb:i.fb?a(e,i.fb,0,.01,r):n,t:i.t?a(e,i.t,0,0,r):n},this.s=TextSelectorProp.getTextSelectorProp(e,t.s,r),this.s.t=t.s.t}function TextAnimatorProperty(e,t,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=e,this._renderType=t,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}function ITextElement(){}TextAnimatorProperty.prototype.searchProperties=function(){var e,t,r=this._textData.a.length,n=PropertyFactory.getProp;for(e=0;e<r;e+=1)t=this._textData.a[e],this._animatorsData[e]=new TextAnimatorDataProperty(this._elem,t,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:n(this._elem,this._textData.p.a,0,0,this),f:n(this._elem,this._textData.p.f,0,0,this),l:n(this._elem,this._textData.p.l,0,0,this),r:n(this._elem,this._textData.p.r,0,0,this),p:n(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=n(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(e,t){if(this.lettersChangedFlag=t,this._mdf||this._isFirstFrame||t||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var r,n,a,i,o,s,l,c,u,f,p,h,d,m,y,g,v,_,b,x=this._moreOptions.alignment.v,S=this._animatorsData,C=this._textData,P=this.mHelper,w=this._renderType,k=this.renderedLetters.length,D=e.l;if(this._hasMaskedPath){if(b=this._pathData.m,!this._pathData.n||this._pathData._mdf){var E,A=b.v;for(this._pathData.r.v&&(A=A.reverse()),o={tLength:0,segments:[]},i=A._length-1,g=0,a=0;a<i;a+=1)E=bez.buildBezierData(A.v[a],A.v[a+1],[A.o[a][0]-A.v[a][0],A.o[a][1]-A.v[a][1]],[A.i[a+1][0]-A.v[a+1][0],A.i[a+1][1]-A.v[a+1][1]]),o.tLength+=E.segmentLength,o.segments.push(E),g+=E.segmentLength;a=i,b.v.c&&(E=bez.buildBezierData(A.v[a],A.v[0],[A.o[a][0]-A.v[a][0],A.o[a][1]-A.v[a][1]],[A.i[0][0]-A.v[0][0],A.i[0][1]-A.v[0][1]]),o.tLength+=E.segmentLength,o.segments.push(E),g+=E.segmentLength),this._pathData.pi=o}if(o=this._pathData.pi,s=this._pathData.f.v,p=0,f=1,c=0,u=!0,m=o.segments,s<0&&b.v.c)for(o.tLength<Math.abs(s)&&(s=-Math.abs(s)%o.tLength),f=(d=m[p=m.length-1].points).length-1;s<0;)s+=d[f].partialLength,(f-=1)<0&&(f=(d=m[p-=1].points).length-1);h=(d=m[p].points)[f-1],y=(l=d[f]).partialLength}i=D.length,r=0,n=0;var T,M,O,F,I,R=1.2*e.finalSize*.714,j=!0;O=S.length;var L,B,N,G,V,U,z,H,W,$,K,q,Y=-1,X=s,Q=p,Z=f,J=-1,ee="",te=this.defaultPropsArray;if(2===e.j||1===e.j){var re=0,ne=0,ae=2===e.j?-.5:-1,ie=0,oe=!0;for(a=0;a<i;a+=1)if(D[a].n){for(re&&(re+=ne);ie<a;)D[ie].animatorJustifyOffset=re,ie+=1;re=0,oe=!0}else{for(M=0;M<O;M+=1)(T=S[M].a).t.propType&&(oe&&2===e.j&&(ne+=T.t.v*ae),(I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars)).length?re+=T.t.v*I[0]*ae:re+=T.t.v*I*ae);oe=!1}for(re&&(re+=ne);ie<a;)D[ie].animatorJustifyOffset=re,ie+=1}for(a=0;a<i;a+=1){if(P.reset(),G=1,D[a].n)r=0,n+=e.yOffset,n+=j?1:0,s=X,j=!1,this._hasMaskedPath&&(f=Z,h=(d=m[p=Q].points)[f-1],y=(l=d[f]).partialLength,c=0),ee="",K="",W="",q="",te=this.defaultPropsArray;else{if(this._hasMaskedPath){if(J!==D[a].line){switch(e.j){case 1:s+=g-e.lineWidths[D[a].line];break;case 2:s+=(g-e.lineWidths[D[a].line])/2}J=D[a].line}Y!==D[a].ind&&(D[Y]&&(s+=D[Y].extra),s+=D[a].an/2,Y=D[a].ind),s+=x[0]*D[a].an*.005;var se=0;for(M=0;M<O;M+=1)(T=S[M].a).p.propType&&((I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars)).length?se+=T.p.v[0]*I[0]:se+=T.p.v[0]*I),T.a.propType&&((I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars)).length?se+=T.a.v[0]*I[0]:se+=T.a.v[0]*I);for(u=!0,this._pathData.a.v&&(s=.5*D[0].an+(g-this._pathData.f.v-.5*D[0].an-.5*D[D.length-1].an)*Y/(i-1),s+=this._pathData.f.v);u;)c+y>=s+se||!d?(v=(s+se-c)/l.partialLength,B=h.point[0]+(l.point[0]-h.point[0])*v,N=h.point[1]+(l.point[1]-h.point[1])*v,P.translate(-x[0]*D[a].an*.005,-x[1]*R*.01),u=!1):d&&(c+=l.partialLength,(f+=1)>=d.length&&(f=0,m[p+=1]?d=m[p].points:b.v.c?(f=0,d=m[p=0].points):(c-=l.partialLength,d=null)),d&&(h=l,y=(l=d[f]).partialLength));L=D[a].an/2-D[a].add,P.translate(-L,0,0)}else L=D[a].an/2-D[a].add,P.translate(-L,0,0),P.translate(-x[0]*D[a].an*.005,-x[1]*R*.01,0);for(M=0;M<O;M+=1)(T=S[M].a).t.propType&&(I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars),0===r&&0===e.j||(this._hasMaskedPath?I.length?s+=T.t.v*I[0]:s+=T.t.v*I:I.length?r+=T.t.v*I[0]:r+=T.t.v*I));for(e.strokeWidthAnim&&(U=e.sw||0),e.strokeColorAnim&&(V=e.sc?[e.sc[0],e.sc[1],e.sc[2]]:[0,0,0]),e.fillColorAnim&&e.fc&&(z=[e.fc[0],e.fc[1],e.fc[2]]),M=0;M<O;M+=1)(T=S[M].a).a.propType&&((I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars)).length?P.translate(-T.a.v[0]*I[0],-T.a.v[1]*I[1],T.a.v[2]*I[2]):P.translate(-T.a.v[0]*I,-T.a.v[1]*I,T.a.v[2]*I));for(M=0;M<O;M+=1)(T=S[M].a).s.propType&&((I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars)).length?P.scale(1+(T.s.v[0]-1)*I[0],1+(T.s.v[1]-1)*I[1],1):P.scale(1+(T.s.v[0]-1)*I,1+(T.s.v[1]-1)*I,1));for(M=0;M<O;M+=1){if(T=S[M].a,I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars),T.sk.propType&&(I.length?P.skewFromAxis(-T.sk.v*I[0],T.sa.v*I[1]):P.skewFromAxis(-T.sk.v*I,T.sa.v*I)),T.r.propType&&(I.length?P.rotateZ(-T.r.v*I[2]):P.rotateZ(-T.r.v*I)),T.ry.propType&&(I.length?P.rotateY(T.ry.v*I[1]):P.rotateY(T.ry.v*I)),T.rx.propType&&(I.length?P.rotateX(T.rx.v*I[0]):P.rotateX(T.rx.v*I)),T.o.propType&&(I.length?G+=(T.o.v*I[0]-G)*I[0]:G+=(T.o.v*I-G)*I),e.strokeWidthAnim&&T.sw.propType&&(I.length?U+=T.sw.v*I[0]:U+=T.sw.v*I),e.strokeColorAnim&&T.sc.propType)for(H=0;H<3;H+=1)I.length?V[H]+=(T.sc.v[H]-V[H])*I[0]:V[H]+=(T.sc.v[H]-V[H])*I;if(e.fillColorAnim&&e.fc){if(T.fc.propType)for(H=0;H<3;H+=1)I.length?z[H]+=(T.fc.v[H]-z[H])*I[0]:z[H]+=(T.fc.v[H]-z[H])*I;T.fh.propType&&(z=I.length?addHueToRGB(z,T.fh.v*I[0]):addHueToRGB(z,T.fh.v*I)),T.fs.propType&&(z=I.length?addSaturationToRGB(z,T.fs.v*I[0]):addSaturationToRGB(z,T.fs.v*I)),T.fb.propType&&(z=I.length?addBrightnessToRGB(z,T.fb.v*I[0]):addBrightnessToRGB(z,T.fb.v*I))}}for(M=0;M<O;M+=1)(T=S[M].a).p.propType&&(I=S[M].s.getMult(D[a].anIndexes[M],C.a[M].s.totalChars),this._hasMaskedPath?I.length?P.translate(0,T.p.v[1]*I[0],-T.p.v[2]*I[1]):P.translate(0,T.p.v[1]*I,-T.p.v[2]*I):I.length?P.translate(T.p.v[0]*I[0],T.p.v[1]*I[1],-T.p.v[2]*I[2]):P.translate(T.p.v[0]*I,T.p.v[1]*I,-T.p.v[2]*I));if(e.strokeWidthAnim&&(W=U<0?0:U),e.strokeColorAnim&&($="rgb("+Math.round(255*V[0])+","+Math.round(255*V[1])+","+Math.round(255*V[2])+")"),e.fillColorAnim&&e.fc&&(K="rgb("+Math.round(255*z[0])+","+Math.round(255*z[1])+","+Math.round(255*z[2])+")"),this._hasMaskedPath){if(P.translate(0,-e.ls),P.translate(0,x[1]*R*.01+n,0),this._pathData.p.v){_=(l.point[1]-h.point[1])/(l.point[0]-h.point[0]);var le=180*Math.atan(_)/Math.PI;l.point[0]<h.point[0]&&(le+=180),P.rotate(-le*Math.PI/180)}P.translate(B,N,0),s-=x[0]*D[a].an*.005,D[a+1]&&Y!==D[a+1].ind&&(s+=D[a].an/2,s+=.001*e.tr*e.finalSize)}else{switch(P.translate(r,n,0),e.ps&&P.translate(e.ps[0],e.ps[1]+e.ascent,0),e.j){case 1:P.translate(D[a].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[D[a].line]),0,0);break;case 2:P.translate(D[a].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[D[a].line])/2,0,0)}P.translate(0,-e.ls),P.translate(L,0,0),P.translate(x[0]*D[a].an*.005,x[1]*R*.01,0),r+=D[a].l+.001*e.tr*e.finalSize}"html"===w?ee=P.toCSS():"svg"===w?ee=P.to2dCSS():te=[P.props[0],P.props[1],P.props[2],P.props[3],P.props[4],P.props[5],P.props[6],P.props[7],P.props[8],P.props[9],P.props[10],P.props[11],P.props[12],P.props[13],P.props[14],P.props[15]],q=G}k<=a?(F=new LetterProps(q,W,$,K,ee,te),this.renderedLetters.push(F),k+=1,this.lettersChangedFlag=!0):(F=this.renderedLetters[a],this.lettersChangedFlag=F.update(q,W,$,K,ee,te)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),ITextElement.prototype.initElement=function(e,t,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(e,t,r),this.textProperty=new TextProperty(this,e.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(e.t,this.renderType,this),this.initTransform(e,t,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(e){this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)},ITextElement.prototype.createPathShape=function(e,t){var r,n,a=t.length,i="";for(r=0;r<a;r+=1)"sh"===t[r].ty&&(n=t[r].ks.k,i+=buildShapeString(n,n.i.length,!0,e));return i},ITextElement.prototype.updateDocumentData=function(e,t){this.textProperty.updateDocumentData(e,t)},ITextElement.prototype.canResizeFont=function(e){this.textProperty.canResizeFont(e)},ITextElement.prototype.setMinimumFontSize=function(e){this.textProperty.setMinimumFontSize(e)},ITextElement.prototype.applyTextPropertiesToMatrix=function(e,t,r,n,a){switch(e.ps&&t.translate(e.ps[0],e.ps[1]+e.ascent,0),t.translate(0,-e.ls,0),e.j){case 1:t.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[r]),0,0);break;case 2:t.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[r])/2,0,0)}t.translate(n,a,0)},ITextElement.prototype.buildColor=function(e){return"rgb("+Math.round(255*e[0])+","+Math.round(255*e[1])+","+Math.round(255*e[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(e,t,r){this.textSpans=[],this.renderType="svg",this.initElement(e,t,r)}function ISolidElement(e,t,r){this.initElement(e,t,r)}function NullElement(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initFrame(),this.initTransform(e,t,r),this.initHierarchy()}function SVGRendererBase(){}function ICompElement(){}function SVGCompElement(e,t,r){this.layers=e.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,t,r),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}function SVGRenderer(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(t&&t.title){var n=createNS("title"),a=createElementID();n.setAttribute("id",a),n.textContent=t.title,this.svgElement.appendChild(n),r+=a}if(t&&t.description){var i=createNS("desc"),o=createElementID();i.setAttribute("id",o),i.textContent=t.description,this.svgElement.appendChild(i),r+=" "+o}r&&this.svgElement.setAttribute("aria-labelledby",r);var s=createNS("defs");this.svgElement.appendChild(s);var l=createNS("g");this.svgElement.appendChild(l),this.layerElement=l,this.renderConfig={preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",progressiveLoad:t&&t.progressiveLoad||!1,hideOnTransparent:!(t&&!1===t.hideOnTransparent),viewBoxOnly:t&&t.viewBoxOnly||!1,viewBoxSize:t&&t.viewBoxSize||!1,className:t&&t.className||"",id:t&&t.id||"",focusable:t&&t.focusable,filterSize:{width:t&&t.filterSize&&t.filterSize.width||"100%",height:t&&t.filterSize&&t.filterSize.height||"100%",x:t&&t.filterSize&&t.filterSize.x||"0%",y:t&&t.filterSize&&t.filterSize.y||"0%"},width:t&&t.width,height:t&&t.height,runExpressions:!t||void 0===t.runExpressions||t.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:s,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(e){for(var t=0,r=e.length,n=[],a="";t<r;)e[t]===String.fromCharCode(13)||e[t]===String.fromCharCode(3)?(n.push(a),a=""):a+=e[t],t+=1;return n.push(a),n},SVGTextLottieElement.prototype.buildShapeData=function(e,t){if(e.shapes&&e.shapes.length){var r=e.shapes[0];if(r.it){var n=r.it[r.it.length-1];n.s&&(n.s.k[0]=t,n.s.k[1]=t)}}return e},SVGTextLottieElement.prototype.buildNewText=function(){var e,t;this.addDynamicProperty(this);var r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var n=this.globalData.fontManager.getFontByName(r.f);if(n.fClass)this.layerElement.setAttribute("class",n.fClass);else{this.layerElement.setAttribute("font-family",n.fFamily);var a=r.fWeight,i=r.fStyle;this.layerElement.setAttribute("font-style",i),this.layerElement.setAttribute("font-weight",a)}this.layerElement.setAttribute("aria-label",r.t);var o,s=r.l||[],l=!!this.globalData.fontManager.chars;t=s.length;var c=this.mHelper,u=this.data.singleShape,f=0,p=0,h=!0,d=.001*r.tr*r.finalSize;if(!u||l||r.sz){var m,y=this.textSpans.length;for(e=0;e<t;e+=1){if(this.textSpans[e]||(this.textSpans[e]={span:null,childSpan:null,glyph:null}),!l||!u||0===e){if(o=y>e?this.textSpans[e].span:createNS(l?"g":"text"),y<=e){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[e].span=o,l){var g=createNS("g");o.appendChild(g),this.textSpans[e].childSpan=g}this.textSpans[e].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(c.reset(),u&&(s[e].n&&(f=-d,p+=r.yOffset,p+=h?1:0,h=!1),this.applyTextPropertiesToMatrix(r,c,s[e].line,f,p),f+=s[e].l||0,f+=d),l){var v;if(1===(m=this.globalData.fontManager.getCharData(r.finalText[e],n.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily)).t)v=new SVGCompElement(m.data,this.globalData,this);else{var _=emptyShapeData;m.data&&m.data.shapes&&(_=this.buildShapeData(m.data,r.finalSize)),v=new SVGShapeElement(_,this.globalData,this)}if(this.textSpans[e].glyph){var b=this.textSpans[e].glyph;this.textSpans[e].childSpan.removeChild(b.layerElement),b.destroy()}this.textSpans[e].glyph=v,v._debug=!0,v.prepareFrame(0),v.renderFrame(),this.textSpans[e].childSpan.appendChild(v.layerElement),1===m.t&&this.textSpans[e].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else u&&o.setAttribute("transform","translate("+c.props[12]+","+c.props[13]+")"),o.textContent=s[e].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}u&&o&&o.setAttribute("d","")}else{var x=this.textContainer,S="start";switch(r.j){case 1:S="end";break;case 2:S="middle";break;default:S="start"}x.setAttribute("text-anchor",S),x.setAttribute("letter-spacing",d);var C=this.buildTextContents(r.finalText);for(t=C.length,p=r.ps?r.ps[1]+r.ascent:0,e=0;e<t;e+=1)(o=this.textSpans[e].span||createNS("tspan")).textContent=C[e],o.setAttribute("x",0),o.setAttribute("y",p),o.style.display="inherit",x.appendChild(o),this.textSpans[e]||(this.textSpans[e]={span:null,glyph:null}),this.textSpans[e].span=o,p+=r.finalLineHeight;this.layerElement.appendChild(x)}for(;e<this.textSpans.length;)this.textSpans[e].span.style.display="none",e+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var e=this.layerElement.getBBox();this.bbox={top:e.y,left:e.x,width:e.width,height:e.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var e,t,r=this.textSpans.length;for(this.renderedFrame=this.comp.renderedFrame,e=0;e<r;e+=1)(t=this.textSpans[e].glyph)&&(t.prepareFrame(this.comp.renderedFrame-this.data.st),t._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var e,t;this._sizeChanged=!0;var r,n,a,i=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;for(t=o.length,e=0;e<t;e+=1)o[e].n||(r=i[e],n=this.textSpans[e].span,(a=this.textSpans[e].glyph)&&a.renderFrame(),r._mdf.m&&n.setAttribute("transform",r.m),r._mdf.o&&n.setAttribute("opacity",r.o),r._mdf.sw&&n.setAttribute("stroke-width",r.sw),r._mdf.sc&&n.setAttribute("stroke",r.sc),r._mdf.fc&&n.setAttribute("fill",r.fc))}},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var e=createNS("rect");e.setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.layerElement.appendChild(e)},NullElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(e){return new NullElement(e,this.globalData,this)},SVGRendererBase.prototype.createShape=function(e){return new SVGShapeElement(e,this.globalData,this)},SVGRendererBase.prototype.createText=function(e){return new SVGTextLottieElement(e,this.globalData,this)},SVGRendererBase.prototype.createImage=function(e){return new IImageElement(e,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(e){return new ISolidElement(e,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(e){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+e.w+" "+e.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",e.w),this.svgElement.setAttribute("height",e.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var t=this.globalData.defs;this.setupGlobalData(e,t),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=e;var r=createNS("clipPath"),n=createNS("rect");n.setAttribute("width",e.w),n.setAttribute("height",e.h),n.setAttribute("x",0),n.setAttribute("y",0);var a=createElementID();r.setAttribute("id",a),r.appendChild(n),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")"),t.appendChild(r),this.layers=e.layers,this.elements=createSizedArray(e.layers.length)},SVGRendererBase.prototype.destroy=function(){var e;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var t=this.layers?this.layers.length:0;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(e){var t=0,r=this.layers.length;for(t=0;t<r;t+=1)if(this.layers[t].ind===e)return t;return-1},SVGRendererBase.prototype.buildItem=function(e){var t=this.elements;if(!t[e]&&99!==this.layers[e].ty){t[e]=!0;var r=this.createItem(this.layers[e]);if(t[e]=r,getExpressionsPlugin()&&(0===this.layers[e].ty&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,e),this.layers[e].tt){var n="tp"in this.layers[e]?this.findIndexByInd(this.layers[e].tp):e-1;if(-1===n)return;if(this.elements[n]&&!0!==this.elements[n]){var a=t[n].getMatte(this.layers[e].tt);r.setMatte(a)}else this.buildItem(n),this.addPendingElement(r)}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();if(e.checkParenting(),e.data.tt)for(var t=0,r=this.elements.length;t<r;){if(this.elements[t]===e){var n="tp"in e.data?this.findIndexByInd(e.data.tp):t-1,a=this.elements[n].getMatte(this.layers[t].tt);e.setMatte(a);break}t+=1}}},SVGRendererBase.prototype.renderFrame=function(e){if(this.renderedFrame!==e&&!this.destroyed){var t;null===e?e=this.renderedFrame:this.renderedFrame=e,this.globalData.frameNum=e,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=e,this.globalData._mdf=!1;var r=this.layers.length;for(this.completeLayers||this.checkLayers(e),t=r-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].prepareFrame(e-this.layers[t].st);if(this.globalData._mdf)for(t=0;t<r;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(e,t){var r=e.getBaseElement();if(r){for(var n,a=0;a<t;)this.elements[a]&&!0!==this.elements[a]&&this.elements[a].getBaseElement()&&(n=this.elements[a].getBaseElement()),a+=1;n?this.layerElement.insertBefore(r,n):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initTransform(e,t,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&t.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(e){if(this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=e/this.data.sr;else{var t=this.tm.v;t===this.data.op&&(t=this.data.op-1),this.renderedFrame=t}var r,n=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},ICompElement.prototype.setElements=function(e){this.elements=e},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)},extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)},ShapeTransformManager.prototype={addTransformSequence:function(e){var t,r=e.length,n="_";for(t=0;t<r;t+=1)n+=e[t].transform.key+"_";var a=this.sequences[n];return a||(a={transforms:[].concat(e),finalTransform:new Matrix,_mdf:!1},this.sequences[n]=a,this.sequenceList.push(a)),a},processSequence:function(e,t){for(var r=0,n=e.transforms.length,a=t;r<n&&!t;){if(e.transforms[r].transform.mProps._mdf){a=!0;break}r+=1}if(a)for(e.finalTransform.reset(),r=n-1;r>=0;r-=1)e.finalTransform.multiply(e.transforms[r].transform.mProps.v);e._mdf=a},processSequences:function(e){var t,r=this.sequenceList.length;for(t=0;t<r;t+=1)this.processSequence(this.sequenceList[t],e)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var e="__lottie_element_luma_buffer",t=null,r=null,n=null;function a(){var a,i,o;t||(a=createNS("svg"),i=createNS("filter"),o=createNS("feColorMatrix"),i.setAttribute("id",e),o.setAttribute("type","matrix"),o.setAttribute("color-interpolation-filters","sRGB"),o.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),i.appendChild(o),a.appendChild(i),a.setAttribute("id",e+"_svg"),featureSupport.svgLumaHidden&&(a.style.display="none"),n=a,document.body.appendChild(n),t=createTag("canvas"),(r=t.getContext("2d")).filter="url(#"+e+")",r.fillStyle="rgba(0,0,0,0)",r.fillRect(0,0,1,1))}return{load:a,get:function(n){return t||a(),t.width=n.width,t.height=n.height,r.filter="url(#"+e+")",t}}};function createCanvas(e,t){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(e,t);var r=createTag("canvas");return r.width=e,r.height=t,r}var assetLoader={loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas},registeredEffects={};function CVEffects(e){var t,r,n=e.data.ef?e.data.ef.length:0;for(this.filters=[],t=0;t<n;t+=1){r=null;var a=e.data.ef[t].ty;registeredEffects[a]&&(r=new(0,registeredEffects[a].effect)(e.effectsManager.effectElements[t],e)),r&&this.filters.push(r)}this.filters.length&&e.addRenderableComponent(this)}function registerEffect(e,t){registeredEffects[e]={effect:t}}function CVMaskElement(e,t){var r;this.data=e,this.element=t,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var n=this.masksProperties.length,a=!1;for(r=0;r<n;r+=1)"n"!==this.masksProperties[r].mode&&(a=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=a,a&&this.element.addRenderableComponent(this)}function CVBaseElement(){}CVEffects.prototype.renderFrame=function(e){var t,r=this.filters.length;for(t=0;t<r;t+=1)this.filters[t].renderFrame(e)},CVEffects.prototype.getEffects=function(e){var t,r=this.filters.length,n=[];for(t=0;t<r;t+=1)this.filters[t].type===e&&n.push(this.filters[t]);return n},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var e,t,r,n,a=this.element.finalTransform.mat,i=this.element.canvasContext,o=this.masksProperties.length;for(i.beginPath(),e=0;e<o;e+=1)if("n"!==this.masksProperties[e].mode){var s;this.masksProperties[e].inv&&(i.moveTo(0,0),i.lineTo(this.element.globalData.compSize.w,0),i.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),i.lineTo(0,this.element.globalData.compSize.h),i.lineTo(0,0)),n=this.viewData[e].v,t=a.applyToPointArray(n.v[0][0],n.v[0][1],0),i.moveTo(t[0],t[1]);var l=n._length;for(s=1;s<l;s+=1)r=a.applyToTriplePoints(n.o[s-1],n.i[s],n.v[s]),i.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);r=a.applyToTriplePoints(n.o[s-1],n.i[0],n.v[0]),i.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5])}this.element.globalData.renderer.save(!0),i.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};function CVShapeData(e,t,r,n){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var a,i=4;"rc"===t.ty?i=5:"el"===t.ty?i=6:"sr"===t.ty&&(i=7),this.sh=ShapePropertyFactory.getShapeProp(e,t,i,e);var o,s=r.length;for(a=0;a<s;a+=1)r[a].closed||(o={transforms:n.addTransformSequence(r[a].transforms),trNodes:[]},this.styledShapes.push(o),r[a].elements.push(o))}function CVShapeElement(e,t,r){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(e,t,r)}function CVTextElement(e,t,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(e,t,r)}function CVImageElement(e,t,r){this.assetData=t.getAssetData(e.refId),this.img=t.imageLoader.getAsset(this.assetData),this.initElement(e,t,r)}function CVSolidElement(e,t,r){this.initElement(e,t,r)}function CanvasRendererBase(){}function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){var e;for(this.stack=[],this.cArrPos=0,this.cTr=new Matrix,e=0;e<15;e+=1){var t=new CanvasContext;this.stack[e]=t}this._length=15,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}function CVCompElement(e,t,r){this.completeLayers=!1,this.layers=e.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(e,t,r),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}function CanvasRenderer(e,t){this.animationItem=e,this.renderConfig={clearCanvas:!t||void 0===t.clearCanvas||t.clearCanvas,context:t&&t.context||null,progressiveLoad:t&&t.progressiveLoad||!1,preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",className:t&&t.className||"",id:t&&t.id||"",runExpressions:!t||void 0===t.runExpressions||t.runExpressions},this.renderConfig.dpr=t&&t.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=t&&t.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}function HBaseElement(){}function HSolidElement(e,t,r){this.initElement(e,t,r)}function HShapeElement(e,t,r){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(e,t,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(e,t,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(e,t,r)}function HCameraElement(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initHierarchy();var n=PropertyFactory.getProp;if(this.pe=n(this,e.pe,0,0,this),e.ks.p.s?(this.px=n(this,e.ks.p.x,1,0,this),this.py=n(this,e.ks.p.y,1,0,this),this.pz=n(this,e.ks.p.z,1,0,this)):this.p=n(this,e.ks.p,1,0,this),e.ks.a&&(this.a=n(this,e.ks.a,1,0,this)),e.ks.or.k.length&&e.ks.or.k[0].to){var a,i=e.ks.or.k.length;for(a=0;a<i;a+=1)e.ks.or.k[a].to=null,e.ks.or.k[a].ti=null}this.or=n(this,e.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=n(this,e.ks.rx,0,degToRads,this),this.ry=n(this,e.ks.ry,0,degToRads,this),this.rz=n(this,e.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HImageElement(e,t,r){this.assetData=t.getAssetData(e.refId),this.initElement(e,t,r)}function HybridRendererBase(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:t&&t.className||"",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(t&&!1===t.hideOnTransparent),filterSize:{width:t&&t.filterSize&&t.filterSize.width||"400%",height:t&&t.filterSize&&t.filterSize.height||"400%",x:t&&t.filterSize&&t.filterSize.x||"-100%",y:t&&t.filterSize&&t.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function HCompElement(e,t,r){this.layers=e.layers,this.supports3d=!e.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,t,r),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}function HybridRenderer(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:t&&t.className||"",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(t&&!1===t.hideOnTransparent),filterSize:{width:t&&t.filterSize&&t.filterSize.width||"400%",height:t&&t.filterSize&&t.filterSize.height||"400%",x:t&&t.filterSize&&t.filterSize.x||"-100%",y:t&&t.filterSize&&t.filterSize.y||"-100%"},runExpressions:!t||void 0===t.runExpressions||t.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var e=this.globalData.canvasContext,t=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(t);var r=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(r),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var e=this.globalData;if(e.blendMode!==this.data.bm){e.blendMode=this.data.bm;var t=getBlendMode(this.data.bm);e.canvasContext.globalCompositeOperation=t}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(e){e.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var e=this.buffers[0].getContext("2d");this.clearCanvas(e),e.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var e=this.buffers[1],t=e.getContext("2d");if(this.clearCanvas(t),t.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform),this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1).renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var r=assetLoader.getLumaCanvas(this.canvasContext.canvas);r.getContext("2d").drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(r,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(e,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(e){if(!this.hidden&&!this.data.hd&&(1!==this.data.td||e)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var t=0===this.data.ty;this.prepareLayer(),this.globalData.renderer.save(t),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(t),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(e,t){var r={data:e,type:e.ty,preTransforms:this.transformsManager.addTransformSequence(t),transforms:[],elements:[],closed:!0===e.hd},n={};if("fl"===e.ty||"st"===e.ty?(n.c=PropertyFactory.getProp(this,e.c,1,255,this),n.c.k||(r.co="rgb("+bmFloor(n.c.v[0])+","+bmFloor(n.c.v[1])+","+bmFloor(n.c.v[2])+")")):"gf"!==e.ty&&"gs"!==e.ty||(n.s=PropertyFactory.getProp(this,e.s,1,null,this),n.e=PropertyFactory.getProp(this,e.e,1,null,this),n.h=PropertyFactory.getProp(this,e.h||{k:0},0,.01,this),n.a=PropertyFactory.getProp(this,e.a||{k:0},0,degToRads,this),n.g=new GradientProperty(this,e.g,this)),n.o=PropertyFactory.getProp(this,e.o,0,.01,this),"st"===e.ty||"gs"===e.ty){if(r.lc=lineCapEnum[e.lc||2],r.lj=lineJoinEnum[e.lj||2],1==e.lj&&(r.ml=e.ml),n.w=PropertyFactory.getProp(this,e.w,0,null,this),n.w.k||(r.wi=n.w.v),e.d){var a=new DashProperty(this,e.d,"canvas",this);n.d=a,n.d.k||(r.da=n.d.dashArray,r.do=n.d.dashoffset[0])}}else r.r=2===e.r?"evenodd":"nonzero";return this.stylesList.push(r),n.style=r,n},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(e){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,e.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,e,this)}}},CVShapeElement.prototype.createShapeElement=function(e){var t=new CVShapeData(this,e,this.stylesList,this.transformsManager);return this.shapes.push(t),this.addShapeToModifiers(t),t},CVShapeElement.prototype.reloadShapes=function(){var e;this._isFirstFrame=!0;var t=this.itemsData.length;for(e=0;e<t;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),t=this.dynamicProperties.length,e=0;e<t;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(e){var t,r=this.stylesList.length;for(t=0;t<r;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.push(e)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var e,t=this.stylesList.length;for(e=0;e<t;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.pop()},CVShapeElement.prototype.closeStyles=function(e){var t,r=e.length;for(t=0;t<r;t+=1)e[t].closed=!0},CVShapeElement.prototype.searchShapes=function(e,t,r,n,a){var i,o,s,l,c,u,f=e.length-1,p=[],h=[],d=[].concat(a);for(i=f;i>=0;i-=1){if((l=this.searchProcessedElement(e[i]))?t[i]=r[l-1]:e[i]._shouldRender=n,"fl"===e[i].ty||"st"===e[i].ty||"gf"===e[i].ty||"gs"===e[i].ty)l?t[i].style.closed=!1:t[i]=this.createStyleElement(e[i],d),p.push(t[i].style);else if("gr"===e[i].ty){if(l)for(s=t[i].it.length,o=0;o<s;o+=1)t[i].prevViewData[o]=t[i].it[o];else t[i]=this.createGroupElement(e[i]);this.searchShapes(e[i].it,t[i].it,t[i].prevViewData,n,d)}else"tr"===e[i].ty?(l||(u=this.createTransformElement(e[i]),t[i]=u),d.push(t[i]),this.addTransformToStyleList(t[i])):"sh"===e[i].ty||"rc"===e[i].ty||"el"===e[i].ty||"sr"===e[i].ty?l||(t[i]=this.createShapeElement(e[i])):"tm"===e[i].ty||"rd"===e[i].ty||"pb"===e[i].ty||"zz"===e[i].ty||"op"===e[i].ty?(l?(c=t[i]).closed=!1:((c=ShapeModifiers.getModifier(e[i].ty)).init(this,e[i]),t[i]=c,this.shapeModifiers.push(c)),h.push(c)):"rp"===e[i].ty&&(l?(c=t[i]).closed=!0:(c=ShapeModifiers.getModifier(e[i].ty),t[i]=c,c.init(this,e,i,t),this.shapeModifiers.push(c),n=!1),h.push(c));this.addProcessedElement(e[i],i+1)}for(this.removeTransformFromStyleList(),this.closeStyles(p),f=h.length,i=0;i<f;i+=1)h[i].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(e,t){(e._opMdf||t.op._mdf||this._isFirstFrame)&&(t.opacity=e.opacity,t.opacity*=t.op.v,t._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var e,t,r,n,a,i,o,s,l,c=this.stylesList.length,u=this.globalData.renderer,f=this.globalData.canvasContext;for(e=0;e<c;e+=1)if(("st"!==(s=(l=this.stylesList[e]).type)&&"gs"!==s||0!==l.wi)&&l.data._shouldRender&&0!==l.coOp&&0!==this.globalData.currentGlobalAlpha){for(u.save(),i=l.elements,"st"===s||"gs"===s?(u.ctxStrokeStyle("st"===s?l.co:l.grd),u.ctxLineWidth(l.wi),u.ctxLineCap(l.lc),u.ctxLineJoin(l.lj),u.ctxMiterLimit(l.ml||0)):u.ctxFillStyle("fl"===s?l.co:l.grd),u.ctxOpacity(l.coOp),"st"!==s&&"gs"!==s&&f.beginPath(),u.ctxTransform(l.preTransforms.finalTransform.props),r=i.length,t=0;t<r;t+=1){for("st"!==s&&"gs"!==s||(f.beginPath(),l.da&&(f.setLineDash(l.da),f.lineDashOffset=l.do)),a=(o=i[t].trNodes).length,n=0;n<a;n+=1)"m"===o[n].t?f.moveTo(o[n].p[0],o[n].p[1]):"c"===o[n].t?f.bezierCurveTo(o[n].pts[0],o[n].pts[1],o[n].pts[2],o[n].pts[3],o[n].pts[4],o[n].pts[5]):f.closePath();"st"!==s&&"gs"!==s||(u.ctxStroke(),l.da&&f.setLineDash(this.dashResetter))}"st"!==s&&"gs"!==s&&this.globalData.renderer.ctxFill(l.r),u.restore()}},CVShapeElement.prototype.renderShape=function(e,t,r,n){var a,i;for(i=e,a=t.length-1;a>=0;a-=1)"tr"===t[a].ty?(i=r[a].transform,this.renderShapeTransform(e,i)):"sh"===t[a].ty||"el"===t[a].ty||"rc"===t[a].ty||"sr"===t[a].ty?this.renderPath(t[a],r[a]):"fl"===t[a].ty?this.renderFill(t[a],r[a],i):"st"===t[a].ty?this.renderStroke(t[a],r[a],i):"gf"===t[a].ty||"gs"===t[a].ty?this.renderGradientFill(t[a],r[a],i):"gr"===t[a].ty?this.renderShape(i,t[a].it,r[a].it):t[a].ty;n&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(e,t){if(this._isFirstFrame||t._mdf||e.transforms._mdf){var r,n,a,i=e.trNodes,o=t.paths,s=o._length;i.length=0;var l=e.transforms.finalTransform;for(a=0;a<s;a+=1){var c=o.shapes[a];if(c&&c.v){for(n=c._length,r=1;r<n;r+=1)1===r&&i.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),i.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[r],c.v[r])});1===n&&i.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),c.c&&n&&(i.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[0],c.v[0])}),i.push({t:"z"}))}}e.trNodes=i}},CVShapeElement.prototype.renderPath=function(e,t){if(!0!==e.hd&&e._shouldRender){var r,n=t.styledShapes.length;for(r=0;r<n;r+=1)this.renderStyledShape(t.styledShapes[r],t.sh)}},CVShapeElement.prototype.renderFill=function(e,t,r){var n=t.style;(t.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=t.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(e,t,r){var n,a=t.style;if(!a.grd||t.g._mdf||t.s._mdf||t.e._mdf||1!==e.t&&(t.h._mdf||t.a._mdf)){var i,o=this.globalData.canvasContext,s=t.s.v,l=t.e.v;if(1===e.t)n=o.createLinearGradient(s[0],s[1],l[0],l[1]);else{var c=Math.sqrt(Math.pow(s[0]-l[0],2)+Math.pow(s[1]-l[1],2)),u=Math.atan2(l[1]-s[1],l[0]-s[0]),f=t.h.v;f>=1?f=.99:f<=-1&&(f=-.99);var p=c*f,h=Math.cos(u+t.a.v)*p+s[0],d=Math.sin(u+t.a.v)*p+s[1];n=o.createRadialGradient(h,d,0,s[0],s[1],c)}var m=e.g.p,y=t.g.c,g=1;for(i=0;i<m;i+=1)t.g._hasOpacity&&t.g._collapsable&&(g=t.g.o[2*i+1]),n.addColorStop(y[4*i]/100,"rgba("+y[4*i+1]+","+y[4*i+2]+","+y[4*i+3]+","+g+")");a.grd=n}a.coOp=t.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(e,t,r){var n=t.style,a=t.d;a&&(a._mdf||this._isFirstFrame)&&(n.da=a.dashArray,n.do=a.dashoffset[0]),(t.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=t.o.v*r.opacity),(t.w._mdf||this._isFirstFrame)&&(n.wi=t.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var t=!1;e.fc?(t=!0,this.values.fill=this.buildColor(e.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=t;var r=!1;e.sc&&(r=!0,this.values.stroke=this.buildColor(e.sc),this.values.sWidth=e.sw);var n,a,i,o,s,l,c,u,f,p,h,d,m=this.globalData.fontManager.getFontByName(e.f),y=e.l,g=this.mHelper;this.stroke=r,this.values.fValue=e.finalSize+"px "+this.globalData.fontManager.getFontByName(e.f).fFamily,a=e.finalText.length;var v=this.data.singleShape,_=.001*e.tr*e.finalSize,b=0,x=0,S=!0,C=0;for(n=0;n<a;n+=1){o=(i=this.globalData.fontManager.getCharData(e.finalText[n],m.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily))&&i.data||{},g.reset(),v&&y[n].n&&(b=-_,x+=e.yOffset,x+=S?1:0,S=!1),f=(c=o.shapes?o.shapes[0].it:[]).length,g.scale(e.finalSize/100,e.finalSize/100),v&&this.applyTextPropertiesToMatrix(e,g,y[n].line,b,x),h=createSizedArray(f-1);var P=0;for(u=0;u<f;u+=1)if("sh"===c[u].ty){for(l=c[u].ks.k.i.length,p=c[u].ks.k,d=[],s=1;s<l;s+=1)1===s&&d.push(g.applyToX(p.v[0][0],p.v[0][1],0),g.applyToY(p.v[0][0],p.v[0][1],0)),d.push(g.applyToX(p.o[s-1][0],p.o[s-1][1],0),g.applyToY(p.o[s-1][0],p.o[s-1][1],0),g.applyToX(p.i[s][0],p.i[s][1],0),g.applyToY(p.i[s][0],p.i[s][1],0),g.applyToX(p.v[s][0],p.v[s][1],0),g.applyToY(p.v[s][0],p.v[s][1],0));d.push(g.applyToX(p.o[s-1][0],p.o[s-1][1],0),g.applyToY(p.o[s-1][0],p.o[s-1][1],0),g.applyToX(p.i[0][0],p.i[0][1],0),g.applyToY(p.i[0][0],p.i[0][1],0),g.applyToX(p.v[0][0],p.v[0][1],0),g.applyToY(p.v[0][0],p.v[0][1],0)),h[P]=d,P+=1}v&&(b+=y[n].l,b+=_),this.textSpans[C]?this.textSpans[C].elem=h:this.textSpans[C]={elem:h},C+=1}},CVTextElement.prototype.renderInnerContent=function(){var e,t,r,n,a,i;this.validateText(),this.canvasContext.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,s=this.textAnimator.renderedLetters,l=this.textProperty.currentData.l;t=l.length;var c,u,f=null,p=null,h=null,d=this.globalData.renderer;for(e=0;e<t;e+=1)if(!l[e].n){if((o=s[e])&&(d.save(),d.ctxTransform(o.p),d.ctxOpacity(o.o)),this.fill){for(o&&o.fc?f!==o.fc&&(d.ctxFillStyle(o.fc),f=o.fc):f!==this.values.fill&&(f=this.values.fill,d.ctxFillStyle(this.values.fill)),n=(c=this.textSpans[e].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(i=(u=c[r]).length,this.globalData.canvasContext.moveTo(u[0],u[1]),a=2;a<i;a+=6)this.globalData.canvasContext.bezierCurveTo(u[a],u[a+1],u[a+2],u[a+3],u[a+4],u[a+5]);this.globalData.canvasContext.closePath(),d.ctxFill()}if(this.stroke){for(o&&o.sw?h!==o.sw&&(h=o.sw,d.ctxLineWidth(o.sw)):h!==this.values.sWidth&&(h=this.values.sWidth,d.ctxLineWidth(this.values.sWidth)),o&&o.sc?p!==o.sc&&(p=o.sc,d.ctxStrokeStyle(o.sc)):p!==this.values.stroke&&(p=this.values.stroke,d.ctxStrokeStyle(this.values.stroke)),n=(c=this.textSpans[e].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(i=(u=c[r]).length,this.globalData.canvasContext.moveTo(u[0],u[1]),a=2;a<i;a+=6)this.globalData.canvasContext.bezierCurveTo(u[a],u[a+1],u[a+2],u[a+3],u[a+4],u[a+5]);this.globalData.canvasContext.closePath(),d.ctxStroke()}o&&this.globalData.renderer.restore()}},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var e=createTag("canvas");e.width=this.assetData.w,e.height=this.assetData.h;var t,r,n=e.getContext("2d"),a=this.img.width,i=this.img.height,o=a/i,s=this.assetData.w/this.assetData.h,l=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;o>s&&"xMidYMid slice"===l||o<s&&"xMidYMid slice"!==l?t=(r=i)*s:r=(t=a)/s,n.drawImage(this.img,(a-t)/2,(i-r)/2,t,r,0,0,this.assetData.w,this.assetData.h),this.img=e}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(e){return new CVShapeElement(e,this.globalData,this)},CanvasRendererBase.prototype.createText=function(e){return new CVTextElement(e,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(e){return new CVImageElement(e,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(e){return new CVSolidElement(e,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(e){1===e[0]&&0===e[1]&&0===e[4]&&1===e[5]&&0===e[12]&&0===e[13]||this.canvasContext.transform(e[0],e[1],e[4],e[5],e[12],e[13])},CanvasRendererBase.prototype.ctxOpacity=function(e){this.canvasContext.globalAlpha*=e<0?0:e},CanvasRendererBase.prototype.ctxFillStyle=function(e){this.canvasContext.fillStyle=e},CanvasRendererBase.prototype.ctxStrokeStyle=function(e){this.canvasContext.strokeStyle=e},CanvasRendererBase.prototype.ctxLineWidth=function(e){this.canvasContext.lineWidth=e},CanvasRendererBase.prototype.ctxLineCap=function(e){this.canvasContext.lineCap=e},CanvasRendererBase.prototype.ctxLineJoin=function(e){this.canvasContext.lineJoin=e},CanvasRendererBase.prototype.ctxMiterLimit=function(e){this.canvasContext.miterLimit=e},CanvasRendererBase.prototype.ctxFill=function(e){this.canvasContext.fill(e)},CanvasRendererBase.prototype.ctxFillRect=function(e,t,r,n){this.canvasContext.fillRect(e,t,r,n)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(e){this.renderConfig.clearCanvas?(e&&(this.globalData.blendMode="source-over"),this.contextData.restore(e)):this.canvasContext.restore()},CanvasRendererBase.prototype.configAnimation=function(e){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var t=this.animationItem.container.style;t.width="100%",t.height="100%";var r="0px 0px 0px";t.transformOrigin=r,t.mozTransformOrigin=r,t.webkitTransformOrigin=r,t["-webkit-transform"]=r,t.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=e,this.layers=e.layers,this.transformCanvas={w:e.w,h:e.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(e,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(e.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(e,t){var r,n,a,i;if(this.reset(),e?(r=e,n=t,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=n):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,n=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,n=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=n*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var o=this.renderConfig.preserveAspectRatio.split(" "),s=o[1]||"meet",l=o[0]||"xMidYMid",c=l.substr(0,4),u=l.substr(4);a=r/n,(i=this.transformCanvas.w/this.transformCanvas.h)>a&&"meet"===s||i<a&&"slice"===s?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===c&&(i<a&&"meet"===s||i>a&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===c&&(i<a&&"meet"===s||i>a&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===u&&(i>a&&"meet"===s||i<a&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===u&&(i>a&&"meet"===s||i<a&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){var e;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),e=(this.layers?this.layers.length:0)-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(e,t){if((this.renderedFrame!==e||!0!==this.renderConfig.clearCanvas||t)&&!this.destroyed&&-1!==e){var r;this.renderedFrame=e,this.globalData.frameNum=e-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||t,this.globalData.projectInterface.currentFrame=e;var n=this.layers.length;for(this.completeLayers||this.checkLayers(e),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(e-this.layers[r].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(e){var t=this.elements;if(!t[e]&&99!==this.layers[e].ty){var r=this.createItem(this.layers[e],this,this.globalData);t[e]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"},CVContextData.prototype.duplicate=function(){var e=2*this._length,t=0;for(t=this._length;t<e;t+=1)this.stack[t]=new CanvasContext;this._length=e},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(e){this.cArrPos-=1;var t,r=this.stack[this.cArrPos],n=r.transform,a=this.cTr.props;for(t=0;t<16;t+=1)a[t]=n[t];if(e){this.nativeContext.restore();var i=this.stack[this.cArrPos+1];this.appliedFillStyle=i.fillStyle,this.appliedStrokeStyle=i.strokeStyle,this.appliedLineWidth=i.lineWidth,this.appliedLineCap=i.lineCap,this.appliedLineJoin=i.lineJoin,this.appliedMiterLimit=i.miterLimit}this.nativeContext.setTransform(n[0],n[1],n[4],n[5],n[12],n[13]),(e||-1!==r.opacity&&this.currentOpacity!==r.opacity)&&(this.nativeContext.globalAlpha=r.opacity,this.currentOpacity=r.opacity),this.currentFillStyle=r.fillStyle,this.currentStrokeStyle=r.strokeStyle,this.currentLineWidth=r.lineWidth,this.currentLineCap=r.lineCap,this.currentLineJoin=r.lineJoin,this.currentMiterLimit=r.miterLimit},CVContextData.prototype.save=function(e){e&&this.nativeContext.save();var t=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r,n=this.stack[this.cArrPos];for(r=0;r<16;r+=1)n.transform[r]=t[r];this.cArrPos+=1;var a=this.stack[this.cArrPos];a.opacity=n.opacity,a.fillStyle=n.fillStyle,a.strokeStyle=n.strokeStyle,a.lineWidth=n.lineWidth,a.lineCap=n.lineCap,a.lineJoin=n.lineJoin,a.miterLimit=n.miterLimit},CVContextData.prototype.setOpacity=function(e){this.stack[this.cArrPos].opacity=e},CVContextData.prototype.setContext=function(e){this.nativeContext=e},CVContextData.prototype.fillStyle=function(e){this.stack[this.cArrPos].fillStyle!==e&&(this.currentFillStyle=e,this.stack[this.cArrPos].fillStyle=e)},CVContextData.prototype.strokeStyle=function(e){this.stack[this.cArrPos].strokeStyle!==e&&(this.currentStrokeStyle=e,this.stack[this.cArrPos].strokeStyle=e)},CVContextData.prototype.lineWidth=function(e){this.stack[this.cArrPos].lineWidth!==e&&(this.currentLineWidth=e,this.stack[this.cArrPos].lineWidth=e)},CVContextData.prototype.lineCap=function(e){this.stack[this.cArrPos].lineCap!==e&&(this.currentLineCap=e,this.stack[this.cArrPos].lineCap=e)},CVContextData.prototype.lineJoin=function(e){this.stack[this.cArrPos].lineJoin!==e&&(this.currentLineJoin=e,this.stack[this.cArrPos].lineJoin=e)},CVContextData.prototype.miterLimit=function(e){this.stack[this.cArrPos].miterLimit!==e&&(this.currentMiterLimit=e,this.stack[this.cArrPos].miterLimit=e)},CVContextData.prototype.transform=function(e){this.transformMat.cloneFromProps(e);var t=this.cTr;this.transformMat.multiply(t),t.cloneFromProps(this.transformMat.props);var r=t.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(e){var t=this.stack[this.cArrPos].opacity;t*=e<0?0:e,this.stack[this.cArrPos].opacity!==t&&(this.currentOpacity!==e&&(this.nativeContext.globalAlpha=e,this.currentOpacity=e),this.stack[this.cArrPos].opacity=t)},CVContextData.prototype.fill=function(e){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(e)},CVContextData.prototype.fillRect=function(e,t,r,n){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(e,t,r,n)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()},extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var e,t=this.canvasContext;for(t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip(),e=this.layers.length-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var e;for(e=this.layers.length-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)},extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var e=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var t=this.finalTransform.mat.toCSS();e.transform=t,e.webkitTransform=t}this.finalTransform._opMdf&&(e.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var e;this.data.hasMask?((e=createNS("rect")).setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((e=createTag("div")).style.width=this.data.sw+"px",e.style.height=this.data.sh+"px",e.style.backgroundColor=this.data.sc),this.layerElement.appendChild(e)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var e;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),e=this.svgElement;else{e=createNS("svg");var t=this.comp.data?this.comp.data:this.globalData.compSize;e.setAttribute("width",t.w),e.setAttribute("height",t.h),e.appendChild(this.shapesContainer),this.layerElement.appendChild(e)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=e},HShapeElement.prototype.getTransformedPoint=function(e,t){var r,n=e.length;for(r=0;r<n;r+=1)t=e[r].mProps.v.applyToPointArray(t[0],t[1],0);return t},HShapeElement.prototype.calculateShapeBoundingBox=function(e,t){var r,n,a,i,o,s=e.sh.v,l=e.transformers,c=s._length;if(!(c<=1)){for(r=0;r<c-1;r+=1)n=this.getTransformedPoint(l,s.v[r]),a=this.getTransformedPoint(l,s.o[r]),i=this.getTransformedPoint(l,s.i[r+1]),o=this.getTransformedPoint(l,s.v[r+1]),this.checkBounds(n,a,i,o,t);s.c&&(n=this.getTransformedPoint(l,s.v[r]),a=this.getTransformedPoint(l,s.o[r]),i=this.getTransformedPoint(l,s.i[0]),o=this.getTransformedPoint(l,s.v[0]),this.checkBounds(n,a,i,o,t))}},HShapeElement.prototype.checkBounds=function(e,t,r,n,a){this.getBoundsOfCurve(e,t,r,n);var i=this.shapeBoundingBox;a.x=bmMin(i.left,a.x),a.xMax=bmMax(i.right,a.xMax),a.y=bmMin(i.top,a.y),a.yMax=bmMax(i.bottom,a.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(e,t,r,n){for(var a,i,o,s,l,c,u,f=[[e[0],n[0]],[e[1],n[1]]],p=0;p<2;++p)i=6*e[p]-12*t[p]+6*r[p],a=-3*e[p]+9*t[p]-9*r[p]+3*n[p],o=3*t[p]-3*e[p],i|=0,o|=0,0==(a|=0)&&0===i||(0===a?(s=-o/i)>0&&s<1&&f[p].push(this.calculateF(s,e,t,r,n,p)):(l=i*i-4*o*a)>=0&&((c=(-i+bmSqrt(l))/(2*a))>0&&c<1&&f[p].push(this.calculateF(c,e,t,r,n,p)),(u=(-i-bmSqrt(l))/(2*a))>0&&u<1&&f[p].push(this.calculateF(u,e,t,r,n,p))));this.shapeBoundingBox.left=bmMin.apply(null,f[0]),this.shapeBoundingBox.top=bmMin.apply(null,f[1]),this.shapeBoundingBox.right=bmMax.apply(null,f[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,f[1])},HShapeElement.prototype.calculateF=function(e,t,r,n,a,i){return bmPow(1-e,3)*t[i]+3*bmPow(1-e,2)*e*r[i]+3*(1-e)*bmPow(e,2)*n[i]+bmPow(e,3)*a[i]},HShapeElement.prototype.calculateBoundingBox=function(e,t){var r,n=e.length;for(r=0;r<n;r+=1)e[r]&&e[r].sh?this.calculateShapeBoundingBox(e[r],t):e[r]&&e[r].it?this.calculateBoundingBox(e[r].it,t):e[r]&&e[r].style&&e[r].w&&this.expandStrokeBoundingBox(e[r].w,t)},HShapeElement.prototype.expandStrokeBoundingBox=function(e,t){var r=0;if(e.keyframes){for(var n=0;n<e.keyframes.length;n+=1){var a=e.keyframes[n].s;a>r&&(r=a)}r*=e.mult}else r=e.v*e.mult;t.x-=r,t.xMax+=r,t.y-=r,t.yMax+=r},HShapeElement.prototype.currentBoxContains=function(e){return this.currentBBox.x<=e.x&&this.currentBBox.y<=e.y&&this.currentBBox.width+this.currentBBox.x>=e.x+e.width&&this.currentBBox.height+this.currentBBox.y>=e.y+e.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var e=this.tempBoundingBox,t=999999;if(e.x=t,e.xMax=-t,e.y=t,e.yMax=-t,this.calculateBoundingBox(this.itemsData,e),e.width=e.xMax<e.x?0:e.xMax-e.x,e.height=e.yMax<e.y?0:e.yMax-e.y,this.currentBoxContains(e))return;var r=!1;if(this.currentBBox.w!==e.width&&(this.currentBBox.w=e.width,this.shapeCont.setAttribute("width",e.width),r=!0),this.currentBBox.h!==e.height&&(this.currentBBox.h=e.height,this.shapeCont.setAttribute("height",e.height),r=!0),r||this.currentBBox.x!==e.x||this.currentBBox.y!==e.y){this.currentBBox.w=e.width,this.currentBBox.h=e.height,this.currentBBox.x=e.x,this.currentBBox.y=e.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var n=this.shapeCont.style,a="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";n.transform=a,n.webkitTransform=a}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var e=createNS("g");this.maskedElement.appendChild(e),this.innerElem=e}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var t=this.innerElem.style,r=e.fc?this.buildColor(e.fc):"rgba(0,0,0,0)";t.fill=r,t.color=r,e.sc&&(t.stroke=this.buildColor(e.sc),t.strokeWidth=e.sw+"px");var n,a,i=this.globalData.fontManager.getFontByName(e.f);if(!this.globalData.fontManager.chars)if(t.fontSize=e.finalSize+"px",t.lineHeight=e.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{t.fontFamily=i.fFamily;var o=e.fWeight,s=e.fStyle;t.fontStyle=s,t.fontWeight=o}var l,c,u,f=e.l;a=f.length;var p,h=this.mHelper,d="",m=0;for(n=0;n<a;n+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?l=this.textPaths[m]:((l=createNS("path")).setAttribute("stroke-linecap",lineCapEnum[1]),l.setAttribute("stroke-linejoin",lineJoinEnum[2]),l.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?u=(c=this.textSpans[m]).children[0]:((c=createTag("div")).style.lineHeight=0,(u=createNS("svg")).appendChild(l),styleDiv(c)))):this.isMasked?l=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(c=this.textSpans[m],l=this.textPaths[m]):(styleDiv(c=createTag("span")),styleDiv(l=createTag("span")),c.appendChild(l)),this.globalData.fontManager.chars){var y,g=this.globalData.fontManager.getCharData(e.finalText[n],i.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily);if(y=g?g.data:null,h.reset(),y&&y.shapes&&y.shapes.length&&(p=y.shapes[0].it,h.scale(e.finalSize/100,e.finalSize/100),d=this.createPathShape(h,p),l.setAttribute("d",d)),this.isMasked)this.innerElem.appendChild(l);else{if(this.innerElem.appendChild(c),y&&y.shapes){document.body.appendChild(u);var v=u.getBBox();u.setAttribute("width",v.width+2),u.setAttribute("height",v.height+2),u.setAttribute("viewBox",v.x-1+" "+(v.y-1)+" "+(v.width+2)+" "+(v.height+2));var _=u.style,b="translate("+(v.x-1)+"px,"+(v.y-1)+"px)";_.transform=b,_.webkitTransform=b,f[n].yOffset=v.y-1}else u.setAttribute("width",1),u.setAttribute("height",1);c.appendChild(u)}}else if(l.textContent=f[n].val,l.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(l);else{this.innerElem.appendChild(c);var x=l.style,S="translate3d(0,"+-e.finalSize/1.2+"px,0)";x.transform=S,x.webkitTransform=S}this.isMasked?this.textSpans[m]=l:this.textSpans[m]=c,this.textSpans[m].style.display="block",this.textPaths[m]=l,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var e;if(this.validateText(),this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),e=this.svgElement.style;var t="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";e.transform=t,e.webkitTransform=t}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var r,n,a,i,o,s=0,l=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;for(n=c.length,r=0;r<n;r+=1)c[r].n?s+=1:(i=this.textSpans[r],o=this.textPaths[r],a=l[s],s+=1,a._mdf.m&&(this.isMasked?i.setAttribute("transform",a.m):(i.style.webkitTransform=a.m,i.style.transform=a.m)),i.style.opacity=a.o,a.sw&&a._mdf.sw&&o.setAttribute("stroke-width",a.sw),a.sc&&a._mdf.sc&&o.setAttribute("stroke",a.sc),a.fc&&a._mdf.fc&&(o.setAttribute("fill",a.fc),o.style.color=a.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var u=this.innerElem.getBBox();if(this.currentBBox.w!==u.width&&(this.currentBBox.w=u.width,this.svgElement.setAttribute("width",u.width)),this.currentBBox.h!==u.height&&(this.currentBBox.h=u.height,this.svgElement.setAttribute("height",u.height)),this.currentBBox.w!==u.width+2||this.currentBBox.h!==u.height+2||this.currentBBox.x!==u.x-1||this.currentBBox.y!==u.y-1){this.currentBBox.w=u.width+2,this.currentBBox.h=u.height+2,this.currentBBox.x=u.x-1,this.currentBBox.y=u.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),e=this.svgElement.style;var f="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";e.transform=f,e.webkitTransform=f}}}},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var e,t,r,n,a=this.comp.threeDElements.length;for(e=0;e<a;e+=1)if("3d"===(t=this.comp.threeDElements[e]).type){r=t.perspectiveElem.style,n=t.container.style;var i=this.pe.v+"px",o="0px 0px 0px",s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";r.perspective=i,r.webkitPerspective=i,n.transformOrigin=o,n.mozTransformOrigin=o,n.webkitTransformOrigin=o,r.transform=s,r.webkitTransform=s}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var e,t,r=this._isFirstFrame;if(this.hierarchy)for(t=this.hierarchy.length,e=0;e<t;e+=1)r=this.hierarchy[e].finalTransform.mProp._mdf||r;if(r||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(e=t=this.hierarchy.length-1;e>=0;e-=1){var n=this.hierarchy[e].finalTransform.mProp;this.mat.translate(-n.p.v[0],-n.p.v[1],n.p.v[2]),this.mat.rotateX(-n.or.v[0]).rotateY(-n.or.v[1]).rotateZ(n.or.v[2]),this.mat.rotateX(-n.rx.v).rotateY(-n.ry.v).rotateZ(n.rz.v),this.mat.scale(1/n.s.v[0],1/n.s.v[1],1/n.s.v[2]),this.mat.translate(n.a.v[0],n.a.v[1],n.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var a;a=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var i=Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)),o=[a[0]/i,a[1]/i,a[2]/i],s=Math.sqrt(o[2]*o[2]+o[0]*o[0]),l=Math.atan2(o[1],s),c=Math.atan2(o[0],-o[2]);this.mat.rotateY(c).rotateX(-l)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var u=!this._prevMat.equals(this.mat);if((u||this.pe._mdf)&&this.comp.threeDElements){var f,p,h;for(t=this.comp.threeDElements.length,e=0;e<t;e+=1)if("3d"===(f=this.comp.threeDElements[e]).type){if(u){var d=this.mat.toCSS();(h=f.container.style).transform=d,h.webkitTransform=d}this.pe._mdf&&((p=f.perspectiveElem.style).perspective=this.pe.v+"px",p.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData),t=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(t),t.crossOrigin="anonymous",t.src=e,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRendererBase.prototype.appendElementInPos=function(e,t){var r=e.getBaseElement();if(r){var n=this.layers[t];if(n.ddd&&this.supports3d)this.addTo3dContainer(r,t);else if(this.threeDElements)this.addTo3dContainer(r,t);else{for(var a,i,o=0;o<t;)this.elements[o]&&!0!==this.elements[o]&&this.elements[o].getBaseElement&&(i=this.elements[o],a=(this.layers[o].ddd?this.getThreeDContainerByPos(o):i.getBaseElement())||a),o+=1;a?n.ddd&&this.supports3d||this.layerElement.insertBefore(r,a):n.ddd&&this.supports3d||this.layerElement.appendChild(r)}}},HybridRendererBase.prototype.createShape=function(e){return this.supports3d?new HShapeElement(e,this.globalData,this):new SVGShapeElement(e,this.globalData,this)},HybridRendererBase.prototype.createText=function(e){return this.supports3d?new HTextElement(e,this.globalData,this):new SVGTextLottieElement(e,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(e){return this.camera=new HCameraElement(e,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(e){return this.supports3d?new HImageElement(e,this.globalData,this):new IImageElement(e,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(e){return this.supports3d?new HSolidElement(e,this.globalData,this):new ISolidElement(e,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(e){for(var t=0,r=this.threeDElements.length;t<r;){if(this.threeDElements[t].startPos<=e&&this.threeDElements[t].endPos>=e)return this.threeDElements[t].perspectiveElem;t+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(e,t){var r,n,a=createTag("div");styleDiv(a);var i=createTag("div");if(styleDiv(i),"3d"===t){(r=a.style).width=this.globalData.compSize.w+"px",r.height=this.globalData.compSize.h+"px";var o="50% 50%";r.webkitTransformOrigin=o,r.mozTransformOrigin=o,r.transformOrigin=o;var s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(n=i.style).transform=s,n.webkitTransform=s}a.appendChild(i);var l={container:i,perspectiveElem:a,startPos:e,endPos:e,type:t};return this.threeDElements.push(l),l},HybridRendererBase.prototype.build3dContainers=function(){var e,t,r=this.layers.length,n="";for(e=0;e<r;e+=1)this.layers[e].ddd&&3!==this.layers[e].ty?("3d"!==n&&(n="3d",t=this.createThreeDContainer(e,"3d")),t.endPos=Math.max(t.endPos,e)):("2d"!==n&&(n="2d",t=this.createThreeDContainer(e,"2d")),t.endPos=Math.max(t.endPos,e));for(e=(r=this.threeDElements.length)-1;e>=0;e-=1)this.resizerElem.appendChild(this.threeDElements[e].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(e,t){for(var r=0,n=this.threeDElements.length;r<n;){if(t<=this.threeDElements[r].endPos){for(var a,i=this.threeDElements[r].startPos;i<t;)this.elements[i]&&this.elements[i].getBaseElement&&(a=this.elements[i].getBaseElement()),i+=1;a?this.threeDElements[r].container.insertBefore(e,a):this.threeDElements[r].container.appendChild(e);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(e){var t=createTag("div"),r=this.animationItem.wrapper,n=t.style;n.width=e.w+"px",n.height=e.h+"px",this.resizerElem=t,styleDiv(t),n.transformStyle="flat",n.mozTransformStyle="flat",n.webkitTransformStyle="flat",this.renderConfig.className&&t.setAttribute("class",this.renderConfig.className),r.appendChild(t),n.overflow="hidden";var a=createNS("svg");a.setAttribute("width","1"),a.setAttribute("height","1"),styleDiv(a),this.resizerElem.appendChild(a);var i=createNS("defs");a.appendChild(i),this.data=e,this.setupGlobalData(e,a),this.globalData.defs=i,this.layers=e.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){var e;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var t=this.layers?this.layers.length:0;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var e,t,r,n,a=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight,o=a/i;this.globalData.compSize.w/this.globalData.compSize.h>o?(e=a/this.globalData.compSize.w,t=a/this.globalData.compSize.w,r=0,n=(i-this.globalData.compSize.h*(a/this.globalData.compSize.w))/2):(e=i/this.globalData.compSize.h,t=i/this.globalData.compSize.h,r=(a-this.globalData.compSize.w*(i/this.globalData.compSize.h))/2,n=0);var s=this.resizerElem.style;s.webkitTransform="matrix3d("+e+",0,0,0,0,"+t+",0,0,0,0,1,0,"+r+","+n+",0,1)",s.transform=s.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var e,t=this.globalData.compSize.w,r=this.globalData.compSize.h,n=this.threeDElements.length;for(e=0;e<n;e+=1){var a=this.threeDElements[e].perspectiveElem.style;a.webkitPerspective=Math.sqrt(Math.pow(t,2)+Math.pow(r,2))+"px",a.perspective=a.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(e){var t,r=e.length,n=createTag("div");for(t=0;t<r;t+=1)if(e[t].xt){var a=this.createComp(e[t],n,this.globalData.comp,null);a.initExpressions(),this.globalData.projectInterface.registerComposition(a)}},extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(e,t){for(var r,n=0;n<t;)this.elements[n]&&this.elements[n].getBaseElement&&(r=this.elements[n].getBaseElement()),n+=1;r?this.layerElement.insertBefore(e,r):this.layerElement.appendChild(e)},HCompElement.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)},extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)};var CompExpressionInterface=function(e){function t(t){for(var r=0,n=e.layers.length;r<n;){if(e.layers[r].nm===t||e.layers[r].ind===t)return e.elements[r].layerInterface;r+=1}return null}return Object.defineProperty(t,"_name",{value:e.data.nm}),t.layer=t,t.pixelAspect=1,t.height=e.data.h||e.globalData.compSize.h,t.width=e.data.w||e.globalData.compSize.w,t.pixelAspect=1,t.frameDuration=1/e.globalData.frameRate,t.displayStartTime=0,t.numLayers=e.layers.length,t};function _typeof$2(e){return _typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$2(e)}function seedRandom(e,t){var r=this,n=256,a="random",i=t.pow(n,6),o=t.pow(2,52),s=2*o,l=255;function c(e){var t,r=e.length,a=this,i=0,o=a.i=a.j=0,s=a.S=[];for(r||(e=[r++]);i<n;)s[i]=i++;for(i=0;i<n;i++)s[i]=s[o=l&o+e[i%r]+(t=s[i])],s[o]=t;a.g=function(e){for(var t,r=0,i=a.i,o=a.j,s=a.S;e--;)t=s[i=l&i+1],r=r*n+s[l&(s[i]=s[o=l&o+t])+(s[o]=t)];return a.i=i,a.j=o,r}}function u(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function f(e,t){var r,n=[],a=_typeof$2(e);if(t&&"object"==a)for(r in e)try{n.push(f(e[r],t-1))}catch(e){}return n.length?n:"string"==a?e:e+"\0"}function p(e,t){for(var r,n=e+"",a=0;a<n.length;)t[l&a]=l&(r^=19*t[l&a])+n.charCodeAt(a++);return h(t)}function h(e){return String.fromCharCode.apply(0,e)}t["seed"+a]=function(l,d,m){var y=[],g=p(f((d=!0===d?{entropy:!0}:d||{}).entropy?[l,h(e)]:null===l?function(){try{var t=new Uint8Array(n);return(r.crypto||r.msCrypto).getRandomValues(t),h(t)}catch(t){var a=r.navigator,i=a&&a.plugins;return[+new Date,r,i,r.screen,h(e)]}}():l,3),y),v=new c(y),_=function(){for(var e=v.g(6),t=i,r=0;e<o;)e=(e+r)*n,t*=n,r=v.g(1);for(;e>=s;)e/=2,t/=2,r>>>=1;return(e+r)/t};return _.int32=function(){return 0|v.g(4)},_.quick=function(){return v.g(4)/4294967296},_.double=_,p(h(v.S),e),(d.pass||m||function(e,r,n,i){return i&&(i.S&&u(i,v),e.state=function(){return u(v,{})}),n?(t[a]=e,r):e})(_,g,"global"in d?d.global:this==t,d.state)},p(t.random(),e)}function initialize$2(e){seedRandom([],e)}var propTypes={SHAPE:"shape"};function _typeof$1(e){return _typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$1(e)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(e){return e.constructor===Array||e.constructor===Float32Array}function isNumerable(e,t){return"number"===e||t instanceof Number||"boolean"===e||"string"===e}function $bm_neg(e){var t=_typeof$1(e);if("number"===t||e instanceof Number||"boolean"===t)return-e;if($bm_isInstanceOfArray(e)){var r,n=e.length,a=[];for(r=0;r<n;r+=1)a[r]=-e[r];return a}return e.propType?e.v:-e}initialize$2(BMMath);var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(e,t){var r=_typeof$1(e),n=_typeof$1(t);if(isNumerable(r,e)&&isNumerable(n,t)||"string"===r||"string"===n)return e+t;if($bm_isInstanceOfArray(e)&&isNumerable(n,t))return(e=e.slice(0))[0]+=t,e;if(isNumerable(r,e)&&$bm_isInstanceOfArray(t))return(t=t.slice(0))[0]=e+t[0],t;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(t)){for(var a=0,i=e.length,o=t.length,s=[];a<i||a<o;)("number"==typeof e[a]||e[a]instanceof Number)&&("number"==typeof t[a]||t[a]instanceof Number)?s[a]=e[a]+t[a]:s[a]=void 0===t[a]?e[a]:e[a]||t[a],a+=1;return s}return 0}var add=sum;function sub(e,t){var r=_typeof$1(e),n=_typeof$1(t);if(isNumerable(r,e)&&isNumerable(n,t))return"string"===r&&(e=parseInt(e,10)),"string"===n&&(t=parseInt(t,10)),e-t;if($bm_isInstanceOfArray(e)&&isNumerable(n,t))return(e=e.slice(0))[0]-=t,e;if(isNumerable(r,e)&&$bm_isInstanceOfArray(t))return(t=t.slice(0))[0]=e-t[0],t;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(t)){for(var a=0,i=e.length,o=t.length,s=[];a<i||a<o;)("number"==typeof e[a]||e[a]instanceof Number)&&("number"==typeof t[a]||t[a]instanceof Number)?s[a]=e[a]-t[a]:s[a]=void 0===t[a]?e[a]:e[a]||t[a],a+=1;return s}return 0}function mul(e,t){var r,n,a,i=_typeof$1(e),o=_typeof$1(t);if(isNumerable(i,e)&&isNumerable(o,t))return e*t;if($bm_isInstanceOfArray(e)&&isNumerable(o,t)){for(a=e.length,r=createTypedArray("float32",a),n=0;n<a;n+=1)r[n]=e[n]*t;return r}if(isNumerable(i,e)&&$bm_isInstanceOfArray(t)){for(a=t.length,r=createTypedArray("float32",a),n=0;n<a;n+=1)r[n]=e*t[n];return r}return 0}function div(e,t){var r,n,a,i=_typeof$1(e),o=_typeof$1(t);if(isNumerable(i,e)&&isNumerable(o,t))return e/t;if($bm_isInstanceOfArray(e)&&isNumerable(o,t)){for(a=e.length,r=createTypedArray("float32",a),n=0;n<a;n+=1)r[n]=e[n]/t;return r}if(isNumerable(i,e)&&$bm_isInstanceOfArray(t)){for(a=t.length,r=createTypedArray("float32",a),n=0;n<a;n+=1)r[n]=e/t[n];return r}return 0}function mod(e,t){return"string"==typeof e&&(e=parseInt(e,10)),"string"==typeof t&&(t=parseInt(t,10)),e%t}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(e,t,r){if(t>r){var n=r;r=t,t=n}return Math.min(Math.max(e,t),r)}function radiansToDegrees(e){return e/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(e){return e*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(e,t){if("number"==typeof e||e instanceof Number)return t=t||0,Math.abs(e-t);var r;t||(t=helperLengthArray);var n=Math.min(e.length,t.length),a=0;for(r=0;r<n;r+=1)a+=Math.pow(t[r]-e[r],2);return Math.sqrt(a)}function normalize(e){return div(e,length(e))}function rgbToHsl(e){var t,r,n=e[0],a=e[1],i=e[2],o=Math.max(n,a,i),s=Math.min(n,a,i),l=(o+s)/2;if(o===s)t=0,r=0;else{var c=o-s;switch(r=l>.5?c/(2-o-s):c/(o+s),o){case n:t=(a-i)/c+(a<i?6:0);break;case a:t=(i-n)/c+2;break;case i:t=(n-a)/c+4}t/=6}return[t,r,l,e[3]]}function hue2rgb(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e}function hslToRgb(e){var t,r,n,a=e[0],i=e[1],o=e[2];if(0===i)t=o,n=o,r=o;else{var s=o<.5?o*(1+i):o+i-o*i,l=2*o-s;t=hue2rgb(l,s,a+1/3),r=hue2rgb(l,s,a),n=hue2rgb(l,s,a-1/3)}return[t,r,n,e[3]]}function linear(e,t,r,n,a){if(void 0!==n&&void 0!==a||(n=t,a=r,t=0,r=1),r<t){var i=r;r=t,t=i}if(e<=t)return n;if(e>=r)return a;var o,s=r===t?0:(e-t)/(r-t);if(!n.length)return n+(a-n)*s;var l=n.length,c=createTypedArray("float32",l);for(o=0;o<l;o+=1)c[o]=n[o]+(a[o]-n[o])*s;return c}function random(e,t){if(void 0===t&&(void 0===e?(e=0,t=1):(t=e,e=void 0)),t.length){var r,n=t.length;e||(e=createTypedArray("float32",n));var a=createTypedArray("float32",n),i=BMMath.random();for(r=0;r<n;r+=1)a[r]=e[r]+i*(t[r]-e[r]);return a}return void 0===e&&(e=0),e+BMMath.random()*(t-e)}function createPath(e,t,r,n){var a,i=e.length,o=shapePool.newElement();o.setPathData(!!n,i);var s,l,c=[0,0];for(a=0;a<i;a+=1)s=t&&t[a]?t[a]:c,l=r&&r[a]?r[a]:c,o.setTripleAt(e[a][0],e[a][1],l[0]+e[a][0],l[1]+e[a][1],s[0]+e[a][0],s[1]+e[a][1],a,!0);return o}function initiateExpression(elem,data,property){function noOp(e){return e}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(e,t){var r,n,a=this.pv.length?this.pv.length:1,i=createTypedArray("float32",a),o=Math.floor(5*time);for(r=0,n=0;r<o;){for(n=0;n<a;n+=1)i[n]+=-t+2*t*BMMath.random();r+=1}var s=5*time,l=s-Math.floor(s),c=createTypedArray("float32",a);if(a>1){for(n=0;n<a;n+=1)c[n]=this.pv[n]+i[n]+(-t+2*t*BMMath.random())*l;return c}return this.pv+i[0]+(-t+2*t*BMMath.random())*l}.bind(this);function loopInDuration(e,t){return loopIn(e,t,!0)}function loopOutDuration(e,t){return loopOut(e,t,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(e,t){var r=[t[0]-e[0],t[1]-e[1],t[2]-e[2]],n=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads;return[-Math.atan2(r[1],r[2])/degToRads,n,0]}function easeOut(e,t,r,n,a){return applyEase(easeOutBez,e,t,r,n,a)}function easeIn(e,t,r,n,a){return applyEase(easeInBez,e,t,r,n,a)}function ease(e,t,r,n,a){return applyEase(easeInOutBez,e,t,r,n,a)}function applyEase(e,t,r,n,a,i){void 0===a?(a=r,i=n):t=(t-r)/(n-r),t>1?t=1:t<0&&(t=0);var o=e(t);if($bm_isInstanceOfArray(a)){var s,l=a.length,c=createTypedArray("float32",l);for(s=0;s<l;s+=1)c[s]=(i[s]-a[s])*o+a[s];return c}return(i-a)*o+a}function nearestKey(e){var t,r,n,a=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(r=-1,(e*=elem.comp.globalData.frameRate)<data.k[0].t)r=1,n=data.k[0].t;else{for(t=0;t<a-1;t+=1){if(e===data.k[t].t){r=t+1,n=data.k[t].t;break}if(e>data.k[t].t&&e<data.k[t+1].t){e-data.k[t].t>data.k[t+1].t-e?(r=t+2,n=data.k[t+1].t):(r=t+1,n=data.k[t].t);break}}-1===r&&(r=t+1,n=data.k[t].t)}else r=0,n=0;var i={};return i.index=r,i.time=n/elem.comp.globalData.frameRate,i}function key(e){var t,r,n;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+e);e-=1,t={time:data.k[e].t/elem.comp.globalData.frameRate,value:[]};var a=Object.prototype.hasOwnProperty.call(data.k[e],"s")?data.k[e].s:data.k[e-1].e;for(n=a.length,r=0;r<n;r+=1)t[r]=a[r],t.value[r]=a[r];return t}function framesToTime(e,t){return t||(t=elem.comp.globalData.frameRate),e/t}function timeToFrames(e,t){return e||0===e||(e=time),t||(t=elem.comp.globalData.frameRate),e*t}function seedRandom(e){BMMath.seedrandom(randSeed+e)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(e,t){return"string"==typeof value?void 0===t?value.substring(e):value.substring(e,t):""}function substr(e,t){return"string"==typeof value?void 0===t?value.substr(e):value.substr(e,t):""}function posterizeTime(e){time=0===e?0:Math.floor(time*e)/e,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(e){return value=e,this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var e={initExpressions:function(e){var t=0,r=[];e.renderer.compInterface=CompExpressionInterface(e.renderer),e.renderer.globalData.projectInterface.registerComposition(e.renderer),e.renderer.globalData.pushExpression=function(){t+=1},e.renderer.globalData.popExpression=function(){0==(t-=1)&&function(){var e,t=r.length;for(e=0;e<t;e+=1)r[e].release();r.length=0}()},e.renderer.globalData.registerExpressionProperty=function(e){-1===r.indexOf(e)&&r.push(e)}}};return e.resetFrame=ExpressionManager.resetFrame,e}(),MaskManagerInterface=function(){function e(e,t){this._mask=e,this._data=t}return Object.defineProperty(e.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(e.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(t){var r,n=createSizedArray(t.viewData.length),a=t.viewData.length;for(r=0;r<a;r+=1)n[r]=new e(t.viewData[r],t.masksProperties[r]);return function(e){for(r=0;r<a;){if(t.masksProperties[r].nm===e)return n[r];r+=1}return null}}}(),ExpressionPropertyInterface=function(){var e={pv:0,v:0,mult:1},t={pv:[0,0,0],v:[0,0,0],mult:1};function r(e,t,r){Object.defineProperty(e,"velocity",{get:function(){return t.getVelocityAtTime(t.comp.currentFrame)}}),e.numKeys=t.keyframes?t.keyframes.length:0,e.key=function(n){if(!e.numKeys)return 0;var a;a="s"in t.keyframes[n-1]?t.keyframes[n-1].s:"e"in t.keyframes[n-2]?t.keyframes[n-2].e:t.keyframes[n-2].s;var i="unidimensional"===r?new Number(a):Object.assign({},a);return i.time=t.keyframes[n-1].t/t.elem.comp.globalData.frameRate,i.value="unidimensional"===r?a[0]:a,i},e.valueAtTime=t.getValueAtTime,e.speedAtTime=t.getSpeedAtTime,e.velocityAtTime=t.getVelocityAtTime,e.propertyGroup=t.propertyGroup}function n(){return e}return function(a){return a?"unidimensional"===a.propType?function(t){t&&"pv"in t||(t=e);var n=1/t.mult,a=t.pv*n,i=new Number(a);return i.value=a,r(i,t,"unidimensional"),function(){return t.k&&t.getValue(),a=t.v*n,i.value!==a&&((i=new Number(a)).value=a,r(i,t,"unidimensional")),i}}(a):function(e){e&&"pv"in e||(e=t);var n=1/e.mult,a=e.data&&e.data.l||e.pv.length,i=createTypedArray("float32",a),o=createTypedArray("float32",a);return i.value=o,r(i,e,"multidimensional"),function(){e.k&&e.getValue();for(var t=0;t<a;t+=1)o[t]=e.v[t]*n,i[t]=o[t];return i}}(a):n}}(),TransformExpressionInterface=function(e){function t(e){switch(e){case"scale":case"Scale":case"ADBE Scale":case 6:return t.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return t.rotation;case"ADBE Rotate X":return t.xRotation;case"ADBE Rotate Y":return t.yRotation;case"position":case"Position":case"ADBE Position":case 2:return t.position;case"ADBE Position_0":return t.xPosition;case"ADBE Position_1":return t.yPosition;case"ADBE Position_2":return t.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return t.anchorPoint;case"opacity":case"Opacity":case 11:return t.opacity;default:return null}}var r,n,a,i;return Object.defineProperty(t,"rotation",{get:ExpressionPropertyInterface(e.r||e.rz)}),Object.defineProperty(t,"zRotation",{get:ExpressionPropertyInterface(e.rz||e.r)}),Object.defineProperty(t,"xRotation",{get:ExpressionPropertyInterface(e.rx)}),Object.defineProperty(t,"yRotation",{get:ExpressionPropertyInterface(e.ry)}),Object.defineProperty(t,"scale",{get:ExpressionPropertyInterface(e.s)}),e.p?i=ExpressionPropertyInterface(e.p):(r=ExpressionPropertyInterface(e.px),n=ExpressionPropertyInterface(e.py),e.pz&&(a=ExpressionPropertyInterface(e.pz))),Object.defineProperty(t,"position",{get:function(){return e.p?i():[r(),n(),a?a():0]}}),Object.defineProperty(t,"xPosition",{get:ExpressionPropertyInterface(e.px)}),Object.defineProperty(t,"yPosition",{get:ExpressionPropertyInterface(e.py)}),Object.defineProperty(t,"zPosition",{get:ExpressionPropertyInterface(e.pz)}),Object.defineProperty(t,"anchorPoint",{get:ExpressionPropertyInterface(e.a)}),Object.defineProperty(t,"opacity",{get:ExpressionPropertyInterface(e.o)}),Object.defineProperty(t,"skew",{get:ExpressionPropertyInterface(e.sk)}),Object.defineProperty(t,"skewAxis",{get:ExpressionPropertyInterface(e.sa)}),Object.defineProperty(t,"orientation",{get:ExpressionPropertyInterface(e.or)}),t},LayerExpressionInterface=function(){function e(e){var t=new Matrix;return void 0!==e?this._elem.finalTransform.mProp.getValueAtTime(e).clone(t):this._elem.finalTransform.mProp.applyToMatrix(t),t}function t(e,t){var r=this.getMatrix(t);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.applyPoint(r,e)}function r(e,t){var r=this.getMatrix(t);return this.applyPoint(r,e)}function n(e,t){var r=this.getMatrix(t);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.invertPoint(r,e)}function a(e,t){var r=this.getMatrix(t);return this.invertPoint(r,e)}function i(e,t){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e)}return e.applyToPointArray(t[0],t[1],t[2]||0)}function o(e,t){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e)}return e.inversePoint(t)}function s(e){var t=new Matrix;if(t.reset(),this._elem.finalTransform.mProp.applyToMatrix(t),this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t);return t.inversePoint(e)}return t.inversePoint(e)}function l(){return[1,1,1,1]}return function(c){var u;function f(e){switch(e){case"ADBE Root Vectors Group":case"Contents":case 2:return f.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return u;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return f.effect;case"ADBE Text Properties":return f.textInterface;default:return null}}f.getMatrix=e,f.invertPoint=o,f.applyPoint=i,f.toWorld=r,f.toWorldVec=t,f.fromWorld=a,f.fromWorldVec=n,f.toComp=r,f.fromComp=s,f.sampleImage=l,f.sourceRectAtTime=c.sourceRectAtTime.bind(c),f._elem=c;var p=getDescriptor(u=TransformExpressionInterface(c.finalTransform.mProp),"anchorPoint");return Object.defineProperties(f,{hasParent:{get:function(){return c.hierarchy.length}},parent:{get:function(){return c.hierarchy[0].layerInterface}},rotation:getDescriptor(u,"rotation"),scale:getDescriptor(u,"scale"),position:getDescriptor(u,"position"),opacity:getDescriptor(u,"opacity"),anchorPoint:p,anchor_point:p,transform:{get:function(){return u}},active:{get:function(){return c.isInRange}}}),f.startTime=c.data.st,f.index=c.data.ind,f.source=c.data.refId,f.height=0===c.data.ty?c.data.h:100,f.width=0===c.data.ty?c.data.w:100,f.inPoint=c.data.ip/c.comp.globalData.frameRate,f.outPoint=c.data.op/c.comp.globalData.frameRate,f._name=c.data.nm,f.registerMaskInterface=function(e){f.mask=new MaskManagerInterface(e,c)},f.registerEffectsInterface=function(e){f.effect=e},f}}(),propertyGroupFactory=function(e,t){return function(r){return(r=void 0===r?1:r)<=0?e:t(r-1)}},PropertyInterface=function(e,t){var r={_name:e};return function(e){return(e=void 0===e?1:e)<=0?r:t(e-1)}},EffectsExpressionInterface=function(){function e(r,n,a,i){function o(e){for(var t=r.ef,n=0,a=t.length;n<a;){if(e===t[n].nm||e===t[n].mn||e===t[n].ix)return 5===t[n].ty?c[n]:c[n]();n+=1}throw new Error}var s,l=propertyGroupFactory(o,a),c=[],u=r.ef.length;for(s=0;s<u;s+=1)5===r.ef[s].ty?c.push(e(r.ef[s],n.effectElements[s],n.effectElements[s].propertyGroup,i)):c.push(t(n.effectElements[s],r.ef[s].ty,i,l));return"ADBE Color Control"===r.mn&&Object.defineProperty(o,"color",{get:function(){return c[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return r.np}},_name:{value:r.nm},propertyGroup:{value:l}}),o.enabled=0!==r.en,o.active=o.enabled,o}function t(e,t,r,n){var a=ExpressionPropertyInterface(e.p);return e.p.setGroupProperty&&e.p.setGroupProperty(PropertyInterface("",n)),function(){return 10===t?r.comp.compInterface(e.p.v):a()}}return{createEffectsInterface:function(t,r){if(t.effectsManager){var n,a=[],i=t.data.ef,o=t.effectsManager.effectElements.length;for(n=0;n<o;n+=1)a.push(e(i[n],t.effectsManager.effectElements[n],r,t));var s=t.data.ef||[],l=function(e){for(n=0,o=s.length;n<o;){if(e===s[n].nm||e===s[n].mn||e===s[n].ix)return a[n];n+=1}return null};return Object.defineProperty(l,"numProperties",{get:function(){return s.length}}),l}return null}}}(),ShapePathInterface=function(e,t,r){var n=t.sh;function a(e){return"Shape"===e||"shape"===e||"Path"===e||"path"===e||"ADBE Vector Shape"===e||2===e?a.path:null}var i=propertyGroupFactory(a,r);return n.setGroupProperty(PropertyInterface("Path",i)),Object.defineProperties(a,{path:{get:function(){return n.k&&n.getValue(),n}},shape:{get:function(){return n.k&&n.getValue(),n}},_name:{value:e.nm},ix:{value:e.ix},propertyIndex:{value:e.ix},mn:{value:e.mn},propertyGroup:{value:r}}),a},ShapeExpressionInterface=function(){function e(e,s,h){var d,m=[],y=e?e.length:0;for(d=0;d<y;d+=1)"gr"===e[d].ty?m.push(t(e[d],s[d],h)):"fl"===e[d].ty?m.push(r(e[d],s[d],h)):"st"===e[d].ty?m.push(i(e[d],s[d],h)):"tm"===e[d].ty?m.push(o(e[d],s[d],h)):"tr"===e[d].ty||("el"===e[d].ty?m.push(l(e[d],s[d],h)):"sr"===e[d].ty?m.push(c(e[d],s[d],h)):"sh"===e[d].ty?m.push(ShapePathInterface(e[d],s[d],h)):"rc"===e[d].ty?m.push(u(e[d],s[d],h)):"rd"===e[d].ty?m.push(f(e[d],s[d],h)):"rp"===e[d].ty?m.push(p(e[d],s[d],h)):"gf"===e[d].ty?m.push(n(e[d],s[d],h)):m.push(a(e[d],s[d])));return m}function t(t,r,n){var a=function(e){switch(e){case"ADBE Vectors Group":case"Contents":case 2:return a.content;default:return a.transform}};a.propertyGroup=propertyGroupFactory(a,n);var i=function(t,r,n){var a,i=function(e){for(var t=0,r=a.length;t<r;){if(a[t]._name===e||a[t].mn===e||a[t].propertyIndex===e||a[t].ix===e||a[t].ind===e)return a[t];t+=1}return"number"==typeof e?a[e-1]:null};i.propertyGroup=propertyGroupFactory(i,n),a=e(t.it,r.it,i.propertyGroup),i.numProperties=a.length;var o=s(t.it[t.it.length-1],r.it[r.it.length-1],i.propertyGroup);return i.transform=o,i.propertyIndex=t.cix,i._name=t.nm,i}(t,r,a.propertyGroup),o=s(t.it[t.it.length-1],r.it[r.it.length-1],a.propertyGroup);return a.content=i,a.transform=o,Object.defineProperty(a,"_name",{get:function(){return t.nm}}),a.numProperties=t.np,a.propertyIndex=t.ix,a.nm=t.nm,a.mn=t.mn,a}function r(e,t,r){function n(e){return"Color"===e||"color"===e?n.color:"Opacity"===e||"opacity"===e?n.opacity:null}return Object.defineProperties(n,{color:{get:ExpressionPropertyInterface(t.c)},opacity:{get:ExpressionPropertyInterface(t.o)},_name:{value:e.nm},mn:{value:e.mn}}),t.c.setGroupProperty(PropertyInterface("Color",r)),t.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function n(e,t,r){function n(e){return"Start Point"===e||"start point"===e?n.startPoint:"End Point"===e||"end point"===e?n.endPoint:"Opacity"===e||"opacity"===e?n.opacity:null}return Object.defineProperties(n,{startPoint:{get:ExpressionPropertyInterface(t.s)},endPoint:{get:ExpressionPropertyInterface(t.e)},opacity:{get:ExpressionPropertyInterface(t.o)},type:{get:function(){return"a"}},_name:{value:e.nm},mn:{value:e.mn}}),t.s.setGroupProperty(PropertyInterface("Start Point",r)),t.e.setGroupProperty(PropertyInterface("End Point",r)),t.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function a(){return function(){return null}}function i(e,t,r){var n,a=propertyGroupFactory(c,r),i=propertyGroupFactory(l,a);function o(r){Object.defineProperty(l,e.d[r].nm,{get:ExpressionPropertyInterface(t.d.dataProps[r].p)})}var s=e.d?e.d.length:0,l={};for(n=0;n<s;n+=1)o(n),t.d.dataProps[n].p.setGroupProperty(i);function c(e){return"Color"===e||"color"===e?c.color:"Opacity"===e||"opacity"===e?c.opacity:"Stroke Width"===e||"stroke width"===e?c.strokeWidth:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(t.c)},opacity:{get:ExpressionPropertyInterface(t.o)},strokeWidth:{get:ExpressionPropertyInterface(t.w)},dash:{get:function(){return l}},_name:{value:e.nm},mn:{value:e.mn}}),t.c.setGroupProperty(PropertyInterface("Color",a)),t.o.setGroupProperty(PropertyInterface("Opacity",a)),t.w.setGroupProperty(PropertyInterface("Stroke Width",a)),c}function o(e,t,r){function n(t){return t===e.e.ix||"End"===t||"end"===t?n.end:t===e.s.ix?n.start:t===e.o.ix?n.offset:null}var a=propertyGroupFactory(n,r);return n.propertyIndex=e.ix,t.s.setGroupProperty(PropertyInterface("Start",a)),t.e.setGroupProperty(PropertyInterface("End",a)),t.o.setGroupProperty(PropertyInterface("Offset",a)),n.propertyIndex=e.ix,n.propertyGroup=r,Object.defineProperties(n,{start:{get:ExpressionPropertyInterface(t.s)},end:{get:ExpressionPropertyInterface(t.e)},offset:{get:ExpressionPropertyInterface(t.o)},_name:{value:e.nm}}),n.mn=e.mn,n}function s(e,t,r){function n(t){return e.a.ix===t||"Anchor Point"===t?n.anchorPoint:e.o.ix===t||"Opacity"===t?n.opacity:e.p.ix===t||"Position"===t?n.position:e.r.ix===t||"Rotation"===t||"ADBE Vector Rotation"===t?n.rotation:e.s.ix===t||"Scale"===t?n.scale:e.sk&&e.sk.ix===t||"Skew"===t?n.skew:e.sa&&e.sa.ix===t||"Skew Axis"===t?n.skewAxis:null}var a=propertyGroupFactory(n,r);return t.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",a)),t.transform.mProps.p.setGroupProperty(PropertyInterface("Position",a)),t.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",a)),t.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",a)),t.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",a)),t.transform.mProps.sk&&(t.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",a)),t.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",a))),t.transform.op.setGroupProperty(PropertyInterface("Opacity",a)),Object.defineProperties(n,{opacity:{get:ExpressionPropertyInterface(t.transform.mProps.o)},position:{get:ExpressionPropertyInterface(t.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(t.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(t.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(t.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(t.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(t.transform.mProps.sa)},_name:{value:e.nm}}),n.ty="tr",n.mn=e.mn,n.propertyGroup=r,n}function l(e,t,r){function n(t){return e.p.ix===t?n.position:e.s.ix===t?n.size:null}var a=propertyGroupFactory(n,r);n.propertyIndex=e.ix;var i="tm"===t.sh.ty?t.sh.prop:t.sh;return i.s.setGroupProperty(PropertyInterface("Size",a)),i.p.setGroupProperty(PropertyInterface("Position",a)),Object.defineProperties(n,{size:{get:ExpressionPropertyInterface(i.s)},position:{get:ExpressionPropertyInterface(i.p)},_name:{value:e.nm}}),n.mn=e.mn,n}function c(e,t,r){function n(t){return e.p.ix===t?n.position:e.r.ix===t?n.rotation:e.pt.ix===t?n.points:e.or.ix===t||"ADBE Vector Star Outer Radius"===t?n.outerRadius:e.os.ix===t?n.outerRoundness:!e.ir||e.ir.ix!==t&&"ADBE Vector Star Inner Radius"!==t?e.is&&e.is.ix===t?n.innerRoundness:null:n.innerRadius}var a=propertyGroupFactory(n,r),i="tm"===t.sh.ty?t.sh.prop:t.sh;return n.propertyIndex=e.ix,i.or.setGroupProperty(PropertyInterface("Outer Radius",a)),i.os.setGroupProperty(PropertyInterface("Outer Roundness",a)),i.pt.setGroupProperty(PropertyInterface("Points",a)),i.p.setGroupProperty(PropertyInterface("Position",a)),i.r.setGroupProperty(PropertyInterface("Rotation",a)),e.ir&&(i.ir.setGroupProperty(PropertyInterface("Inner Radius",a)),i.is.setGroupProperty(PropertyInterface("Inner Roundness",a))),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(i.p)},rotation:{get:ExpressionPropertyInterface(i.r)},points:{get:ExpressionPropertyInterface(i.pt)},outerRadius:{get:ExpressionPropertyInterface(i.or)},outerRoundness:{get:ExpressionPropertyInterface(i.os)},innerRadius:{get:ExpressionPropertyInterface(i.ir)},innerRoundness:{get:ExpressionPropertyInterface(i.is)},_name:{value:e.nm}}),n.mn=e.mn,n}function u(e,t,r){function n(t){return e.p.ix===t?n.position:e.r.ix===t?n.roundness:e.s.ix===t||"Size"===t||"ADBE Vector Rect Size"===t?n.size:null}var a=propertyGroupFactory(n,r),i="tm"===t.sh.ty?t.sh.prop:t.sh;return n.propertyIndex=e.ix,i.p.setGroupProperty(PropertyInterface("Position",a)),i.s.setGroupProperty(PropertyInterface("Size",a)),i.r.setGroupProperty(PropertyInterface("Rotation",a)),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(i.p)},roundness:{get:ExpressionPropertyInterface(i.r)},size:{get:ExpressionPropertyInterface(i.s)},_name:{value:e.nm}}),n.mn=e.mn,n}function f(e,t,r){function n(t){return e.r.ix===t||"Round Corners 1"===t?n.radius:null}var a=propertyGroupFactory(n,r),i=t;return n.propertyIndex=e.ix,i.rd.setGroupProperty(PropertyInterface("Radius",a)),Object.defineProperties(n,{radius:{get:ExpressionPropertyInterface(i.rd)},_name:{value:e.nm}}),n.mn=e.mn,n}function p(e,t,r){function n(t){return e.c.ix===t||"Copies"===t?n.copies:e.o.ix===t||"Offset"===t?n.offset:null}var a=propertyGroupFactory(n,r),i=t;return n.propertyIndex=e.ix,i.c.setGroupProperty(PropertyInterface("Copies",a)),i.o.setGroupProperty(PropertyInterface("Offset",a)),Object.defineProperties(n,{copies:{get:ExpressionPropertyInterface(i.c)},offset:{get:ExpressionPropertyInterface(i.o)},_name:{value:e.nm}}),n.mn=e.mn,n}return function(t,r,n){var a;function i(e){if("number"==typeof e)return 0===(e=void 0===e?1:e)?n:a[e-1];for(var t=0,r=a.length;t<r;){if(a[t]._name===e)return a[t];t+=1}return null}return i.propertyGroup=propertyGroupFactory(i,function(){return n}),a=e(t,r,i.propertyGroup),i.numProperties=a.length,i._name="Contents",i}}(),TextExpressionInterface=function(e){var t;function r(e){return"ADBE Text Document"===e?r.sourceText:null}return Object.defineProperty(r,"sourceText",{get:function(){e.textProperty.getValue();var r=e.textProperty.currentData.t;return t&&r===t.value||((t=new String(r)).value=r||new String(r),Object.defineProperty(t,"style",{get:function(){return{fillColor:e.textProperty.currentData.fc}}})),t}}),r};function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}var FootageInterface=(dataInterfaceFactory=function(e){function t(e){return"Outline"===e?t.outlineInterface():null}return t._name="Outline",t.outlineInterface=function(e){var t="",r=e.getFootageData();function n(e){if(r[e])return t=e,"object"===_typeof(r=r[e])?n:r;var a=e.indexOf(t);if(-1!==a){var i=parseInt(e.substr(a+t.length),10);return"object"===_typeof(r=r[i])?n:r}return""}return function(){return t="",r=e.getFootageData(),n}}(e),t},function(e){function t(e){return"Data"===e?t.dataInterface:null}return t._name="Data",t.dataInterface=dataInterfaceFactory(e),t}),dataInterfaceFactory,interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(e){return interfaces[e]||null}var expressionHelpers={searchExpressions:function(e,t,r){t.x&&(r.k=!0,r.x=!0,r.initiateExpression=ExpressionManager.initiateExpression,r.effectsSequence.push(r.initiateExpression(e,t,r).bind(r)))},getSpeedAtTime:function(e){var t=this.getValueAtTime(e),r=this.getValueAtTime(e+-.01),n=0;if(t.length){var a;for(a=0;a<t.length;a+=1)n+=Math.pow(r[a]-t[a],2);n=100*Math.sqrt(n)}else n=0;return n},getVelocityAtTime:function(e){if(void 0!==this.vel)return this.vel;var t,r,n=-.001,a=this.getValueAtTime(e),i=this.getValueAtTime(e+n);if(a.length)for(t=createTypedArray("float32",a.length),r=0;r<a.length;r+=1)t[r]=(i[r]-a[r])/n;else t=(i-a)/n;return t},getValueAtTime:function(e){return e*=this.elem.globalData.frameRate,(e-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<e?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(e,this._cachingAtTime),this._cachingAtTime.lastFrame=e),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(e){this.propertyGroup=e}};function addPropertyDecorator(){function e(e,t,r){if(!this.k||!this.keyframes)return this.pv;e=e?e.toLowerCase():"";var n,a,i,o,s,l=this.comp.renderedFrame,c=this.keyframes,u=c[c.length-1].t;if(l<=u)return this.pv;if(r?a=u-(n=t?Math.abs(u-this.elem.comp.globalData.frameRate*t):Math.max(0,u-this.elem.data.ip)):((!t||t>c.length-1)&&(t=c.length-1),n=u-(a=c[c.length-1-t].t)),"pingpong"===e){if(Math.floor((l-a)/n)%2!=0)return this.getValueAtTime((n-(l-a)%n+a)/this.comp.globalData.frameRate,0)}else{if("offset"===e){var f=this.getValueAtTime(a/this.comp.globalData.frameRate,0),p=this.getValueAtTime(u/this.comp.globalData.frameRate,0),h=this.getValueAtTime(((l-a)%n+a)/this.comp.globalData.frameRate,0),d=Math.floor((l-a)/n);if(this.pv.length){for(o=(s=new Array(f.length)).length,i=0;i<o;i+=1)s[i]=(p[i]-f[i])*d+h[i];return s}return(p-f)*d+h}if("continue"===e){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),y=this.getValueAtTime((u-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,i=0;i<o;i+=1)s[i]=m[i]+(m[i]-y[i])*((l-u)/this.comp.globalData.frameRate)/5e-4;return s}return m+(l-u)/.001*(m-y)}}return this.getValueAtTime(((l-a)%n+a)/this.comp.globalData.frameRate,0)}function t(e,t,r){if(!this.k)return this.pv;e=e?e.toLowerCase():"";var n,a,i,o,s,l=this.comp.renderedFrame,c=this.keyframes,u=c[0].t;if(l>=u)return this.pv;if(r?a=u+(n=t?Math.abs(this.elem.comp.globalData.frameRate*t):Math.max(0,this.elem.data.op-u)):((!t||t>c.length-1)&&(t=c.length-1),n=(a=c[t].t)-u),"pingpong"===e){if(Math.floor((u-l)/n)%2==0)return this.getValueAtTime(((u-l)%n+u)/this.comp.globalData.frameRate,0)}else{if("offset"===e){var f=this.getValueAtTime(u/this.comp.globalData.frameRate,0),p=this.getValueAtTime(a/this.comp.globalData.frameRate,0),h=this.getValueAtTime((n-(u-l)%n+u)/this.comp.globalData.frameRate,0),d=Math.floor((u-l)/n)+1;if(this.pv.length){for(o=(s=new Array(f.length)).length,i=0;i<o;i+=1)s[i]=h[i]-(p[i]-f[i])*d;return s}return h-(p-f)*d}if("continue"===e){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),y=this.getValueAtTime((u+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,i=0;i<o;i+=1)s[i]=m[i]+(m[i]-y[i])*(u-l)/.001;return s}return m+(m-y)*(u-l)/.001}}return this.getValueAtTime((n-((u-l)%n+u))/this.comp.globalData.frameRate,0)}function r(e,t){if(!this.k)return this.pv;if(e=.5*(e||.4),(t=Math.floor(t||5))<=1)return this.pv;var r,n,a=this.comp.renderedFrame/this.comp.globalData.frameRate,i=a-e,o=t>1?(a+e-i)/(t-1):1,s=0,l=0;for(r=this.pv.length?createTypedArray("float32",this.pv.length):0;s<t;){if(n=this.getValueAtTime(i+s*o),this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]+=n[l];else r+=n;s+=1}if(this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]/=t;else r/=t;return r}function n(e){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var t=this._transformCachingAtTime.v;if(t.cloneFromProps(this.pre.props),this.appliedTransformations<1){var r=this.a.getValueAtTime(e);t.translate(-r[0]*this.a.mult,-r[1]*this.a.mult,r[2]*this.a.mult)}if(this.appliedTransformations<2){var n=this.s.getValueAtTime(e);t.scale(n[0]*this.s.mult,n[1]*this.s.mult,n[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var a=this.sk.getValueAtTime(e),i=this.sa.getValueAtTime(e);t.skewFromAxis(-a*this.sk.mult,i*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var o=this.r.getValueAtTime(e);t.rotate(-o*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var s=this.rz.getValueAtTime(e),l=this.ry.getValueAtTime(e),c=this.rx.getValueAtTime(e),u=this.or.getValueAtTime(e);t.rotateZ(-s*this.rz.mult).rotateY(l*this.ry.mult).rotateX(c*this.rx.mult).rotateZ(-u[2]*this.or.mult).rotateY(u[1]*this.or.mult).rotateX(u[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var f=this.px.getValueAtTime(e),p=this.py.getValueAtTime(e);if(this.data.p.z){var h=this.pz.getValueAtTime(e);t.translate(f*this.px.mult,p*this.py.mult,-h*this.pz.mult)}else t.translate(f*this.px.mult,p*this.py.mult,0)}else{var d=this.p.getValueAtTime(e);t.translate(d[0]*this.p.mult,d[1]*this.p.mult,-d[2]*this.p.mult)}return t}function a(){return this.v.clone(new Matrix)}var i=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(e,t,r){var o=i(e,t,r);return o.dynamicProperties.length?o.getValueAtTime=n.bind(o):o.getValueAtTime=a.bind(o),o.setGroupProperty=expressionHelpers.setGroupProperty,o};var o=PropertyFactory.getProp;PropertyFactory.getProp=function(n,a,i,s,l){var c=o(n,a,i,s,l);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=e,c.loopIn=t,c.smooth=r,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=1===a.a?a.k.length:0,c.propertyIndex=a.ix;var u=0;return 0!==i&&(u=createTypedArray("float32",1===a.a?a.k[0].s.length:a.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:u},expressionHelpers.searchExpressions(n,a,c),c.k&&l.addDynamicProperty(c),c};var s=ShapePropertyFactory.getConstructorFunction(),l=ShapePropertyFactory.getKeyframedConstructorFunction();function c(){}c.prototype={vertices:function(e,t){this.k&&this.getValue();var r,n=this.v;void 0!==t&&(n=this.getValueAtTime(t,0));var a=n._length,i=n[e],o=n.v,s=createSizedArray(a);for(r=0;r<a;r+=1)s[r]="i"===e||"o"===e?[i[r][0]-o[r][0],i[r][1]-o[r][1]]:[i[r][0],i[r][1]];return s},points:function(e){return this.vertices("v",e)},inTangents:function(e){return this.vertices("i",e)},outTangents:function(e){return this.vertices("o",e)},isClosed:function(){return this.v.c},pointOnPath:function(e,t){var r=this.v;void 0!==t&&(r=this.getValueAtTime(t,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(r));for(var n,a=this._segmentsLength,i=a.lengths,o=a.totalLength*e,s=0,l=i.length,c=0;s<l;){if(c+i[s].addedLength>o){var u=s,f=r.c&&s===l-1?0:s+1,p=(o-c)/i[s].addedLength;n=bez.getPointInSegment(r.v[u],r.v[f],r.o[u],r.i[f],p,i[s]);break}c+=i[s].addedLength,s+=1}return n||(n=r.c?[r.v[0][0],r.v[0][1]]:[r.v[r._length-1][0],r.v[r._length-1][1]]),n},vectorOnPath:function(e,t,r){1==e?e=this.v.c:0==e&&(e=.999);var n=this.pointOnPath(e,t),a=this.pointOnPath(e+.001,t),i=a[0]-n[0],o=a[1]-n[1],s=Math.sqrt(Math.pow(i,2)+Math.pow(o,2));return 0===s?[0,0]:"tangent"===r?[i/s,o/s]:[-o/s,i/s]},tangentOnPath:function(e,t){return this.vectorOnPath(e,t,"tangent")},normalOnPath:function(e,t){return this.vectorOnPath(e,t,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([c],s),extendPrototype([c],l),l.prototype.getValueAtTime=function(e){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),e*=this.elem.globalData.frameRate,(e-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<e?this._caching.lastIndex:0,this._cachingAtTime.lastTime=e,this.interpolateShape(e,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},l.prototype.initiateExpression=ExpressionManager.initiateExpression;var u=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(e,t,r,n,a){var i=u(e,t,r,n,a);return i.propertyIndex=t.ix,i.lock=!1,3===r?expressionHelpers.searchExpressions(e,t.pt,i):4===r&&expressionHelpers.searchExpressions(e,t.ks,i),i.k&&e.addDynamicProperty(i),i}}function initialize$1(){addPropertyDecorator()}function addDecorator(){TextProperty.prototype.getExpressionValue=function(e,t){var r=this.calculateExpression(t);if(e.t!==r){var n={};return this.copyData(n,e),n.t=r.toString(),n.__complete=!1,n}return e},TextProperty.prototype.searchProperty=function(){var e=this.searchKeyframes(),t=this.searchExpressions();return this.kf=e||t,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function(e,t){var r,n,a=createNS("feMerge");for(a.setAttribute("result",e),n=0;n<t.length;n+=1)(r=createNS("feMergeNode")).setAttribute("in",t[n]),a.appendChild(r),a.appendChild(r);return a}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(e,t,r,n,a){this.filterManager=t;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=i,i.setAttribute("result",n+"_tint_1"),e.appendChild(i),(i=createNS("feColorMatrix")).setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result",n+"_tint_2"),e.appendChild(i),this.matrixFilter=i;var o=this.createMergeNode(n,[a,n+"_tint_1",n+"_tint_2"]);e.appendChild(o)}function SVGFillFilter(e,t,r,n){this.filterManager=t;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",n),e.appendChild(a),this.matrixFilter=a}function SVGStrokeEffect(e,t,r){this.initialized=!1,this.filterManager=t,this.elem=r,this.paths=[]}function SVGTritoneFilter(e,t,r,n){this.filterManager=t;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),e.appendChild(a);var i=createNS("feComponentTransfer");i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("result",n),this.matrixFilter=i;var o=createNS("feFuncR");o.setAttribute("type","table"),i.appendChild(o),this.feFuncR=o;var s=createNS("feFuncG");s.setAttribute("type","table"),i.appendChild(s),this.feFuncG=s;var l=createNS("feFuncB");l.setAttribute("type","table"),i.appendChild(l),this.feFuncB=l,e.appendChild(i)}function SVGProLevelsFilter(e,t,r,n){this.filterManager=t;var a=this.filterManager.effectElements,i=createNS("feComponentTransfer");(a[10].p.k||0!==a[10].p.v||a[11].p.k||1!==a[11].p.v||a[12].p.k||1!==a[12].p.v||a[13].p.k||0!==a[13].p.v||a[14].p.k||1!==a[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",i)),(a[17].p.k||0!==a[17].p.v||a[18].p.k||1!==a[18].p.v||a[19].p.k||1!==a[19].p.v||a[20].p.k||0!==a[20].p.v||a[21].p.k||1!==a[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",i)),(a[24].p.k||0!==a[24].p.v||a[25].p.k||1!==a[25].p.v||a[26].p.k||1!==a[26].p.v||a[27].p.k||0!==a[27].p.v||a[28].p.k||1!==a[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",i)),(a[31].p.k||0!==a[31].p.v||a[32].p.k||1!==a[32].p.v||a[33].p.k||1!==a[33].p.v||a[34].p.k||0!==a[34].p.v||a[35].p.k||1!==a[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",i)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(i.setAttribute("color-interpolation-filters","sRGB"),e.appendChild(i)),(a[3].p.k||0!==a[3].p.v||a[4].p.k||1!==a[4].p.v||a[5].p.k||1!==a[5].p.v||a[6].p.k||0!==a[6].p.v||a[7].p.k||1!==a[7].p.v)&&((i=createNS("feComponentTransfer")).setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("result",n),e.appendChild(i),this.feFuncRComposed=this.createFeFunc("feFuncR",i),this.feFuncGComposed=this.createFeFunc("feFuncG",i),this.feFuncBComposed=this.createFeFunc("feFuncB",i))}function SVGDropShadowEffect(e,t,r,n,a){var i=t.container.globalData.renderConfig.filterSize,o=t.data.fs||i;e.setAttribute("x",o.x||i.x),e.setAttribute("y",o.y||i.y),e.setAttribute("width",o.width||i.width),e.setAttribute("height",o.height||i.height),this.filterManager=t;var s=createNS("feGaussianBlur");s.setAttribute("in","SourceAlpha"),s.setAttribute("result",n+"_drop_shadow_1"),s.setAttribute("stdDeviation","0"),this.feGaussianBlur=s,e.appendChild(s);var l=createNS("feOffset");l.setAttribute("dx","25"),l.setAttribute("dy","0"),l.setAttribute("in",n+"_drop_shadow_1"),l.setAttribute("result",n+"_drop_shadow_2"),this.feOffset=l,e.appendChild(l);var c=createNS("feFlood");c.setAttribute("flood-color","#00ff00"),c.setAttribute("flood-opacity","1"),c.setAttribute("result",n+"_drop_shadow_3"),this.feFlood=c,e.appendChild(c);var u=createNS("feComposite");u.setAttribute("in",n+"_drop_shadow_3"),u.setAttribute("in2",n+"_drop_shadow_2"),u.setAttribute("operator","in"),u.setAttribute("result",n+"_drop_shadow_4"),e.appendChild(u);var f=this.createMergeNode(n,[n+"_drop_shadow_4",a]);e.appendChild(f)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+n+" 0"),this.matrixFilter.setAttribute("values",r[0]-t[0]+" 0 0 0 "+t[0]+" "+(r[1]-t[1])+" 0 0 0 "+t[1]+" "+(r[2]-t[2])+" 0 0 0 "+t[2]+" 0 0 0 1 0")}},SVGFillFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+t[0]+" 0 0 0 0 "+t[1]+" 0 0 0 0 "+t[2]+" 0 0 0 "+r+" 0")}},SVGStrokeEffect.prototype.initialize=function(){var e,t,r,n,a=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(n=this.elem.maskManager.masksProperties.length,r=0):n=1+(r=this.filterManager.effectElements[0].p.v-1),(t=createNS("g")).setAttribute("fill","none"),t.setAttribute("stroke-linecap","round"),t.setAttribute("stroke-dashoffset",1);r<n;r+=1)e=createNS("path"),t.appendChild(e),this.paths.push({p:e,m:r});if(3===this.filterManager.effectElements[10].p.v){var i=createNS("mask"),o=createElementID();i.setAttribute("id",o),i.setAttribute("mask-type","alpha"),i.appendChild(t),this.elem.globalData.defs.appendChild(i);var s=createNS("g");for(s.setAttribute("mask","url("+getLocationHref()+"#"+o+")");a[0];)s.appendChild(a[0]);this.elem.layerElement.appendChild(s),this.masker=i,t.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(a=this.elem.layerElement.children||this.elem.layerElement.childNodes;a.length;)this.elem.layerElement.removeChild(a[0]);this.elem.layerElement.appendChild(t),this.elem.layerElement.removeAttribute("mask"),t.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=t},SVGStrokeEffect.prototype.renderFrame=function(e){var t;this.initialized||this.initialize();var r,n,a=this.paths.length;for(t=0;t<a;t+=1)if(-1!==this.paths[t].m&&(r=this.elem.maskManager.viewData[this.paths[t].m],n=this.paths[t].p,(e||this.filterManager._mdf||r.prop._mdf)&&n.setAttribute("d",r.lastPath),e||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||r.prop._mdf)){var i;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var o=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),s=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),l=n.getTotalLength();i="0 0 0 "+l*o+" ";var c,u=l*(s-o),f=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,p=Math.floor(u/f);for(c=0;c<p;c+=1)i+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";i+="0 "+10*l+" 0 0"}else i="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;n.setAttribute("stroke-dasharray",i)}if((e||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(e||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(e||this.filterManager.effectElements[3].p._mdf)){var h=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*h[0])+","+bmFloor(255*h[1])+","+bmFloor(255*h[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v,a=n[0]+" "+r[0]+" "+t[0],i=n[1]+" "+r[1]+" "+t[1],o=n[2]+" "+r[2]+" "+t[2];this.feFuncR.setAttribute("tableValues",a),this.feFuncG.setAttribute("tableValues",i),this.feFuncB.setAttribute("tableValues",o)}},SVGProLevelsFilter.prototype.createFeFunc=function(e,t){var r=createNS(e);return r.setAttribute("type","table"),t.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(e,t,r,n,a){for(var i,o,s=0,l=Math.min(e,t),c=Math.max(e,t),u=Array.call(null,{length:256}),f=0,p=a-n,h=t-e;s<=256;)o=(i=s/256)<=l?h<0?a:n:i>=c?h<0?n:a:n+p*Math.pow((i-e)/h,1/r),u[f]=o,f+=1,s+=256/255;return u.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t,r=this.filterManager.effectElements;this.feFuncRComposed&&(e||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(t=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",t),this.feFuncGComposed.setAttribute("tableValues",t),this.feFuncBComposed.setAttribute("tableValues",t)),this.feFuncR&&(e||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(t=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",t)),this.feFuncG&&(e||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(t=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",t)),this.feFuncB&&(e||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(t=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",t)),this.feFuncA&&(e||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(t=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",t))}},extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){if((e||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),e||this.filterManager.effectElements[0].p._mdf){var t=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*t[0]),Math.round(255*t[1]),Math.round(255*t[2])))}if((e||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),e||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,n=(this.filterManager.effectElements[2].p.v-90)*degToRads,a=r*Math.cos(n),i=r*Math.sin(n);this.feOffset.setAttribute("dx",a),this.feOffset.setAttribute("dy",i)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(e,t,r){this.initialized=!1,this.filterManager=t,this.filterElem=e,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}function SVGGaussianBlurEffect(e,t,r,n){e.setAttribute("x","-100%"),e.setAttribute("y","-100%"),e.setAttribute("width","300%"),e.setAttribute("height","300%"),this.filterManager=t;var a=createNS("feGaussianBlur");a.setAttribute("result",n),e.appendChild(a),this.feGaussianBlur=a}function TransformEffect(){}function SVGTransformEffect(e,t){this.init(t)}function CVTransformEffect(e){this.init(e)}return SVGMatte3Effect.prototype.findSymbol=function(e){for(var t=0,r=_svgMatteSymbols.length;t<r;){if(_svgMatteSymbols[t]===e)return _svgMatteSymbols[t];t+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(e,t){var r=e.layerElement.parentNode;if(r){for(var n,a=r.children,i=0,o=a.length;i<o&&a[i]!==e.layerElement;)i+=1;i<=o-2&&(n=a[i+1]);var s=createNS("use");s.setAttribute("href","#"+t),n?r.insertBefore(s,n):r.appendChild(s)}},SVGMatte3Effect.prototype.setElementAsMask=function(e,t){if(!this.findSymbol(t)){var r=createElementID(),n=createNS("mask");n.setAttribute("id",t.layerId),n.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(t);var a=e.globalData.defs;a.appendChild(n);var i=createNS("symbol");i.setAttribute("id",r),this.replaceInParent(t,r),i.appendChild(t.layerElement),a.appendChild(i);var o=createNS("use");o.setAttribute("href","#"+r),n.appendChild(o),t.data.hd=!1,t.show()}e.setMatte(t.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var e=this.filterManager.effectElements[0].p.v,t=this.elem.comp.elements,r=0,n=t.length;r<n;)t[r]&&t[r].data.ind===e&&this.setElementAsMask(this.elem,t[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGGaussianBlurEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=.3*this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=3==r?0:t,a=2==r?0:t;this.feGaussianBlur.setAttribute("stdDeviation",n+" "+a);var i=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",i)}},TransformEffect.prototype.init=function(e){this.effectsManager=e,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(e){if(this._opMdf=!1,this._mdf=!1,e||this.effectsManager._mdf){var t=this.effectsManager.effectElements,r=t[0].p.v,n=t[1].p.v,a=1===t[2].p.v,i=t[3].p.v,o=a?i:t[4].p.v,s=t[5].p.v,l=t[6].p.v,c=t[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(.01*o,.01*i,1),this.matrix.rotate(-c*degToRads),this.matrix.skewFromAxis(-s*degToRads,(l+90)*degToRads),this.matrix.translate(n[0],n[1],0),this._mdf=!0,this.opacity!==t[8].p.v&&(this.opacity=t[8].p.v,this._opMdf=!0)}},extendPrototype([TransformEffect],SVGTransformEffect),extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie},module.exports=factory())}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.amdO={},__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__={};const external_ReactDOM_namespaceObject=window.ReactDOM;var external_ReactDOM_default=__webpack_require__.n(external_ReactDOM_namespaceObject),external_React_=__webpack_require__(1609),external_React_default=__webpack_require__.n(external_React_);const external_Blueprint_Core_namespaceObject=window.Blueprint.Core,external_Blueprint_Select_namespaceObject=window.Blueprint.Select;function extends_extends(){return extends_extends=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)({}).hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},extends_extends.apply(null,arguments)}function memoize(e){var t=Object.create(null);return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}}var reactPropsRegex=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,isPropValid=memoize(function(e){return reactPropsRegex.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91});function sheetForTag(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}function createStyleElement(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}var StyleSheet=function(){function e(e){var t=this;this._insertTag=function(e){var r;r=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,r),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(createStyleElement(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var r=sheetForTag(t);try{r.insertRule(e,r.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach(function(e){return e.parentNode&&e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0},e}(),abs=Math.abs,Utility_from=String.fromCharCode,Utility_assign=Object.assign;function hash(e,t){return 45^Utility_charat(e,0)?(((t<<2^Utility_charat(e,0))<<2^Utility_charat(e,1))<<2^Utility_charat(e,2))<<2^Utility_charat(e,3):0}function trim(e){return e.trim()}function Utility_match(e,t){return(e=t.exec(e))?e[0]:e}function Utility_replace(e,t,r){return e.replace(t,r)}function indexof(e,t){return e.indexOf(t)}function Utility_charat(e,t){return 0|e.charCodeAt(t)}function Utility_substr(e,t,r){return e.slice(t,r)}function Utility_strlen(e){return e.length}function Utility_sizeof(e){return e.length}function Utility_append(e,t){return t.push(e),e}function Utility_combine(e,t){return e.map(t).join("")}var line=1,column=1,Tokenizer_length=0,position=0,character=0,characters="";function node(e,t,r,n,a,i,o){return{value:e,root:t,parent:r,type:n,props:a,children:i,line,column,length:o,return:""}}function Tokenizer_copy(e,t){return Utility_assign(node("",null,null,"",null,null,0),e,{length:-e.length},t)}function Tokenizer_char(){return character}function prev(){return character=position>0?Utility_charat(characters,--position):0,column--,10===character&&(column=1,line--),character}function next(){return character=position<Tokenizer_length?Utility_charat(characters,position++):0,column++,10===character&&(column=1,line++),character}function peek(){return Utility_charat(characters,position)}function caret(){return position}function slice(e,t){return Utility_substr(characters,e,t)}function token(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function alloc(e){return line=column=1,Tokenizer_length=Utility_strlen(characters=e),position=0,[]}function dealloc(e){return characters="",e}function delimit(e){return trim(slice(position-1,delimiter(91===e?e+2:40===e?e+1:e)))}function Tokenizer_tokenize(e){return dealloc(tokenizer(alloc(e)))}function whitespace(e){for(;(character=peek())&&character<33;)next();return token(e)>2||token(character)>3?"":" "}function tokenizer(e){for(;next();)switch(token(character)){case 0:append(identifier(position-1),e);break;case 2:append(delimit(character),e);break;default:append(from(character),e)}return e}function escaping(e,t){for(;--t&&next()&&!(character<48||character>102||character>57&&character<65||character>70&&character<97););return slice(e,caret()+(t<6&&32==peek()&&32==next()))}function delimiter(e){for(;next();)switch(character){case e:return position;case 34:case 39:34!==e&&39!==e&&delimiter(character);break;case 40:41===e&&delimiter(e);break;case 92:next()}return position}function commenter(e,t){for(;next()&&e+character!==57&&(e+character!==84||47!==peek()););return"/*"+slice(t,position-1)+"*"+Utility_from(47===e?e:next())}function identifier(e){for(;!token(peek());)next();return slice(e,position)}var Enum_MS="-ms-",Enum_MOZ="-moz-",Enum_WEBKIT="-webkit-",COMMENT="comm",Enum_RULESET="rule",Enum_DECLARATION="decl",PAGE="@page",MEDIA="@media",IMPORT="@import",CHARSET="@charset",VIEWPORT="@viewport",SUPPORTS="@supports",DOCUMENT="@document",NAMESPACE="@namespace",Enum_KEYFRAMES="@keyframes",FONT_FACE="@font-face",COUNTER_STYLE="@counter-style",FONT_FEATURE_VALUES="@font-feature-values",LAYER="@layer";function Serializer_serialize(e,t){for(var r="",n=Utility_sizeof(e),a=0;a<n;a++)r+=t(e[a],a,e,t)||"";return r}function stringify(e,t,r,n){switch(e.type){case LAYER:if(e.children.length)break;case IMPORT:case Enum_DECLARATION:return e.return=e.return||e.value;case COMMENT:return"";case Enum_KEYFRAMES:return e.return=e.value+"{"+Serializer_serialize(e.children,n)+"}";case Enum_RULESET:e.value=e.props.join(",")}return Utility_strlen(r=Serializer_serialize(e.children,n))?e.return=e.value+"{"+r+"}":""}function middleware(e){var t=Utility_sizeof(e);return function(r,n,a,i){for(var o="",s=0;s<t;s++)o+=e[s](r,n,a,i)||"";return o}}function rulesheet(e){return function(t){t.root||(t=t.return)&&e(t)}}function prefixer(e,t,r,n){if(e.length>-1&&!e.return)switch(e.type){case DECLARATION:return void(e.return=prefix(e.value,e.length,r));case KEYFRAMES:return serialize([copy(e,{value:replace(e.value,"@","@"+WEBKIT)})],n);case RULESET:if(e.length)return combine(e.props,function(t){switch(match(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return serialize([copy(e,{props:[replace(t,/:(read-\w+)/,":"+MOZ+"$1")]})],n);case"::placeholder":return serialize([copy(e,{props:[replace(t,/:(plac\w+)/,":"+WEBKIT+"input-$1")]}),copy(e,{props:[replace(t,/:(plac\w+)/,":"+MOZ+"$1")]}),copy(e,{props:[replace(t,/:(plac\w+)/,MS+"input-$1")]})],n)}return""})}}function namespace(e){e.type===RULESET&&(e.props=e.props.map(function(t){return combine(tokenize(t),function(t,r,n){switch(charat(t,0)){case 12:return substr(t,1,strlen(t));case 0:case 40:case 43:case 62:case 126:return t;case 58:"global"===n[++r]&&(n[r]="",n[++r]="\f"+substr(n[r],r=1,-1));case 32:return 1===r?"":t;default:switch(r){case 0:return e=t,sizeof(n)>1?"":t;case r=sizeof(n)-1:case 2:return 2===r?t+e+e:t+e;default:return t}}})}))}function compile(e){return dealloc(parse("",null,null,null,[""],e=alloc(e),0,[0],e))}function parse(e,t,r,n,a,i,o,s,l){for(var c=0,u=0,f=o,p=0,h=0,d=0,m=1,y=1,g=1,v=0,_="",b=a,x=i,S=n,C=_;y;)switch(d=v,v=next()){case 40:if(108!=d&&58==Utility_charat(C,f-1)){-1!=indexof(C+=Utility_replace(delimit(v),"&","&\f"),"&\f")&&(g=-1);break}case 34:case 39:case 91:C+=delimit(v);break;case 9:case 10:case 13:case 32:C+=whitespace(d);break;case 92:C+=escaping(caret()-1,7);continue;case 47:switch(peek()){case 42:case 47:Utility_append(comment(commenter(next(),caret()),t,r),l);break;default:C+="/"}break;case 123*m:s[c++]=Utility_strlen(C)*g;case 125*m:case 59:case 0:switch(v){case 0:case 125:y=0;case 59+u:-1==g&&(C=Utility_replace(C,/\f/g,"")),h>0&&Utility_strlen(C)-f&&Utility_append(h>32?declaration(C+";",n,r,f-1):declaration(Utility_replace(C," ","")+";",n,r,f-2),l);break;case 59:C+=";";default:if(Utility_append(S=ruleset(C,t,r,c,u,a,s,_,b=[],x=[],f),i),123===v)if(0===u)parse(C,t,S,S,b,i,f,s,x);else switch(99===p&&110===Utility_charat(C,3)?100:p){case 100:case 108:case 109:case 115:parse(e,S,S,n&&Utility_append(ruleset(e,S,S,0,0,a,s,_,a,b=[],f),x),a,x,f,s,n?b:x);break;default:parse(C,S,S,S,[""],x,0,s,x)}}c=u=h=0,m=g=1,_=C="",f=o;break;case 58:f=1+Utility_strlen(C),h=d;default:if(m<1)if(123==v)--m;else if(125==v&&0==m++&&125==prev())continue;switch(C+=Utility_from(v),v*m){case 38:g=u>0?1:(C+="\f",-1);break;case 44:s[c++]=(Utility_strlen(C)-1)*g,g=1;break;case 64:45===peek()&&(C+=delimit(next())),p=peek(),u=f=Utility_strlen(_=C+=identifier(caret())),v++;break;case 45:45===d&&2==Utility_strlen(C)&&(m=0)}}return i}function ruleset(e,t,r,n,a,i,o,s,l,c,u){for(var f=a-1,p=0===a?i:[""],h=Utility_sizeof(p),d=0,m=0,y=0;d<n;++d)for(var g=0,v=Utility_substr(e,f+1,f=abs(m=o[d])),_=e;g<h;++g)(_=trim(m>0?p[g]+" "+v:Utility_replace(v,/&\f/g,p[g])))&&(l[y++]=_);return node(e,t,r,0===a?Enum_RULESET:s,l,c,u)}function comment(e,t,r){return node(e,t,r,COMMENT,Utility_from(Tokenizer_char()),Utility_substr(e,2,-2),0)}function declaration(e,t,r,n){return node(e,t,r,Enum_DECLARATION,Utility_substr(e,0,n),Utility_substr(e,n+1,-1),n)}var identifierWithPointTracking=function(e,t,r){for(var n=0,a=0;n=a,a=peek(),38===n&&12===a&&(t[r]=1),!token(a);)next();return slice(e,position)},toRules=function(e,t){var r=-1,n=44;do{switch(token(n)){case 0:38===n&&12===peek()&&(t[r]=1),e[r]+=identifierWithPointTracking(position-1,t,r);break;case 2:e[r]+=delimit(n);break;case 4:if(44===n){e[++r]=58===peek()?"&\f":"",t[r]=e[r].length;break}default:e[r]+=Utility_from(n)}}while(n=next());return e},getRules=function(e,t){return dealloc(toRules(alloc(e),t))},fixedElements=new WeakMap,compat=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,r=e.parent,n=e.column===r.column&&e.line===r.line;"rule"!==r.type;)if(!(r=r.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||fixedElements.get(r))&&!n){fixedElements.set(e,!0);for(var a=[],i=getRules(t,a),o=r.props,s=0,l=0;s<i.length;s++)for(var c=0;c<o.length;c++,l++)e.props[l]=a[s]?i[s].replace(/&\f/g,o[c]):o[c]+" "+i[s]}}},removeLabel=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},ignoreFlag="emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason",isIgnoringComment=function(e){return"comm"===e.type&&e.children.indexOf(ignoreFlag)>-1},createUnsafeSelectorsAlarm=function(e){return function(t,r,n){if("rule"===t.type&&!e.compat){var a=t.value.match(/(:first|:nth|:nth-last)-child/g);if(a){for(var i=t.parent?t.parent.children:n,o=i.length-1;o>=0;o--){var s=i[o];if(s.line<t.line)break;if(s.column<t.column){if(isIgnoringComment(s))return;break}}a.forEach(function(e){console.error('The pseudo class "'+e+'" is potentially unsafe when doing server-side rendering. Try changing it to "'+e.split("-child")[0]+'-of-type".')})}}}},isImportRule=function(e){return 105===e.type.charCodeAt(1)&&64===e.type.charCodeAt(0)},isPrependedWithRegularRules=function(e,t){for(var r=e-1;r>=0;r--)if(!isImportRule(t[r]))return!0;return!1},nullifyElement=function(e){e.type="",e.value="",e.return="",e.children="",e.props=""},incorrectImportAlarm=function(e,t,r){isImportRule(e)&&(e.parent?(console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles."),nullifyElement(e)):isPrependedWithRegularRules(t,r)&&(console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules."),nullifyElement(e)))};function emotion_cache_browser_esm_prefix(e,t){switch(hash(e,t)){case 5103:return Enum_WEBKIT+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Enum_WEBKIT+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Enum_WEBKIT+e+Enum_MOZ+e+Enum_MS+e+e;case 6828:case 4268:return Enum_WEBKIT+e+Enum_MS+e+e;case 6165:return Enum_WEBKIT+e+Enum_MS+"flex-"+e+e;case 5187:return Enum_WEBKIT+e+Utility_replace(e,/(\w+).+(:[^]+)/,Enum_WEBKIT+"box-$1$2"+Enum_MS+"flex-$1$2")+e;case 5443:return Enum_WEBKIT+e+Enum_MS+"flex-item-"+Utility_replace(e,/flex-|-self/,"")+e;case 4675:return Enum_WEBKIT+e+Enum_MS+"flex-line-pack"+Utility_replace(e,/align-content|flex-|-self/,"")+e;case 5548:return Enum_WEBKIT+e+Enum_MS+Utility_replace(e,"shrink","negative")+e;case 5292:return Enum_WEBKIT+e+Enum_MS+Utility_replace(e,"basis","preferred-size")+e;case 6060:return Enum_WEBKIT+"box-"+Utility_replace(e,"-grow","")+Enum_WEBKIT+e+Enum_MS+Utility_replace(e,"grow","positive")+e;case 4554:return Enum_WEBKIT+Utility_replace(e,/([^-])(transform)/g,"$1"+Enum_WEBKIT+"$2")+e;case 6187:return Utility_replace(Utility_replace(Utility_replace(e,/(zoom-|grab)/,Enum_WEBKIT+"$1"),/(image-set)/,Enum_WEBKIT+"$1"),e,"")+e;case 5495:case 3959:return Utility_replace(e,/(image-set\([^]*)/,Enum_WEBKIT+"$1$`$1");case 4968:return Utility_replace(Utility_replace(e,/(.+:)(flex-)?(.*)/,Enum_WEBKIT+"box-pack:$3"+Enum_MS+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Enum_WEBKIT+e+e;case 4095:case 3583:case 4068:case 2532:return Utility_replace(e,/(.+)-inline(.+)/,Enum_WEBKIT+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Utility_strlen(e)-1-t>6)switch(Utility_charat(e,t+1)){case 109:if(45!==Utility_charat(e,t+4))break;case 102:return Utility_replace(e,/(.+:)(.+)-([^]+)/,"$1"+Enum_WEBKIT+"$2-$3$1"+Enum_MOZ+(108==Utility_charat(e,t+3)?"$3":"$2-$3"))+e;case 115:return~indexof(e,"stretch")?emotion_cache_browser_esm_prefix(Utility_replace(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==Utility_charat(e,t+1))break;case 6444:switch(Utility_charat(e,Utility_strlen(e)-3-(~indexof(e,"!important")&&10))){case 107:return Utility_replace(e,":",":"+Enum_WEBKIT)+e;case 101:return Utility_replace(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Enum_WEBKIT+(45===Utility_charat(e,14)?"inline-":"")+"box$3$1"+Enum_WEBKIT+"$2$3$1"+Enum_MS+"$2box$3")+e}break;case 5936:switch(Utility_charat(e,t+11)){case 114:return Enum_WEBKIT+e+Enum_MS+Utility_replace(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Enum_WEBKIT+e+Enum_MS+Utility_replace(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Enum_WEBKIT+e+Enum_MS+Utility_replace(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Enum_WEBKIT+e+Enum_MS+e+e}return e}var emotion_cache_browser_esm_prefixer=function(e,t,r,n){if(e.length>-1&&!e.return)switch(e.type){case Enum_DECLARATION:e.return=emotion_cache_browser_esm_prefix(e.value,e.length);break;case Enum_KEYFRAMES:return Serializer_serialize([Tokenizer_copy(e,{value:Utility_replace(e.value,"@","@"+Enum_WEBKIT)})],n);case Enum_RULESET:if(e.length)return Utility_combine(e.props,function(t){switch(Utility_match(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return Serializer_serialize([Tokenizer_copy(e,{props:[Utility_replace(t,/:(read-\w+)/,":"+Enum_MOZ+"$1")]})],n);case"::placeholder":return Serializer_serialize([Tokenizer_copy(e,{props:[Utility_replace(t,/:(plac\w+)/,":"+Enum_WEBKIT+"input-$1")]}),Tokenizer_copy(e,{props:[Utility_replace(t,/:(plac\w+)/,":"+Enum_MOZ+"$1")]}),Tokenizer_copy(e,{props:[Utility_replace(t,/:(plac\w+)/,Enum_MS+"input-$1")]})],n)}return""})}},defaultStylisPlugins=[emotion_cache_browser_esm_prefixer],createCache=function(e){var t=e.key;if("css"===t){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))})}var n,a,i=e.stylisPlugins||defaultStylisPlugins,o={},s=[];n=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),function(e){for(var t=e.getAttribute("data-emotion").split(" "),r=1;r<t.length;r++)o[t[r]]=!0;s.push(e)});var l,c=[compat,removeLabel],u=[stringify,rulesheet(function(e){l.insert(e)})],f=middleware(c.concat(i,u));a=function(e,t,r,n){l=r,Serializer_serialize(compile(e?e+"{"+t.styles+"}":t.styles),f),n&&(p.inserted[t.name]=!0)};var p={key:t,sheet:new StyleSheet({key:t,container:n,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:o,registered:{},insert:a};return p.sheet.hydrate(s),p};function murmur2(e){for(var t,r=0,n=0,a=e.length;a>=4;++n,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(n)|(255&e.charCodeAt(++n))<<8|(255&e.charCodeAt(++n))<<16|(255&e.charCodeAt(++n))<<24))+(59797*(t>>>16)<<16),r=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(a){case 3:r^=(255&e.charCodeAt(n+2))<<16;case 2:r^=(255&e.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)}var unitlessKeys={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ILLEGAL_ESCAPE_SEQUENCE_ERROR="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences",UNDEFINED_AS_OBJECT_KEY_ERROR="You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).",hyphenateRegex=/[A-Z]|^ms/g,animationRegex=/_EMO_([^_]+?)_([^]*?)_EMO_/g,isCustomProperty=function(e){return 45===e.charCodeAt(1)},isProcessableValue=function(e){return null!=e&&"boolean"!=typeof e},processStyleName=memoize(function(e){return isCustomProperty(e)?e:e.replace(hyphenateRegex,"-$&").toLowerCase()}),processStyleValue=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(animationRegex,function(e,t,r){return cursor={name:t,styles:r,next:cursor},t})}return 1===unitlessKeys[e]||isCustomProperty(e)||"number"!=typeof t||0===t?t:t+"px"},hyphenatedCache,hyphenPattern,msPattern,oldProcessStyleValue,contentValues,contentValuePattern,noComponentSelectorMessage=null;function handleInterpolation(e,t,r){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return cursor={name:r.name,styles:r.styles,next:cursor},r.name;if(void 0!==r.styles){var n=r.next;if(void 0!==n)for(;void 0!==n;)cursor={name:n.name,styles:n.styles,next:cursor},n=n.next;return r.styles+";"}return createStringFromObject(e,t,r);case"function":if(void 0!==e){var a=cursor,i=r(e);return cursor=a,handleInterpolation(e,t,i)}}if(null==t)return r;var o=t[r];return void 0!==o?o:r}function createStringFromObject(e,t,r){var n="";if(Array.isArray(r))for(var a=0;a<r.length;a++)n+=handleInterpolation(e,t,r[a])+";";else for(var i in r){var o=r[i];if("object"!=typeof o)null!=t&&void 0!==t[o]?n+=i+"{"+t[o]+"}":isProcessableValue(o)&&(n+=processStyleName(i)+":"+processStyleValue(i,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=t&&void 0!==t[o[0]]){var s=handleInterpolation(e,t,o);switch(i){case"animation":case"animationName":n+=processStyleName(i)+":"+s+";";break;default:n+=i+"{"+s+"}"}}else for(var l=0;l<o.length;l++)isProcessableValue(o[l])&&(n+=processStyleName(i)+":"+processStyleValue(i,o[l])+";")}return n}var labelPattern=/label:\s*([^\s;\n{]+)\s*(;|$)/g,sourceMapPattern,cursor,emotion_serialize_browser_esm_serializeStyles=function(e,t,r){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var n=!0,a="";cursor=void 0;var i=e[0];null==i||void 0===i.raw?(n=!1,a+=handleInterpolation(r,t,i)):a+=i[0];for(var o=1;o<e.length;o++)a+=handleInterpolation(r,t,e[o]),n&&(a+=i[o]);labelPattern.lastIndex=0;for(var s,l="";null!==(s=labelPattern.exec(a));)l+="-"+s[1];return{name:murmur2(a)+l,styles:a,next:cursor}},syncFallback=function(e){return e()},useInsertionEffect=!!external_React_.useInsertionEffect&&external_React_.useInsertionEffect,emotion_use_insertion_effect_with_fallbacks_browser_esm_useInsertionEffectAlwaysWithSyncFallback=useInsertionEffect||syncFallback,useInsertionEffectWithLayoutFallback=useInsertionEffect||external_React_.useLayoutEffect,isBrowser=!0,emotion_element_c39617d8_browser_esm_hasOwnProperty={}.hasOwnProperty,EmotionCacheContext=external_React_.createContext("undefined"!=typeof HTMLElement?createCache({key:"css"}):null),CacheProvider=EmotionCacheContext.Provider,__unsafe_useEmotionCache=function(){return useContext(EmotionCacheContext)},withEmotionCache=function(e){return(0,external_React_.forwardRef)(function(t,r){var n=(0,external_React_.useContext)(EmotionCacheContext);return e(t,n,r)})};isBrowser||(withEmotionCache=function(e){return function(t){var r=(0,external_React_.useContext)(EmotionCacheContext);return null===r?(r=createCache({key:"css"}),external_React_.createElement(EmotionCacheContext.Provider,{value:r},e(t,r))):e(t,r)}});var ThemeContext=external_React_.createContext({}),useTheme=function(){return React.useContext(ThemeContext)},getTheme=function(e,t){return"function"==typeof t?t(e):_extends({},e,t)},createCacheWithTheme=null,ThemeProvider=function(e){var t=React.useContext(ThemeContext);return e.theme!==t&&(t=createCacheWithTheme(t)(e.theme)),React.createElement(ThemeContext.Provider,{value:t},e.children)};function withTheme(e){var t=e.displayName||e.name||"Component",r=function(t,r){var n=React.useContext(ThemeContext);return React.createElement(e,_extends({theme:n,ref:r},t))},n=React.forwardRef(r);return n.displayName="WithTheme("+t+")",hoistNonReactStatics(n,e)}var getLastPart=function(e){var t=e.split(".");return t[t.length-1]},getFunctionNameFromStackTraceLine=function(e){var t=/^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(e);return t||(t=/^([A-Za-z0-9$.]+)@/.exec(e))?getLastPart(t[1]):void 0},internalReactFunctionNames=new Set(["renderWithHooks","processChild","finishClassComponent","renderToString"]),sanitizeIdentifier=function(e){return e.replace(/\$/g,"-")},getLabelFromStackTrace=function(e){if(e)for(var t=e.split("\n"),r=0;r<t.length;r++){var n=getFunctionNameFromStackTraceLine(t[r]);if(n){if(internalReactFunctionNames.has(n))break;if(/^[A-Z]/.test(n))return sanitizeIdentifier(n)}}},typePropName="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",labelPropName="__EMOTION_LABEL_PLEASE_DO_NOT_USE__",createEmotionProps=function(e,t){var r={};for(var n in t)emotion_element_c39617d8_browser_esm_hasOwnProperty.call(t,n)&&(r[n]=t[n]);return r[typePropName]=e,r},Insertion=function(e){var t=e.cache,r=e.serialized,n=e.isStringTag;return registerStyles(t,r,n),useInsertionEffectAlwaysWithSyncFallback(function(){return insertStyles(t,r,n)}),null},Emotion=null,Emotion$1=null,emotion_utils_browser_esm_isBrowser=!0;function emotion_utils_browser_esm_getRegisteredStyles(e,t,r){var n="";return r.split(" ").forEach(function(r){void 0!==e[r]?t.push(e[r]+";"):n+=r+" "}),n}var emotion_utils_browser_esm_registerStyles=function(e,t,r){var n=e.key+"-"+t.name;!1!==r&&!1!==emotion_utils_browser_esm_isBrowser||void 0!==e.registered[n]||(e.registered[n]=t.styles)},emotion_utils_browser_esm_insertStyles=function(e,t,r){emotion_utils_browser_esm_registerStyles(e,t,r);var n=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+n:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}},testOmitPropsOnStringTag=isPropValid,testOmitPropsOnComponent=function(e){return"theme"!==e},getDefaultShouldForwardProp=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?testOmitPropsOnStringTag:testOmitPropsOnComponent},composeShouldForwardProps=function(e,t,r){var n;if(t){var a=t.shouldForwardProp;n=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof n&&r&&(n=e.__emotion_forwardProp),n},emotion_styled_base_browser_esm_ILLEGAL_ESCAPE_SEQUENCE_ERROR="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences",emotion_styled_base_browser_esm_Insertion=function(e){var t=e.cache,r=e.serialized,n=e.isStringTag;return emotion_utils_browser_esm_registerStyles(t,r,n),emotion_use_insertion_effect_with_fallbacks_browser_esm_useInsertionEffectAlwaysWithSyncFallback(function(){return emotion_utils_browser_esm_insertStyles(t,r,n)}),null},createStyled=function e(t,r){var n,a,i=t.__emotion_real===t,o=i&&t.__emotion_base||t;void 0!==r&&(n=r.label,a=r.target);var s=composeShouldForwardProps(t,r,i),l=s||getDefaultShouldForwardProp(o),c=!l("as");return function(){var u=arguments,f=i&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==n&&f.push("label:"+n+";"),null==u[0]||void 0===u[0].raw)f.push.apply(f,u);else{f.push(u[0][0]);for(var p=u.length,h=1;h<p;h++)f.push(u[h],u[0][h])}var d=withEmotionCache(function(e,t,r){var n=c&&e.as||o,i="",u=[],p=e;if(null==e.theme){for(var h in p={},e)p[h]=e[h];p.theme=external_React_.useContext(ThemeContext)}"string"==typeof e.className?i=emotion_utils_browser_esm_getRegisteredStyles(t.registered,u,e.className):null!=e.className&&(i=e.className+" ");var d=emotion_serialize_browser_esm_serializeStyles(f.concat(u),t.registered,p);i+=t.key+"-"+d.name,void 0!==a&&(i+=" "+a);var m=c&&void 0===s?getDefaultShouldForwardProp(n):l,y={};for(var g in e)c&&"as"===g||m(g)&&(y[g]=e[g]);return y.className=i,y.ref=r,external_React_.createElement(external_React_.Fragment,null,external_React_.createElement(emotion_styled_base_browser_esm_Insertion,{cache:t,serialized:d,isStringTag:"string"==typeof n}),external_React_.createElement(n,y))});return d.displayName=void 0!==n?n:"Styled("+("string"==typeof o?o:o.displayName||o.name||"Component")+")",d.defaultProps=t.defaultProps,d.__emotion_real=d,d.__emotion_base=o,d.__emotion_styles=f,d.__emotion_forwardProp=s,Object.defineProperty(d,"toString",{value:function(){return"."+a}}),d.withComponent=function(t,n){return e(t,extends_extends({},r,n,{shouldForwardProp:composeShouldForwardProps(d,n,!0)})).apply(void 0,f)},d}},tags=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],newStyled=createStyled.bind();function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}function _regeneratorRuntime(){var e=_regenerator(),t=e.m(_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new _OverloadYield(e,t)},AsyncIterator:_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?_regeneratorAsyncGen:_regeneratorAsync)(i(e),t,r,a,o)},keys:_regeneratorKeys,values:_regeneratorValues}})()}function _regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(_typeof(e)+" is not iterable")}function _regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function _regeneratorAsync(e,t,r,n,a){var i=_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function _regeneratorAsyncGen(e,t,r,n,a){return new _regeneratorAsyncIterator(_regenerator().w(e,t,r,n),a||Promise)}function _regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof _OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(_regeneratorDefine2(_regeneratorAsyncIterator.prototype),_regeneratorDefine2(_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function _regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return _regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,_regeneratorDefine2(f,"constructor",c),_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",_regeneratorDefine2(c,a,"GeneratorFunction"),_regeneratorDefine2(f),_regeneratorDefine2(f,a,"Generator"),_regeneratorDefine2(f,n,function(){return this}),_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(_regenerator=function(){return{w:i,m:p}})()}function _regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}_regeneratorDefine2=function(e,t,r,n){function i(t,r){_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},_regeneratorDefine2(e,t,r,n)}function _OverloadYield(e,t){this.v=e,this.k=t}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach(function(t){_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function _defineProperty(e,t,r){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"==_typeof(t)?t:t+""}function _toPrimitive(e,t){if("object"!=_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function _iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function _arrayWithHoles(e){if(Array.isArray(e))return e}tags.forEach(function(e){newStyled[e]=newStyled(e)});var useBlockInfo=function(e){var t=e.refUid,r=e.unifiedData,n=_slicedToArray(external_React_.useState({}),2),a=n[0],i=n[1],o=_slicedToArray(external_React_.useState(!1),2),s=o[0],l=o[1],c=external_React_.useCallback(_asyncToGenerator(_regeneratorRuntime().mark(function e(){var n;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t&&r){e.next=2;break}return e.abrupt("return");case 2:return l(!0),e.prev=3,r.dataManagement.clearBlockInfoCache(t),e.next=7,r.dataManagement.getBlockInfo(t,!0);case 7:(n=e.sent)&&i(_objectSpread(_objectSpread({},n),{},{refUid:t})),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(3),console.error("🔍 [useBlockInfo] 刷新block信息失败:",e.t0);case 14:return e.prev=14,l(!1),e.finish(14);case 17:case"end":return e.stop()}},e,null,[[3,11,14,17]])})),[t,r]);return external_React_.useEffect(function(){if(t&&r){var e=function(){var e=_asyncToGenerator(_regeneratorRuntime().mark(function e(){var n;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return l(!0),e.prev=1,e.next=4,r.dataManagement.getBlockInfo(t);case 4:(n=e.sent)&&i(_objectSpread(_objectSpread({},n),{},{refUid:t})),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),console.error("🔍 [useBlockInfo] 获取block信息失败:",e.t0);case 11:return e.prev=11,l(!1),e.finish(11);case 14:case"end":return e.stop()}},e,null,[[1,8,11,14]])}));return function(){return e.apply(this,arguments)}}();e()}},[t,r]),{blockInfo:a,isLoading:s,refreshBlockInfo:c}},clearBlockInfoCache=function(){console.warn("🔄 clearBlockInfoCache已废弃，请使用unifiedData.dataManagement.clearBlockInfoCache")},clearAllBlockInfoCache=function(){console.warn("🔄 clearAllBlockInfoCache已废弃，请使用unifiedData.dataManagement.clearBlockInfoCache")};const hooks_useBlockInfo=useBlockInfo;var models_session=__webpack_require__(1614);function useCurrentCardData_slicedToArray(e,t){return useCurrentCardData_arrayWithHoles(e)||useCurrentCardData_iterableToArrayLimit(e,t)||useCurrentCardData_unsupportedIterableToArray(e,t)||useCurrentCardData_nonIterableRest()}function useCurrentCardData_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useCurrentCardData_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return useCurrentCardData_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?useCurrentCardData_arrayLikeToArray(e,t):void 0}}function useCurrentCardData_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function useCurrentCardData_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function useCurrentCardData_arrayWithHoles(e){if(Array.isArray(e))return e}var useCurrentCardData_generateNewSession=function(e){return{reviewMode:e.reviewMode}},getResolvedCardData=function(e){for(var t,r=e.sessions,n=e.reviewMode,a=r.length-1;a>=0;a--){var i=r[a];if(i.reviewMode===n){t=i;break}}return t||useCurrentCardData_generateNewSession({reviewMode:n})};function useCurrentCardData(e){var t=e.currentCardRefUid,r=e.unifiedData,n=external_React_.useMemo(function(){return t&&r&&r.cardDetails[t]||null},[t,r]),a=(null==n?void 0:n.sessions)||[],i=null==n?void 0:n.latestSession,o=useCurrentCardData_slicedToArray(external_React_.useState((null==i?void 0:i.reviewMode)||models_session.Z.DefaultSpacedInterval),2),s=o[0],l=o[1],c=useCurrentCardData_slicedToArray(external_React_.useState(),2),u=c[0],f=c[1],p=external_React_.useMemo(function(){if(n)return u&&u!==(null==i?void 0:i.reviewMode)?getResolvedCardData({sessions:a,reviewMode:u}):i||useCurrentCardData_generateNewSession({reviewMode:models_session.Z.DefaultSpacedInterval})},[n,a,i,u]);return external_React_.useEffect(function(){f(void 0),l((null==i?void 0:i.reviewMode)||models_session.Z.DefaultSpacedInterval)},[t,i]),{cardInfo:n,currentCardData:p,reviewMode:u||s,setReviewModeOverride:f}}var _this=void 0,sleep=function(e){return new Promise(function(t){return setTimeout(t,e)})},debounce=function(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){for(var n=arguments.length,a=new Array(n),i=0;i<n;i++)a[i]=arguments[i];clearTimeout(t),t=setTimeout(function(){e.apply(_this,a)},r)}},smartDebounce=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300,r=new Map;return function(n){for(var a=arguments.length,i=new Array(a>1?a-1:0),o=1;o<a;o++)i[o-1]=arguments[o];r.has(n)&&clearTimeout(r.get(n));var s=setTimeout(function(){r.delete(n),e.apply(_this,i)},t);r.set(n,s)}},cancellablePromise=function(e){var t=!1;return{promise:new Promise(function(r,n){e.then(function(e){return t?n(new Error("Cancelled")):r(e)},function(e){return n(t?new Error("Cancelled"):e)})}),cancel:function(){t=!0}}},batchUpdate=function(e){var t=window.ReactDOM;"undefined"!=typeof window&&t&&t.unstable_batchedUpdates?t.unstable_batchedUpdates(function(){e.forEach(function(e){return e()})}):e.forEach(function(e){return e()})},date=__webpack_require__(8825),dist=__webpack_require__(3049);const done_namespaceObject=JSON.parse('{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.1.1","a":"setya.play@gmail.com","k":"Dancing Book","d":"Dancing Book","tc":"Green Lottie"},"fr":30,"ip":0,"op":120,"w":634,"h":619,"nm":"03","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"tl1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[118,222.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[169,105.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[118,222.75,0]}],"ix":2},"a":{"a":0,"k":[17.522,17.522,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.539],[9.539,0],[0,9.539],[-9.539,0]],"o":[[0,9.539],[-9.539,0],[0,-9.539],[9.539,0]],"v":[[17.272,0],[0,17.272],[-17.272,0],[0,-17.272]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[17.522,17.522],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"A 3","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[187.369,210.494,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[-76.375,87.583]],"o":[[-25.994,66.543],[0,0]],"v":[[-172.884,-14.244],[-217.595,-44.106]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[-10.507,91.391]],"o":[[-26.286,10.88],[0,0]],"v":[[-198.209,-84.649],[-292.592,-162.835]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[-84.871,73.158]],"o":[[-42.763,79.596],[0,0]],"v":[[-171.867,-13.618],[-210.432,-48.87]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"pipi","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[112.353,123.49,0]}],"ix":2},"a":{"a":0,"k":[78.343,3.81,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.802,2.03],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[13.884,5.591],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"mlt","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[117.66,146.199,0]}],"ix":2},"a":{"a":0,"k":[34.609,26.648,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"t":480,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"st","c":{"a":0,"k":[0.073356396544,0.623529411765,0.508910055722,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[34.609,26.649],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"mata","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[109.492,98.752,0]}],"ix":2},"a":{"a":0,"k":[57.588,8.163,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[107.012,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[8.163,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"DEPAN","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":30,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":60,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":90,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":120,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":150,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":180,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":210,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":240,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":270,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":300,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":330,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":360,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":390,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":420,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":450,"s":[-5]},{"t":480,"s":[0]}],"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":30,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":60,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":90,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":120,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":150,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":180,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":210,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":240,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":270,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":300,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":330,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":360,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":390,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":420,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":450,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[339.061,358.247,0]}],"ix":2},"a":{"a":0,"k":[111.43,259.241,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.113725490196,0.866666666667,0.709803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[111.839,129.928],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"A 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[415,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[84,-49]],"o":[[0,0],[0,0]],"v":[[7.5,71.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[79,-65]],"o":[[0,0],[0,0]],"v":[[-9,61],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[85.5,-54.5]],"o":[[0,0],[0,0]],"v":[[4.322,65.143],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"A","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[317,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[91,-45]],"o":[[0,0],[0,0]],"v":[[-10.5,81.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[45,-80]],"o":[[0,0],[0,0]],"v":[[-31,36],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[93,-43.5]],"o":[[0,0],[0,0]],"v":[[-14.678,75.643],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"sp2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[375.268,512.462,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"sp1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[276.7,512.087,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"tl2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[515.75,199.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[537.75,145.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[515.75,199.25,0]}],"ix":2},"a":{"a":0,"k":[19.865,19.865,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.68,-8.801],[-8.801,3.68],[3.68,8.8],[8.801,-3.679]],"o":[[3.68,8.801],[8.8,-3.679],[-3.68,-8.801],[-8.8,3.68]],"v":[[-15.935,6.662],[6.663,15.935],[15.935,-6.662],[-6.663,-15.935]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.865,19.865],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"buku Outlines","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[34.432,144.16],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"t":480,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"t":480,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"t":480,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"t":480,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":4,"nm":"buku Outlines 2","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,-100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"t":480,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"t":480,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"t":480,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"t":480,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[342,510,0],"ix":2},"a":{"a":0,"k":[25,200.5,0],"ix":1},"s":{"a":0,"k":[100,30,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[244,244],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.490195988674,0,0.180391992307,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":0,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117647059,0.898039215686,0.901960784314,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[25,200.5],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":4,"nm":"A 4","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":9,"ix":10},"p":{"a":0,"k":[-84.216,186.894,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[22.5,88]],"o":[[18.587,75.802],[0,0]],"v":[[76.863,-182.172],[11.005,-160.722]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[75.196,9.865]],"o":[[15.193,45.565],[0,0]],"v":[[77.121,-180.648],[-5.782,-88.168]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[22.5,88]],"o":[[22.937,66.507],[0,0]],"v":[[75.212,-181.404],[12.726,-149.858]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0}],"markers":[]}');var _templateObject,_excluded=["className","wrapperClassName"];function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function Tooltip_extends(){return Tooltip_extends=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)({}).hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Tooltip_extends.apply(null,arguments)}function _objectWithoutProperties(e,t){if(null==e)return{};var r,n,a=_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function _objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r={};for(var n in e)if({}.hasOwnProperty.call(e,n)){if(-1!==t.indexOf(n))continue;r[n]=e[n]}return r}var Wrapper=function(e){var t=e.className,r=e.wrapperClassName,n=_objectWithoutProperties(e,_excluded);return React.createElement(external_Blueprint_Core_namespaceObject.Tooltip,Tooltip_extends({className:r,popoverClassName:t},n))},Tooltip=newStyled(Wrapper)(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n  &.bp3-tooltip .bp3-popover-content {\n    font-size: 12px;\n    padding: 2px 5px;\n  }\n"])));const components_Tooltip=Tooltip;var mediaQueries={sm:"@media (min-width: 420px)",md:"@media (min-width: 768px)",lg:"@media (min-width: 1024px)",xl:"@media (min-width: 1280px)","2xl":"@media (min-width: 1536px)",mobilePortrait:"@media (max-width: 768px) and (orientation: portrait)"};const utils_mediaQueries=mediaQueries;var useZIndexFix=function(e){(0,external_React_.useEffect)(function(){var t="roam-memo-zindex-fix";if(e){if(document.getElementById(t))return;var r=document.createElement("style");r.id=t,r.type="text/css",r.textContent="\n        /*\n         * Roam Research 图片悬浮窗口的层级提升\n         * 解决被 Memo 插件遮挡的问题\n         */\n        \n        /* 提升 Roam 图片浮层的 Z-index */\n        #rm-modal-portal {\n          z-index: 1002 !important; /* Roam 图片浮层整体的 z-index，最高 */\n        }\n        \n        #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n          z-index: 1001 !important; /* 确保图片实际内容也高 */\n        }\n        \n        /* 提升 Roam 双链弹出菜单的 Z-index */\n        .rm-autocomplete__results {\n          z-index: 1000 !important; /* 使用一个非常高的值，确保显示在所有其他元素之上 */\n          width: auto !important; /* 调整为自适应宽度 */\n          max-width: unset !important; /* 取消最大宽度限制 */\n          min-width: 150px !important; /* 设置最小宽度，防止过窄 */\n        }\n        \n        /* 提升其他可能被遮挡的 Roam UI 元素 */\n        .bp3-popover {\n          z-index: 999 !important;\n        }\n        \n        .bp3-tooltip {\n          z-index: 998 !important;\n        }\n      ",document.head.appendChild(r)}else{var n=document.getElementById(t);n&&document.head.removeChild(n)}return function(){var e=document.getElementById(t);e&&document.head.removeChild(e)}},[e])},useFocusFix=function(e){(0,external_React_.useEffect)(function(){if(e){var t=function(e){var t=e.target;t&&t.matches&&t.matches("textarea.dont-unfocus-block")&&(e.preventDefault(),e.stopPropagation())};return document.addEventListener("blur",t,!0),function(){document.removeEventListener("blur",t,!0)}}},[e])},simulateMouseEvents=function(e){(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).forEach(function(t){return e.dispatchEvent(new MouseEvent(t,{view:window,bubbles:!0,cancelable:!0,buttons:1}))})},simulateMouseClick=function(e){simulateMouseEvents(e,["mouseenter","mouseover","mousedown","click","mouseup"])};function useCloze_typeof(e){return useCloze_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},useCloze_typeof(e)}function useCloze_slicedToArray(e,t){return useCloze_arrayWithHoles(e)||useCloze_iterableToArrayLimit(e,t)||useCloze_unsupportedIterableToArray(e,t)||useCloze_nonIterableRest()}function useCloze_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useCloze_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return useCloze_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?useCloze_arrayLikeToArray(e,t):void 0}}function useCloze_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function useCloze_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function useCloze_arrayWithHoles(e){if(Array.isArray(e))return e}function useCloze_regeneratorRuntime(){var e=useCloze_regenerator(),t=e.m(useCloze_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,useCloze_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(useCloze_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new useCloze_OverloadYield(e,t)},AsyncIterator:useCloze_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?useCloze_regeneratorAsyncGen:useCloze_regeneratorAsync)(i(e),t,r,a,o)},keys:useCloze_regeneratorKeys,values:useCloze_regeneratorValues}})()}function useCloze_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(useCloze_typeof(e)+" is not iterable")}function useCloze_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function useCloze_regeneratorAsync(e,t,r,n,a){var i=useCloze_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function useCloze_regeneratorAsyncGen(e,t,r,n,a){return new useCloze_regeneratorAsyncIterator(useCloze_regenerator().w(e,t,r,n),a||Promise)}function useCloze_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof useCloze_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(useCloze_regeneratorDefine2(useCloze_regeneratorAsyncIterator.prototype),useCloze_regeneratorDefine2(useCloze_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),useCloze_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function useCloze_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return useCloze_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(useCloze_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,useCloze_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,useCloze_regeneratorDefine2(f,"constructor",c),useCloze_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",useCloze_regeneratorDefine2(c,a,"GeneratorFunction"),useCloze_regeneratorDefine2(f),useCloze_regeneratorDefine2(f,a,"Generator"),useCloze_regeneratorDefine2(f,n,function(){return this}),useCloze_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(useCloze_regenerator=function(){return{w:i,m:p}})()}function useCloze_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}useCloze_regeneratorDefine2=function(e,t,r,n){function i(t,r){useCloze_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},useCloze_regeneratorDefine2(e,t,r,n)}function useCloze_OverloadYield(e,t){this.v=e,this.k=t}function useCloze_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function useCloze_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?useCloze_ownKeys(Object(r),!0).forEach(function(t){useCloze_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):useCloze_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function useCloze_defineProperty(e,t,r){return(t=useCloze_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function useCloze_toPropertyKey(e){var t=useCloze_toPrimitive(e,"string");return"symbol"==useCloze_typeof(t)?t:t+""}function useCloze_toPrimitive(e,t){if("object"!=useCloze_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=useCloze_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function useCloze_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function useCloze_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){useCloze_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){useCloze_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function getAllTextNodes(e){return Array.from(e.childNodes).filter(function(e){var t;return 3===e.nodeType&&(null===(t=e.textContent)||void 0===t?void 0:t.trim().length)&&e.textContent.trim().length>1})}function wrapMatches(e,t){for(var r=getAllTextNodes(e),n=0;n<r.length;){var a=r[n],i=a.textContent;if(i){var o=t.exec(i);if(o){var s=o[0],l=o.index,c=l+s.length,u=i.slice(0,l),f=i.slice(c),p=document.createElement("span");p.classList.add("roam-memo-cloze"),p.textContent=s;var h=document.createTextNode(u),d=document.createTextNode(f);a.parentNode&&(a.parentNode.insertBefore(h,a),a.parentNode.insertBefore(p,a),a.parentNode.insertBefore(d,a),a.parentNode.removeChild(a)),r=getAllTextNodes(e)}else n++}else n++}}var useCustomCloze=function(e){var t=e.renderedBlockElm,r=e.setClozeCounts;external_React_.useEffect(function(){useCloze_asyncToGenerator(useCloze_regeneratorRuntime().mark(function e(){var n,a,i,o;return useCloze_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:if(n=t.querySelector(".rm-block-main .dont-unfocus-block span")){e.next=5;break}return e.abrupt("return");case 5:a=new RegExp("".concat("{","(.+?)").concat("}"),"gs"),i=new RegExp(a,"gs"),wrapMatches(n,i),o=t.querySelectorAll(".roam-memo-cloze"),r(function(e){return useCloze_objectSpread(useCloze_objectSpread({},e),{},{custom:o.length})});case 12:case"end":return e.stop()}},e)}))()},[t])},useCloze=function(e){var t=e.renderedBlockElm,r=e.hasClozeCallback,n=useCloze_slicedToArray(external_React_.useState({default:void 0,custom:void 0}),2),a=n[0],i=n[1];external_React_.useEffect(function(){useCloze_asyncToGenerator(useCloze_regeneratorRuntime().mark(function e(){return useCloze_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:i(function(e){return useCloze_objectSpread(useCloze_objectSpread({},e),{},{default:0})});case 3:case"end":return e.stop()}},e)}))()},[t]),useCustomCloze({renderedBlockElm:t,setClozeCounts:i}),external_React_.useEffect(function(){if(!Object.values(a).every(function(e){return void 0===e})){var e=Object.values(a).reduce(function(e,t){return(e||0)+(t||0)},0);r(e>0)}},[a])};const hooks_useCloze=useCloze;function CardBlock_typeof(e){return CardBlock_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},CardBlock_typeof(e)}var CardBlock_templateObject,_templateObject2,_templateObject3;function CardBlock_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function CardBlock_regeneratorRuntime(){var e=CardBlock_regenerator(),t=e.m(CardBlock_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,CardBlock_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(CardBlock_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new CardBlock_OverloadYield(e,t)},AsyncIterator:CardBlock_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?CardBlock_regeneratorAsyncGen:CardBlock_regeneratorAsync)(i(e),t,r,a,o)},keys:CardBlock_regeneratorKeys,values:CardBlock_regeneratorValues}})()}function CardBlock_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(CardBlock_typeof(e)+" is not iterable")}function CardBlock_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function CardBlock_regeneratorAsync(e,t,r,n,a){var i=CardBlock_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function CardBlock_regeneratorAsyncGen(e,t,r,n,a){return new CardBlock_regeneratorAsyncIterator(CardBlock_regenerator().w(e,t,r,n),a||Promise)}function CardBlock_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof CardBlock_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(CardBlock_regeneratorDefine2(CardBlock_regeneratorAsyncIterator.prototype),CardBlock_regeneratorDefine2(CardBlock_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),CardBlock_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function CardBlock_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return CardBlock_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(CardBlock_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,CardBlock_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,CardBlock_regeneratorDefine2(f,"constructor",c),CardBlock_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",CardBlock_regeneratorDefine2(c,a,"GeneratorFunction"),CardBlock_regeneratorDefine2(f),CardBlock_regeneratorDefine2(f,a,"Generator"),CardBlock_regeneratorDefine2(f,n,function(){return this}),CardBlock_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(CardBlock_regenerator=function(){return{w:i,m:p}})()}function CardBlock_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}CardBlock_regeneratorDefine2=function(e,t,r,n){function i(t,r){CardBlock_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},CardBlock_regeneratorDefine2(e,t,r,n)}function CardBlock_OverloadYield(e,t){this.v=e,this.k=t}function CardBlock_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function CardBlock_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){CardBlock_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){CardBlock_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function CardBlock_slicedToArray(e,t){return CardBlock_arrayWithHoles(e)||CardBlock_iterableToArrayLimit(e,t)||CardBlock_unsupportedIterableToArray(e,t)||CardBlock_nonIterableRest()}function CardBlock_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function CardBlock_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return CardBlock_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?CardBlock_arrayLikeToArray(e,t):void 0}}function CardBlock_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function CardBlock_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function CardBlock_arrayWithHoles(e){if(Array.isArray(e))return e}var CardBlock=function(e){var t=e.refUid,r=e.showAnswers,n=e.setHasCloze,a=e.breadcrumbs,i=e.showBreadcrumbs,o=external_React_.useRef(null),s=CardBlock_slicedToArray(external_React_.useState(null),2),l=s[0],c=s[1],u=CardBlock_slicedToArray(external_React_.useState(!1),2),f=u[0],p=u[1];hooks_useCloze({renderedBlockElm:l,hasClozeCallback:n});var h=CardBlock_slicedToArray(external_React_.useState(0),2),d=h[0],m=h[1],y=external_React_.useRef(t),g=external_React_.useRef(null);external_React_.useEffect(function(){y.current=t},[t]);var v=external_React_.useRef(null),_=external_React_.useCallback(function(){m(function(e){return e+1})},[]);return external_React_.useEffect(function(){var e=function(){var e=CardBlock_asyncToGenerator(CardBlock_regeneratorRuntime().mark(function e(){var t,r,n,a;return CardBlock_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=y.current,o.current){e.next=3;break}return e.abrupt("return");case 3:return p(!0),e.prev=4,e.next=7,window.roamAlphaAPI.ui.components.unmountNode({el:o.current});case 7:return e.next=9,window.roamAlphaAPI.ui.components.renderBlock({uid:t,el:o.current});case 9:if(r=o.current.querySelector(".rm-block"),c(r),!(null==r?void 0:r.classList.contains("rm-block--closed"))){e.next=19;break}if(!(n=o.current.querySelector(".block-expand .rm-caret"))){e.next=19;break}return simulateMouseClick(n),e.next=18,sleep(50);case 18:simulateMouseClick(n);case 19:g.current&&g.current.disconnect(),a=new MutationObserver(function(e){e.forEach(function(e){"childList"===e.type&&e.addedNodes.length>0&&e.addedNodes.forEach(function(e){if(e instanceof HTMLElement){var t=e.querySelectorAll("textarea");t.length>0&&t.forEach(function(e){e.removeEventListener("blur",_),e.addEventListener("blur",_)})}})})}),a.observe(o.current,{childList:!0,subtree:!0}),g.current=a;case 23:return e.prev=23,p(!1),e.finish(23);case 26:case"end":return e.stop()}},e,null,[[4,,23,26]])}));return function(){return e.apply(this,arguments)}}(),t=smartDebounce(e,50);return v.current=function(){return t(y.current)},function(){v.current=null,g.current&&(g.current.disconnect(),g.current=null)}},[_]),external_React_.useEffect(function(){v.current&&v.current()},[t,d]),external_React_.createElement("div",null,a&&i&&external_React_.createElement(Breadcrumbs,{breadcrumbs:a}),f&&external_React_.createElement(LoadingOverlay,null,"加载中..."),external_React_.createElement(ContentWrapper,{ref:o,showAnswers:r,isLoading:f}))},LoadingOverlay=newStyled.div(CardBlock_templateObject||(CardBlock_templateObject=CardBlock_taggedTemplateLiteral(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #666;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n"]))),ContentWrapper=newStyled.div(_templateObject2||(_templateObject2=CardBlock_taggedTemplateLiteral(["\n  // To align bullet on the left + ref count on the right correctly\n  position: relative;\n  left: -14px;\n  width: calc(100% + 19px);\n  opacity: ",";\n  transition: opacity 0.2s ease-in-out;\n\n  & .rm-block-children {\n    /* 🚀 FLASH FIX V3: 使用 visibility + opacity 代替 display，避免闪烁 */\n    visibility: ",";\n    opacity: ",";\n    height: ",";\n    overflow: ",";\n    transition: opacity 0.15s ease-in-out, height 0.15s ease-in-out;\n    display: flex; /* 保持 flex 布局，不改变 display */\n  }\n\n  & .rm-block-separator {\n    min-width: unset; // Keeping roam block from expanding 100\n  }\n\n  /* 🎯 高亮文字 - 让 ^^高亮^^ 正常显示为 Roam 黄色高亮效果 */\n  & .rm-highlight {\n    background-color: #fff3cd !important; /* Roam 的高亮黄色 */\n    color: inherit !important;\n    border-radius: 2px;\n    padding: 1px 2px;\n    /* 移除过渡动画，避免闪烁 */\n  }\n\n  /* 🎯 填空题文字 - 只对 {} 包围的文字应用遮挡效果 */\n  & .roam-memo-cloze {\n    background-color: ",";\n    color: ",";\n    overflow: hidden;\n    border-radius: 2px;\n    padding: 0;\n    margin: 0;\n    /* 🚀 FLASH FIX V3: 添加平滑过渡效果 */\n    transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;\n  }\n"])),function(e){return e.isLoading?.5:1},function(e){return e.showAnswers?"visible":"hidden"},function(e){return e.showAnswers?1:0},function(e){return e.showAnswers?"auto":"0"},function(e){return e.showAnswers?"visible":"hidden"},function(e){return e.showAnswers?"transparent":"#e1e3e5"},function(e){return e.showAnswers?"inherit":"transparent"}),Breadcrumbs=function(e){var t=e.breadcrumbs,r=t.map(function(e,r){return{current:r===t.length-1,text:e.title||e.string}});return external_React_.createElement(BreadCrumbWrapper,{className:"rm-zoom zoom-path-view"},r.map(function(e,t){return external_React_.createElement("div",{key:t,className:"rm-zoom-item"},external_React_.createElement("span",{className:"rm-zoom-item-content"},e.text)," ",t!==r.length-1&&external_React_.createElement(external_Blueprint_Core_namespaceObject.Icon,{icon:"chevron-right"}))}))},BreadCrumbWrapper=newStyled.div(_templateObject3||(_templateObject3=CardBlock_taggedTemplateLiteral(["\n  opacity: 0.7;\n  margin-left: 8px !important;\n  margin-top: -4px !important;\n\n  &.rm-zoom-item {\n    cursor: auto !important;\n  }\n"])));const overlay_CardBlock=CardBlock;var string_getStringBetween=function(e,t,r){return e.substring(e.indexOf(t)+t.length,e.lastIndexOf(r))},string_parseRoamDateString=function(e){return window.roamAlphaAPI.util.pageTitleToDate(e.trim())},dateToRoamDateString=function(e){return window.roamAlphaAPI.util.dateToPageTitle(e)},toDateString=function(e){return e.toLocaleDateString("en-US")},parseConfigString=function(e){return e.split("::").map(function(e){return e.trim()})},pluralize=function(e,t,r){return 1===e?t:r},isNumeric=function(e){return"string"==typeof e&&!isNaN(e)&&!isNaN(parseFloat(e))};function cache_typeof(e){return cache_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cache_typeof(e)}function cache_regeneratorRuntime(){var e=cache_regenerator(),t=e.m(cache_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,cache_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(cache_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new cache_OverloadYield(e,t)},AsyncIterator:cache_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?cache_regeneratorAsyncGen:cache_regeneratorAsync)(i(e),t,r,a,o)},keys:cache_regeneratorKeys,values:cache_regeneratorValues}})()}function cache_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(cache_typeof(e)+" is not iterable")}function cache_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function cache_regeneratorAsync(e,t,r,n,a){var i=cache_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function cache_regeneratorAsyncGen(e,t,r,n,a){return new cache_regeneratorAsyncIterator(cache_regenerator().w(e,t,r,n),a||Promise)}function cache_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof cache_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(cache_regeneratorDefine2(cache_regeneratorAsyncIterator.prototype),cache_regeneratorDefine2(cache_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),cache_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function cache_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return cache_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(cache_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,cache_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,cache_regeneratorDefine2(f,"constructor",c),cache_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",cache_regeneratorDefine2(c,a,"GeneratorFunction"),cache_regeneratorDefine2(f),cache_regeneratorDefine2(f,a,"Generator"),cache_regeneratorDefine2(f,n,function(){return this}),cache_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(cache_regenerator=function(){return{w:i,m:p}})()}function cache_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}cache_regeneratorDefine2=function(e,t,r,n){function i(t,r){cache_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},cache_regeneratorDefine2(e,t,r,n)}function cache_OverloadYield(e,t){this.v=e,this.k=t}function cache_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function cache_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){cache_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){cache_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}var saveCacheData=function(){var e=cache_asyncToGenerator(cache_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c,u,f;return cache_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,n=t.data,a=t.selectedTag,e.next=3,(0,utils.j$)(r);case 3:return e.next=5,(0,utils.Lv)(r,"cache",-1,{open:!1,heading:3});case 5:return i=e.sent,e.next=8,(0,utils.$v)(i,"[[".concat(a,"]]"),-1,{open:!1});case 8:o=e.sent,s=0,l=Object.keys(n);case 10:if(!(s<l.length)){e.next=25;break}return c=l[s],e.next=14,(0,utils.eo)(o,"".concat(c,"::"),{exactMatch:!1});case 14:if(!(u=e.sent)){e.next=18;break}return e.next=18,window.roamAlphaAPI.deleteBlock({block:{uid:u}});case 18:return f=n[c],date.isDate(f)&&(f=dateToRoamDateString(f)),e.next=22,(0,utils.Q6)(o,"".concat(c,":: ").concat(f),-1);case 22:s++,e.next=10;break;case 25:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),deleteCacheDataKey=function(){var e=cache_asyncToGenerator(cache_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s;return cache_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,n=t.selectedTag,a=t.toDeleteKeyId,e.next=3,(0,utils.j$)(r);case 3:return e.next=5,(0,utils.Lv)(r,"cache",-1,{open:!1,heading:3});case 5:return i=e.sent,e.next=8,(0,utils.$v)(i,"[[".concat(n,"]]"),-1,{open:!1});case 8:return o=e.sent,e.next=11,(0,utils.eo)(o,"".concat(a,"::"),{exactMatch:!1});case 11:if(!(s=e.sent)){e.next=15;break}return e.next=15,window.roamAlphaAPI.deleteBlock({block:{uid:s}});case 15:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}();function data_typeof(e){return data_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},data_typeof(e)}function data_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function data_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?data_ownKeys(Object(r),!0).forEach(function(t){data_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):data_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function data_defineProperty(e,t,r){return(t=data_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function data_toPropertyKey(e){var t=data_toPrimitive(e,"string");return"symbol"==data_typeof(t)?t:t+""}function data_toPrimitive(e,t){if("object"!=data_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=data_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||data_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return data_arrayLikeToArray(e)}function data_slicedToArray(e,t){return data_arrayWithHoles(e)||data_iterableToArrayLimit(e,t)||data_unsupportedIterableToArray(e,t)||data_nonIterableRest()}function data_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function data_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function data_arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=data_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function data_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return data_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?data_arrayLikeToArray(e,t):void 0}}function data_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function data_regeneratorRuntime(){var e=data_regenerator(),t=e.m(data_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,data_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(data_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new data_OverloadYield(e,t)},AsyncIterator:data_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?data_regeneratorAsyncGen:data_regeneratorAsync)(i(e),t,r,a,o)},keys:data_regeneratorKeys,values:data_regeneratorValues}})()}function data_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(data_typeof(e)+" is not iterable")}function data_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function data_regeneratorAsync(e,t,r,n,a){var i=data_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function data_regeneratorAsyncGen(e,t,r,n,a){return new data_regeneratorAsyncIterator(data_regenerator().w(e,t,r,n),a||Promise)}function data_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof data_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(data_regeneratorDefine2(data_regeneratorAsyncIterator.prototype),data_regeneratorDefine2(data_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),data_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function data_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return data_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(data_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,data_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,data_regeneratorDefine2(f,"constructor",c),data_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",data_regeneratorDefine2(c,a,"GeneratorFunction"),data_regeneratorDefine2(f),data_regeneratorDefine2(f,a,"Generator"),data_regeneratorDefine2(f,n,function(){return this}),data_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(data_regenerator=function(){return{w:i,m:p}})()}function data_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}data_regeneratorDefine2=function(e,t,r,n){function i(t,r){data_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},data_regeneratorDefine2(e,t,r,n)}function data_OverloadYield(e,t){this.v=e,this.k=t}function data_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function data_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){data_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){data_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}var getPluginPageData=function(){var e=data_asyncToGenerator(data_regeneratorRuntime().mark(function e(t){var r,n,a,i;return data_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,n=t.limitToLatest,a=void 0===n||n,e.next=3,getPluginPageBlockData({dataPageTitle:r,blockName:"data"});case 3:if((i=e.sent).length){e.next=6;break}return e.abrupt("return",{});case 6:return e.abrupt("return",a?mapPluginPageDataLatest(i):mapPluginPageData(i));case 7:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),getPluginPageBlockData=function(){var e=data_asyncToGenerator(data_regeneratorRuntime().mark(function e(t){var r,n;return data_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,n=t.blockName,e.next=4,window.roamAlphaAPI.q("[\n    :find (pull ?pluginPageChildren [\n      :block/string\n      :block/children\n      :block/order\n      {:block/children ...}])\n      :in $ ?pageTitle ?dataBlockName\n      :where\n      [?page :node/title ?pageTitle]\n      [?page :block/children ?pluginPageChildren]\n      [?pluginPageChildren :block/string ?dataBlockName]\n    ]",r,n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),mapPluginPageDataLatest=function(e){var t;return(null===(t=e.map(function(e){return e[0]})[0].children)||void 0===t?void 0:t.reduce(function(e,t){var r=string_getStringBetween(t.string,"((","))");if(e[r]={},!t.children)return e;var n=t.children.find(function(e){return 0===e.order});return e[r].dateCreated=string_parseRoamDateString(string_getStringBetween(n.string,"[[","]]")),n.children?(parseFieldValues(e[r],n),e):e},{}))||{}},mapPluginPageData=function(e){var t;return(null===(t=e.map(function(e){return e[0]})[0].children)||void 0===t?void 0:t.reduce(function(e,t){var r=string_getStringBetween(t.string,"((","))");if(e[r]=[],!t.children)return e;var n,a=_createForOfIteratorHelper(t.children);try{for(a.s();!(n=a.n()).done;){var i=n.value,o={refUid:r,dateCreated:string_parseRoamDateString(string_getStringBetween(i.string,"[[","]]"))};if(!i.children)return e;parseFieldValues(o,i),e[r].push(o)}}catch(e){a.e(e)}finally{a.f()}return e[r].sort(function(e,t){return e.dateCreated?t.dateCreated?e.dateCreated.getTime()-t.dateCreated.getTime():1:-1}),e},{}))||{}},parseFieldValues=function(e,t){var r,n=_createForOfIteratorHelper(ensureReviewModeField(t).children);try{for(n.s();!(r=n.n()).done;){var a=r.value,i=data_slicedToArray(parseConfigString(a.string),2),o=i[0],s=i[1];if("nextDueDate"===o){var l=string_getStringBetween(s,"[[","]]"),c=string_parseRoamDateString(l);e[o]=c}else"true"===s||"false"===s?e[o]="true"===s:isNumeric(s)?e[o]=Number(s):e[o]=s}}catch(e){n.e(e)}finally{n.f()}},ensureReviewModeField=function(e){var t=e.children.some(function(e){return e.string.includes("reviewMode")})?e.children:[].concat(_toConsumableArray(e.children),[{order:e.children.length,string:"reviewMode:: ".concat(models_session.Z.DefaultSpacedInterval)}]);return data_objectSpread(data_objectSpread({},e),{},{children:t})},getPluginPageCachedData=function(){var e=data_asyncToGenerator(data_regeneratorRuntime().mark(function e(t){var r,n;return data_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,e.next=3,getPluginPageBlockData({dataPageTitle:r,blockName:"cache"});case 3:if((n=e.sent).length){e.next=6;break}return e.abrupt("return",{});case 6:return e.abrupt("return",mapPluginPageCachedData(n));case 7:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),mapPluginPageCachedData=function(e){var t=e.map(function(e){return e[0]})[0].children;return t&&t.length&&t.reduce(function(e,t){var r;return e[string_getStringBetween(t.string,"[[","]]")]=(null===(r=t.children)||void 0===r?void 0:r.reduce(function(e,t){if(!t.string)return e;var r=data_slicedToArray(t.string.split("::").map(function(e){return e.trim()}),2),n=r[0],a=r[1],i=string_parseRoamDateString(a);return e[n]=i||a,e},{}))||{},e},{})||{}},collectTagCardUids=function(){var e=data_asyncToGenerator(data_regeneratorRuntime().mark(function e(t){var r,n,a,i,o;return data_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=2,e.next=5,Promise.all([window.roamAlphaAPI.q("[\n    :find [?uid ...]\n    :in $ ?tag_name\n    :where\n      [?tag_page :node/title ?tag_name]\n      [?block :block/refs ?tag_page]\n      [?block :block/uid ?uid]\n  ]",t),window.roamAlphaAPI.q("[\n    :find [?uid ...]\n    :in $ ?tag_name\n    :where\n      [?tag_page :node/title ?tag_name]\n      [?tag_page :block/children ?block]\n      [?block :block/uid ?uid]\n  ]",t)]);case 5:return r=e.sent,n=data_slicedToArray(r,2),a=n[0],i=n[1],o=_toConsumableArray(new Set([].concat(_toConsumableArray(a||[]),_toConsumableArray(i||[])))),e.abrupt("return",o);case 13:return e.prev=13,e.t0=e.catch(2),console.error("Error collecting card uids for tag #".concat(t),e.t0),e.abrupt("return",[]);case 17:case"end":return e.stop()}},e,null,[[2,13]])}));return function(t){return e.apply(this,arguments)}}(),collectAllTagsCardUidsBatch=function(){var e=data_asyncToGenerator(data_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c,u,f,p,h,d,m,y,g,v,_,b,x,S,C,P,w,k;return data_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==t.length){e.next=2;break}return e.abrupt("return",{});case 2:return e.prev=4,e.next=7,Promise.all([window.roamAlphaAPI.q("[\n    :find ?tag_name ?uid\n    :in $ [?tag_name ...]\n    :where\n      [?tag_page :node/title ?tag_name]\n      [?block :block/refs ?tag_page]\n      [?block :block/uid ?uid]\n  ]",t),window.roamAlphaAPI.q("[\n    :find ?tag_name ?uid\n    :in $ [?tag_name ...]\n    :where\n      [?tag_page :node/title ?tag_name]\n      [?tag_page :block/children ?block]\n      [?block :block/uid ?uid]\n  ]",t)]);case 7:r=e.sent,n=data_slicedToArray(r,2),a=n[0],i=n[1],o={},s=_createForOfIteratorHelper(t);try{for(s.s();!(l=s.n()).done;)c=l.value,o[c]=[]}catch(e){s.e(e)}finally{s.f()}if(a){u=_createForOfIteratorHelper(a);try{for(u.s();!(f=u.n()).done;)p=data_slicedToArray(f.value,2),h=p[0],d=p[1],o[h]&&o[h].push(d)}catch(e){u.e(e)}finally{u.f()}}if(i){m=_createForOfIteratorHelper(i);try{for(m.s();!(y=m.n()).done;)g=data_slicedToArray(y.value,2),v=g[0],_=g[1],o[v]&&o[v].push(_)}catch(e){m.e(e)}finally{m.f()}}b=_createForOfIteratorHelper(t);try{for(b.s();!(x=b.n()).done;)S=x.value,o[S]=_toConsumableArray(new Set(o[S]))}catch(e){b.e(e)}finally{b.f()}return e.abrupt("return",o);case 21:e.prev=21,e.t0=e.catch(4),console.error("❌ 批量查询失败，回退到逐个查询模式:",e.t0),C={},P=_createForOfIteratorHelper(t),e.prev=26,P.s();case 28:if((w=P.n()).done){e.next=35;break}return k=w.value,e.next=32,collectTagCardUids(k);case 32:C[k]=e.sent;case 33:e.next=28;break;case 35:e.next=40;break;case 37:e.prev=37,e.t1=e.catch(26),P.e(e.t1);case 40:return e.prev=40,P.f(),e.finish(40);case 43:return e.abrupt("return",C);case 44:case"end":return e.stop()}},e,null,[[4,21],[26,37,40,43]])}));return function(t){return e.apply(this,arguments)}}(),utils=__webpack_require__(5729);function legacyRoamSr_typeof(e){return legacyRoamSr_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},legacyRoamSr_typeof(e)}function legacyRoamSr_toConsumableArray(e){return legacyRoamSr_arrayWithoutHoles(e)||legacyRoamSr_iterableToArray(e)||legacyRoamSr_unsupportedIterableToArray(e)||legacyRoamSr_nonIterableSpread()}function legacyRoamSr_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function legacyRoamSr_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function legacyRoamSr_arrayWithoutHoles(e){if(Array.isArray(e))return legacyRoamSr_arrayLikeToArray(e)}function legacyRoamSr_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function legacyRoamSr_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?legacyRoamSr_ownKeys(Object(r),!0).forEach(function(t){legacyRoamSr_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):legacyRoamSr_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function legacyRoamSr_regeneratorRuntime(){var e=legacyRoamSr_regenerator(),t=e.m(legacyRoamSr_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,legacyRoamSr_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(legacyRoamSr_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new legacyRoamSr_OverloadYield(e,t)},AsyncIterator:legacyRoamSr_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?legacyRoamSr_regeneratorAsyncGen:legacyRoamSr_regeneratorAsync)(i(e),t,r,a,o)},keys:legacyRoamSr_regeneratorKeys,values:legacyRoamSr_regeneratorValues}})()}function legacyRoamSr_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(legacyRoamSr_typeof(e)+" is not iterable")}function legacyRoamSr_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function legacyRoamSr_regeneratorAsync(e,t,r,n,a){var i=legacyRoamSr_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function legacyRoamSr_regeneratorAsyncGen(e,t,r,n,a){return new legacyRoamSr_regeneratorAsyncIterator(legacyRoamSr_regenerator().w(e,t,r,n),a||Promise)}function legacyRoamSr_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof legacyRoamSr_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(legacyRoamSr_regeneratorDefine2(legacyRoamSr_regeneratorAsyncIterator.prototype),legacyRoamSr_regeneratorDefine2(legacyRoamSr_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),legacyRoamSr_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function legacyRoamSr_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return legacyRoamSr_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(legacyRoamSr_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,legacyRoamSr_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,legacyRoamSr_regeneratorDefine2(f,"constructor",c),legacyRoamSr_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",legacyRoamSr_regeneratorDefine2(c,a,"GeneratorFunction"),legacyRoamSr_regeneratorDefine2(f),legacyRoamSr_regeneratorDefine2(f,a,"Generator"),legacyRoamSr_regeneratorDefine2(f,n,function(){return this}),legacyRoamSr_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(legacyRoamSr_regenerator=function(){return{w:i,m:p}})()}function legacyRoamSr_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}legacyRoamSr_regeneratorDefine2=function(e,t,r,n){function i(t,r){legacyRoamSr_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},legacyRoamSr_regeneratorDefine2(e,t,r,n)}function legacyRoamSr_OverloadYield(e,t){this.v=e,this.k=t}function legacyRoamSr_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function legacyRoamSr_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){legacyRoamSr_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){legacyRoamSr_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function legacyRoamSr_createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=legacyRoamSr_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function legacyRoamSr_slicedToArray(e,t){return legacyRoamSr_arrayWithHoles(e)||legacyRoamSr_iterableToArrayLimit(e,t)||legacyRoamSr_unsupportedIterableToArray(e,t)||legacyRoamSr_nonIterableRest()}function legacyRoamSr_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function legacyRoamSr_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return legacyRoamSr_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?legacyRoamSr_arrayLikeToArray(e,t):void 0}}function legacyRoamSr_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function legacyRoamSr_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function legacyRoamSr_arrayWithHoles(e){if(Array.isArray(e))return e}function legacyRoamSr_defineProperty(e,t,r){return(t=legacyRoamSr_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function legacyRoamSr_toPropertyKey(e){var t=legacyRoamSr_toPrimitive(e,"string");return"symbol"==legacyRoamSr_typeof(t)?t:t+""}function legacyRoamSr_toPrimitive(e,t){if("object"!=legacyRoamSr_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=legacyRoamSr_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var oldRoamSrGradeMap=legacyRoamSr_defineProperty(legacyRoamSr_defineProperty(legacyRoamSr_defineProperty(legacyRoamSr_defineProperty({},"r/1",{oldDisplayButtonText:"Again",memoDisplayButtonText:"Forgot",memoGrade:0}),"r/2",{oldDisplayButtonText:"Hard",memoDisplayButtonText:"Hard",memoGrade:3}),"r/3",{oldDisplayButtonText:"Good",memoDisplayButtonText:"Good",memoGrade:4}),"r/4",{oldDisplayButtonText:"Easy",memoDisplayButtonText:"Perfect",memoGrade:5}),mapOldRoamSrPracticeData=function(e,t){return e.reduce(function(e,r){var n=legacyRoamSr_slicedToArray(r,1)[0],a=n.title;return n.children.filter(function(e){return e.string==="[[".concat(t,"]]")}).filter(function(e){return!!e.children}).forEach(function(t){var r,n=legacyRoamSr_createForOfIteratorHelper(t.children);try{for(n.s();!(r=n.n()).done;){var i=r.value.string.split(" ");if(2===i.length){var o=legacyRoamSr_slicedToArray(i,2),s=o[0],l=o[1];if(s&&l){var c=getStringBetween(s,"((","))");e[c]||(e[c]=[]),e[c].push({refUid:c,grade:oldRoamSrGradeMap[getStringBetween(l,"[[","]]")].memoGrade,dateCreated:parseRoamDateString(a),isRoamSrOldPracticeRecord:!0})}}}}catch(e){n.e(e)}finally{n.f()}}),e},{})},sortOldRoamSrPracticeData=function(e){for(var t in e)e[t]=e[t].sort(function(e,t){return e.dateCreated-t.dateCreated});return e},getOldRoamSrPracticeData=null,_ref4,getMergedOldAndExistingRecords=function(e,t){var r=legacyRoamSr_objectSpread({},e);for(var n in t)n in e&&(t[n].some(function(e){return e.isRoamSrOldPracticeRecord})?r[n]=legacyRoamSr_toConsumableArray(t[n]):r[n]=[].concat(legacyRoamSr_toConsumableArray(r[n]),legacyRoamSr_toConsumableArray(t[n])),r[n].sort(function(e,t){return e.dateCreated-t.dateCreated}));return r},generateRecordsFromRoamSrData=null,_ref5,save_excluded=["refUid","dataPageTitle","dateCreated"];function save_createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=save_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function save_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return save_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?save_arrayLikeToArray(e,t):void 0}}function save_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function save_regeneratorRuntime(){var e=save_regenerator(),t=e.m(save_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,save_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(save_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new save_OverloadYield(e,t)},AsyncIterator:save_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?save_regeneratorAsyncGen:save_regeneratorAsync)(i(e),t,r,a,o)},keys:save_regeneratorKeys,values:save_regeneratorValues}})()}function save_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(save_typeof(e)+" is not iterable")}function save_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function save_regeneratorAsync(e,t,r,n,a){var i=save_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function save_regeneratorAsyncGen(e,t,r,n,a){return new save_regeneratorAsyncIterator(save_regenerator().w(e,t,r,n),a||Promise)}function save_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof save_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(save_regeneratorDefine2(save_regeneratorAsyncIterator.prototype),save_regeneratorDefine2(save_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),save_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function save_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return save_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(save_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,save_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,save_regeneratorDefine2(f,"constructor",c),save_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",save_regeneratorDefine2(c,a,"GeneratorFunction"),save_regeneratorDefine2(f),save_regeneratorDefine2(f,a,"Generator"),save_regeneratorDefine2(f,n,function(){return this}),save_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(save_regenerator=function(){return{w:i,m:p}})()}function save_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}save_regeneratorDefine2=function(e,t,r,n){function i(t,r){save_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},save_regeneratorDefine2(e,t,r,n)}function save_OverloadYield(e,t){this.v=e,this.k=t}function save_typeof(e){return save_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},save_typeof(e)}function save_objectWithoutProperties(e,t){if(null==e)return{};var r,n,a=save_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function save_objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r={};for(var n in e)if({}.hasOwnProperty.call(e,n)){if(-1!==t.indexOf(n))continue;r[n]=e[n]}return r}function save_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function save_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){save_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){save_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}var getEmojiFromGrade=function(e){switch(e){case 5:default:return"🟢";case 4:return"🔵";case 3:case 2:return"🟠";case 0:return"🔴"}},savePracticeData=function(){var e=save_asyncToGenerator(save_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c,u,f,p,h,d,m,y;return save_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.refUid,n=t.dataPageTitle,a=t.dateCreated,i=save_objectWithoutProperties(t,save_excluded),e.next=3,(0,utils.j$)(n);case 3:return e.next=5,(0,utils.Lv)(n,"data",-1,{open:!1,heading:3});case 5:return o=e.sent,e.next=8,(0,utils.$v)(o,"((".concat(r,"))"),0,{open:!1});case 8:return s=e.sent,l=a||new Date,c=dateToRoamDateString(l),u=getEmojiFromGrade(i.grade),e.next=14,(0,utils.Q6)(s,"[[".concat(c,"]] ").concat(u),0,{open:!1});case 14:f=e.sent,p=i.nextDueDate||date.addDays(l,i.interval),h=0,d=Object.keys(i);case 17:if(!(h<d.length)){e.next=26;break}return m=d[h],y=i[m],"nextDueDate"===m?y="[[".concat(dateToRoamDateString(p),"]]"):"fsrsState"===m&&"object"===save_typeof(y)&&null!==y&&(y=JSON.stringify(y)),e.next=23,(0,utils.Q6)(f,"".concat(m,":: ").concat(y),-1);case 23:h++,e.next=17;break;case 26:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),bulkSavePracticeData=null,loadPriorityOrder=function(){var e=save_asyncToGenerator(save_regeneratorRuntime().mark(function e(t){var r,n;return save_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,e.next=3,loadPriorityOrderWithPinData({dataPageTitle:r});case 3:return n=e.sent,e.abrupt("return",n.priorityOrder);case 5:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),loadPriorityOrderWithPinData=function(){var e=save_asyncToGenerator(save_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c,u,f,p;return save_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.dataPageTitle,e.prev=1,e.next=4,(0,utils.j$)(r);case 4:if(n=(0,utils.$y)(r),a=n.length>0?n[0][0]:null,(i=(null==a?void 0:a.children)||[])&&0!==i.length){e.next=9;break}return e.abrupt("return",{priorityOrder:[],pinnedPositions:{}});case 9:if(o=i.find(function(e){return e.string&&"priority-order"===e.string.trim()})){e.next=12;break}return e.abrupt("return",{priorityOrder:[],pinnedPositions:{}});case 12:if((s=(0,utils.gG)(o.uid))&&0!==s.length){e.next=15;break}return e.abrupt("return",{priorityOrder:[],pinnedPositions:{}});case 15:if(l=s.find(function(e){return e.string&&e.string.startsWith("priority-order::")}),c=s.find(function(e){return e.string&&e.string.startsWith("pinned-positions::")}),u={priorityOrder:[],pinnedPositions:{}},l&&(f=l.string.replace("priority-order::","").trim()))try{u.priorityOrder=JSON.parse(f)}catch(e){console.error("优先级顺序数据解析失败:",e)}if(c&&(p=c.string.replace("pinned-positions::","").trim()))try{u.pinnedPositions=JSON.parse(p)}catch(e){console.error("绝对位置数据解析失败:",e)}return e.abrupt("return",u);case 23:return e.prev=23,e.t0=e.catch(1),console.error("优先级系统 - 读取数据失败:",e.t0),e.abrupt("return",{priorityOrder:[],pinnedPositions:{}});case 27:case"end":return e.stop()}},e,null,[[1,23]])}));return function(t){return e.apply(this,arguments)}}(),savePriorityOrder=function(){var e=save_asyncToGenerator(save_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l;return save_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.dataPageTitle,n=t.priorityOrder,e.prev=1,window.roamAlphaAPI){e.next=4;break}throw new Error("Roam Alpha API 不可用");case 4:return e.next=6,(0,utils.j$)(r);case 6:return e.next=8,(0,utils.Lv)(r,"priority-order",-1,{open:!1});case 8:if(a=e.sent,i=(0,utils.gG)(a),o=null==i?void 0:i.find(function(e){return e.string&&e.string.startsWith("priority-order::")}),s=JSON.stringify(n),l="priority-order:: ".concat(s),!o){e.next=18;break}return e.next=16,window.roamAlphaAPI.updateBlock({block:{uid:o.uid,string:l}});case 16:e.next=20;break;case 18:return e.next=20,(0,utils.Q6)(a,l,-1);case 20:e.next=26;break;case 22:throw e.prev=22,e.t0=e.catch(1),console.error("保存优先级顺序失败:",e.t0),e.t0;case 26:case"end":return e.stop()}},e,null,[[1,22]])}));return function(t){return e.apply(this,arguments)}}(),savePriorityOrderWithPinData=null,_ref12,u=(a=u||{},a[a.New=0]="New",a[a.Learning=1]="Learning",a[a.Review=2]="Review",a[a.Relearning=3]="Relearning",a),l=(e=>(e[e.Manual=0]="Manual",e[e.Again=1]="Again",e[e.Hard=2]="Hard",e[e.Good=3]="Good",e[e.Easy=4]="Easy",e))(l||{}),a;class d{static card(e){return{...e,state:d.state(e.state),due:d.time(e.due),last_review:e.last_review?d.time(e.last_review):void 0}}static rating(e){if("string"==typeof e){const t=e.charAt(0).toUpperCase(),r=e.slice(1).toLowerCase(),n=l[`${t}${r}`];if(void 0===n)throw new Error(`Invalid rating:[${e}]`);return n}if("number"==typeof e)return e;throw new Error(`Invalid rating:[${e}]`)}static state(e){if("string"==typeof e){const t=e.charAt(0).toUpperCase(),r=e.slice(1).toLowerCase(),n=u[`${t}${r}`];if(void 0===n)throw new Error(`Invalid state:[${e}]`);return n}if("number"==typeof e)return e;throw new Error(`Invalid state:[${e}]`)}static time(e){if("object"==typeof e&&e instanceof Date)return e;if("string"==typeof e){const t=Date.parse(e);if(isNaN(t))throw new Error(`Invalid date:[${e}]`);return new Date(t)}if("number"==typeof e)return new Date(e);throw new Error(`Invalid date:[${e}]`)}static review_log(e){return{...e,due:d.time(e.due),rating:d.rating(e.rating),state:d.state(e.state),review:d.time(e.review)}}}function m(e,t,r){return new Date(r?d.time(e).getTime()+24*t*60*60*1e3:d.time(e).getTime()+60*t*1e3)}function v(e,t,r){if(!e||!t)throw new Error("Invalid date");const n=d.time(e).getTime()-d.time(t).getTime();let a=0;switch(r){case"days":a=Math.floor(n/864e5);break;case"minutes":a=Math.floor(n/6e4)}return a}function C(e){const t=d.time(e),r=t.getFullYear(),n=t.getMonth()+1,a=t.getDate(),i=t.getHours(),o=t.getMinutes(),s=t.getSeconds();return`${r}-${b(n)}-${b(a)} ${b(i)}:${b(o)}:${b(s)}`}function b(e){return e<10?`0${e}`:`${e}`}Date.prototype.scheduler=function(e,t){return m(this,e,t)},Date.prototype.diff=function(e,t){return v(this,e,t)},Date.prototype.format=function(){return C(this)},Date.prototype.dueFormat=function(e,t,r){return z(this,e,t,r)};const L=[60,60,24,31,12],N=["second","min","hour","day","month","year"];function z(e,t,r,n=N){e=d.time(e),t=d.time(t),n.length!==N.length&&(n=N);let a,i=e.getTime()-t.getTime();for(i/=1e3,a=0;a<L.length&&!(i<L[a]);a++)i/=L[a];return`${Math.floor(i)}${r?n[a]:""}`}function st(e){return d.time(e)}function rt(e){return d.state(e)}function at(e){return d.rating(e)}const T=Object.freeze([l.Again,l.Hard,l.Good,l.Easy]),nt=[{start:2.5,end:7,factor:.15},{start:7,end:20,factor:.1},{start:20,end:1/0,factor:.05}];function U(e,t,r){let n=1;for(const t of nt)n+=t.factor*Math.max(Math.min(e,t.end)-t.start,0);e=Math.min(e,r);let a=Math.max(2,Math.round(e-n));const i=Math.min(Math.round(e+n),r);return e>t&&(a=Math.max(a,t+1)),a=Math.min(a,i),{min_ivl:a,max_ivl:i}}function g(e,t,r){return Math.min(Math.max(e,t),r)}function k(e,t){const r=Date.UTC(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n=Date.UTC(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate());return Math.floor((n-r)/864e5)}const lt="5.2.0",q=.9,P=36500,j=!1,O=!0,Y=Object.freeze(["1m","10m"]),W=Object.freeze(["10m"]),ot=null,p=.001,dt=36500,M=100,$=.5,B=.1542,D=Object.freeze([.212,1.2931,2.3065,8.2956,6.4133,.8334,3.0194,.001,1.8722,.1666,.796,1.4835,.0614,.2629,1.6483,.6014,1.8729,.5425,.0912,.0658,B]),X=2,V=e=>[[p,M],[p,M],[p,M],[p,M],[1,10],[.001,4],[.001,4],[.001,.75],[0,4.5],[0,.8],[.001,3.5],[.001,5],[.001,.25],[.001,.9],[0,4],[0,1],[1,6],[0,e],[0,e],[0,.8],[.1,.8]],E=(e,t)=>{let r=X;return Math.max(0,t)>1&&(r=g(+(-(Math.log(e[11])+Math.log(Math.pow(2,e[13])-1)+.3*e[14])/t).toFixed(8),.01,2)),V(r).map(([t,r],n)=>g(e[n],t,r))},ht=e=>{if(void 0!==e.find(e=>!isFinite(e)&&!isNaN(e)))throw Error(`Non-finite or NaN value in parameters ${e}`);if(![17,19,21].includes(e.length))throw Error(`Invalid parameter length: ${e.length}. Must be 17, 19 or 21 for FSRSv4, 5 and 6 respectively.`);return e},R=e=>{if(void 0===e)return[...D];switch(e.length){case 21:return[...e];case 19:return console.debug("[FSRS-6]auto fill w from 19 to 21 length"),[...e,0,$];case 17:{const t=[...e];return t[4]=+(2*t[5]+t[4]).toFixed(8),t[5]=+(Math.log(3*t[5]+1)/3).toFixed(8),t[6]=+(t[6]+.5).toFixed(8),console.debug("[FSRS-6]auto fill w from 17 to 21 length"),t.concat([0,0,0,$])}default:return console.warn("[FSRS]Invalid parameters length, using default parameters"),[...D]}},I=e=>{const t=Array.isArray(e?.learning_steps)?e.learning_steps:Y,r=Array.isArray(e?.relearning_steps)?e.relearning_steps:W,n=E(R(e?.w),r.length);return{request_retention:e?.request_retention||q,maximum_interval:e?.maximum_interval||P,w:n,enable_fuzz:e?.enable_fuzz??j,enable_short_term:e?.enable_short_term??O,learning_steps:t,relearning_steps:r}};function F(e,t){const r={due:e?d.time(e):new Date,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:0,lapses:0,learning_steps:0,state:u.New,last_review:void 0};return t&&"function"==typeof t?t(r):r}class ut{c;s0;s1;s2;constructor(e){const t=ct();this.c=1,this.s0=t(" "),this.s1=t(" "),this.s2=t(" "),null==e&&(e=+new Date),this.s0-=t(e),this.s0<0&&(this.s0+=1),this.s1-=t(e),this.s1<0&&(this.s1+=1),this.s2-=t(e),this.s2<0&&(this.s2+=1)}next(){const e=2091639*this.s0+2.3283064365386963e-10*this.c;return this.s0=this.s1,this.s1=this.s2,this.s2=e-(this.c=0|e),this.s2}set state(e){this.c=e.c,this.s0=e.s0,this.s1=e.s1,this.s2=e.s2}get state(){return{c:this.c,s0:this.s0,s1:this.s1,s2:this.s2}}}function ct(){let e=4022871197;return function(t){t=String(t);for(let r=0;r<t.length;r++){e+=t.charCodeAt(r);let n=.02519603282416938*e;e=n>>>0,n-=e,n*=e,e=n>>>0,n-=e,e+=4294967296*n}return 2.3283064365386963e-10*(e>>>0)}}function _t(e){const t=new ut(e),r=()=>t.next();return r.int32=()=>4294967296*t.next()|0,r.double=()=>r()+11102230246251565e-32*(2097152*r()|0),r.state=()=>t.state,r.importState=e=>(t.state=e,r),r}const H=e=>{const t="number"==typeof e?-e:-e[20];return{decay:t,factor:+(Math.exp(Math.pow(t,-1)*Math.log(.9))-1).toFixed(8)}};function A(e,t,r){const{decay:n,factor:a}=H(e);return+Math.pow(1+a*t/r,n).toFixed(8)}class J{param;intervalModifier;_seed;constructor(e){this.param=new Proxy(I(e),this.params_handler_proxy()),this.intervalModifier=this.calculate_interval_modifier(this.param.request_retention),this.forgetting_curve=A.bind(this,this.param.w)}get interval_modifier(){return this.intervalModifier}set seed(e){this._seed=e}calculate_interval_modifier(e){if(e<=0||e>1)throw new Error("Requested retention rate should be in the range (0,1]");const{decay:t,factor:r}=H(this.param.w);return+((Math.pow(e,1/t)-1)/r).toFixed(8)}get parameters(){return this.param}set parameters(e){this.update_parameters(e)}params_handler_proxy(){const e=this;return{set:function(t,r,n){return"request_retention"===r&&Number.isFinite(n)?e.intervalModifier=e.calculate_interval_modifier(Number(n)):"w"===r&&(n=E(R(n),t.relearning_steps.length),e.forgetting_curve=A.bind(this,n),e.intervalModifier=e.calculate_interval_modifier(Number(t.request_retention))),Reflect.set(t,r,n),!0}}}update_parameters(e){const t=I(e);for(const e in t)if(e in this.param){const r=e;this.param[r]=t[r]}}init_stability(e){return Math.max(this.param.w[e-1],.1)}init_difficulty(e){return+(this.param.w[4]-Math.exp((e-1)*this.param.w[5])+1).toFixed(8)}apply_fuzz(e,t){if(!this.param.enable_fuzz||e<2.5)return Math.round(e);const r=_t(this._seed)(),{min_ivl:n,max_ivl:a}=U(e,t,this.param.maximum_interval);return Math.floor(r*(a-n+1)+n)}next_interval(e,t){const r=Math.min(Math.max(1,Math.round(e*this.intervalModifier)),this.param.maximum_interval);return this.apply_fuzz(r,t)}linear_damping(e,t){return+(e*(10-t)/9).toFixed(8)}next_difficulty(e,t){const r=-this.param.w[6]*(t-3),n=e+this.linear_damping(r,e);return g(this.mean_reversion(this.init_difficulty(l.Easy),n),1,10)}mean_reversion(e,t){return+(this.param.w[7]*e+(1-this.param.w[7])*t).toFixed(8)}next_recall_stability(e,t,r,n){const a=l.Hard===n?this.param.w[15]:1,i=l.Easy===n?this.param.w[16]:1;return+g(t*(1+Math.exp(this.param.w[8])*(11-e)*Math.pow(t,-this.param.w[9])*(Math.exp((1-r)*this.param.w[10])-1)*a*i),p,36500).toFixed(8)}next_forget_stability(e,t,r){return+g(this.param.w[11]*Math.pow(e,-this.param.w[12])*(Math.pow(t+1,this.param.w[13])-1)*Math.exp((1-r)*this.param.w[14]),p,36500).toFixed(8)}next_short_term_stability(e,t){const r=Math.pow(e,-this.param.w[19])*Math.exp(this.param.w[17]*(t-3+this.param.w[18]));return+g(e*(t>=3?Math.max(r,1):r),p,36500).toFixed(8)}forgetting_curve;next_state(e,t,r){const{difficulty:n,stability:a}=e??{difficulty:0,stability:0};if(t<0)throw new Error(`Invalid delta_t "${t}"`);if(r<0||r>4)throw new Error(`Invalid grade "${r}"`);if(0===n&&0===a)return{difficulty:g(this.init_difficulty(r),1,10),stability:this.init_stability(r)};if(0===r)return{difficulty:n,stability:a};if(n<1||a<p)throw new Error(`Invalid memory state { difficulty: ${n}, stability: ${a} }`);const i=this.forgetting_curve(t,a),o=this.next_recall_stability(n,a,i,r),s=this.next_forget_stability(n,a,i),l=this.next_short_term_stability(a,r);let c=o;if(1===r){let[e,t]=[0,0];this.param.enable_short_term&&(e=this.param.w[17],t=this.param.w[18]),c=g(+(a/Math.exp(e*t)).toFixed(8),p,s)}return 0===t&&this.param.enable_short_term&&(c=l),{difficulty:this.next_difficulty(n,r),stability:c}}}function K(){return`${this.review_time.getTime()}_${this.current.reps}_${this.current.difficulty*this.current.stability}`}function ft(e){return function(){const t=Reflect.get(this.current,e)??0,r=this.current.reps;return String(t+r||0)}}const Q=e=>{const t=e.slice(-1),r=parseInt(e.slice(0,-1),10);if(isNaN(r)||!Number.isFinite(r)||r<0)throw new Error(`Invalid step value: ${e}`);switch(t){case"m":return r;case"h":return 60*r;case"d":return 1440*r;default:throw new Error(`Invalid step unit: ${e}, expected m/h/d`)}},Z=(e,t,r)=>{const n=t===u.Relearning||t===u.Review?e.relearning_steps:e.learning_steps,a=n.length;if(0===a||r>=a)return{};const i=n[0],o=Q,s=()=>{if(1===a)return Math.round(1.5*o(i));const e=n[1];return Math.round((o(i)+o(e))/2)},c=e=>e<0||e>=a?null:n[e],f={},p=c(Math.max(0,r));if(t===u.Review)return f[l.Again]={scheduled_minutes:o(p),next_step:0},f;{f[l.Again]={scheduled_minutes:o(i),next_step:0},f[l.Hard]={scheduled_minutes:s(),next_step:r};const e=c(r+1);if(e){const t=(e=>o(e))(e);t&&(f[l.Good]={scheduled_minutes:Math.round(t),next_step:r+1})}}return f};var S=(e=>(e.SCHEDULER="Scheduler",e.LEARNING_STEPS="LearningSteps",e.SEED="Seed",e))(S||{});class G{last;current;review_time;next=new Map;algorithm;strategies;elapsed_days=0;constructor(e,t,r,n){this.algorithm=r,this.last=d.card(e),this.current=d.card(e),this.review_time=d.time(t),this.strategies=n,this.init()}checkGrade(e){if(!Number.isFinite(e)||e<0||e>4)throw new Error(`Invalid grade "${e}",expected 1-4`)}init(){const{state:e,last_review:t}=this.current;let r=0;e!==u.New&&t&&(r=k(t,this.review_time)),this.current.last_review=this.review_time,this.elapsed_days=r,this.current.elapsed_days=r,this.current.reps+=1;let n=K;if(this.strategies){const e=this.strategies.get(S.SEED);e&&(n=e)}this.algorithm.seed=n.call(this)}preview(){return{[l.Again]:this.review(l.Again),[l.Hard]:this.review(l.Hard),[l.Good]:this.review(l.Good),[l.Easy]:this.review(l.Easy),[Symbol.iterator]:this.previewIterator.bind(this)}}*previewIterator(){for(const e of T)yield this.review(e)}review(e){const{state:t}=this.last;let r;switch(this.checkGrade(e),t){case u.New:r=this.newState(e);break;case u.Learning:case u.Relearning:r=this.learningState(e);break;case u.Review:r=this.reviewState(e)}return r}buildLog(e){const{last_review:t,due:r,elapsed_days:n}=this.last;return{rating:e,state:this.current.state,due:t||r,stability:this.current.stability,difficulty:this.current.difficulty,elapsed_days:this.elapsed_days,last_elapsed_days:n,scheduled_days:this.current.scheduled_days,learning_steps:this.current.learning_steps,review:this.review_time}}}class tt extends G{learningStepsStrategy;constructor(e,t,r,n){super(e,t,r,n);let a=Z;if(this.strategies){const e=this.strategies.get(S.LEARNING_STEPS);e&&(a=e)}this.learningStepsStrategy=a}getLearningInfo(e,t){const r=this.algorithm.parameters;e.learning_steps=e.learning_steps||0;const n=this.learningStepsStrategy(r,e.state,this.current.state===u.Learning?e.learning_steps+1:e.learning_steps);return{scheduled_minutes:Math.max(0,n[t]?.scheduled_minutes??0),next_steps:Math.max(0,n[t]?.next_step??0)}}applyLearningSteps(e,t,r){const{scheduled_minutes:n,next_steps:a}=this.getLearningInfo(this.current,t);if(n>0&&n<1440)e.learning_steps=a,e.scheduled_days=0,e.state=r,e.due=m(this.review_time,Math.round(n),!1);else if(e.state=u.Review,n>=1440)e.learning_steps=a,e.due=m(this.review_time,Math.round(n),!1),e.scheduled_days=Math.floor(n/1440);else{e.learning_steps=0;const t=this.algorithm.next_interval(e.stability,this.elapsed_days);e.scheduled_days=t,e.due=m(this.review_time,t,!0)}}newState(e){const t=this.next.get(e);if(t)return t;const r=d.card(this.current);r.difficulty=g(this.algorithm.init_difficulty(e),1,10),r.stability=this.algorithm.init_stability(e),this.applyLearningSteps(r,e,u.Learning);const n={card:r,log:this.buildLog(e)};return this.next.set(e,n),n}learningState(e){const t=this.next.get(e);if(t)return t;const{state:r,difficulty:n,stability:a}=this.last,i=d.card(this.current);i.difficulty=this.algorithm.next_difficulty(n,e),i.stability=this.algorithm.next_short_term_stability(a,e),this.applyLearningSteps(i,e,r);const o={card:i,log:this.buildLog(e)};return this.next.set(e,o),o}reviewState(e){const t=this.next.get(e);if(t)return t;const r=this.elapsed_days,{difficulty:n,stability:a}=this.last,i=this.algorithm.forgetting_curve(r,a),o=d.card(this.current),s=d.card(this.current),c=d.card(this.current),f=d.card(this.current);this.next_ds(o,s,c,f,n,a,i),this.next_interval(s,c,f,r),this.next_state(s,c,f),this.applyLearningSteps(o,l.Again,u.Relearning),o.lapses+=1;const p={card:o,log:this.buildLog(l.Again)},h={card:s,log:super.buildLog(l.Hard)},m={card:c,log:super.buildLog(l.Good)},y={card:f,log:super.buildLog(l.Easy)};return this.next.set(l.Again,p),this.next.set(l.Hard,h),this.next.set(l.Good,m),this.next.set(l.Easy,y),this.next.get(e)}next_ds(e,t,r,n,a,i,o){e.difficulty=this.algorithm.next_difficulty(a,l.Again);const s=i/Math.exp(this.algorithm.parameters.w[17]*this.algorithm.parameters.w[18]),c=this.algorithm.next_forget_stability(a,i,o);e.stability=g(+s.toFixed(8),p,c),t.difficulty=this.algorithm.next_difficulty(a,l.Hard),t.stability=this.algorithm.next_recall_stability(a,i,o,l.Hard),r.difficulty=this.algorithm.next_difficulty(a,l.Good),r.stability=this.algorithm.next_recall_stability(a,i,o,l.Good),n.difficulty=this.algorithm.next_difficulty(a,l.Easy),n.stability=this.algorithm.next_recall_stability(a,i,o,l.Easy)}next_interval(e,t,r,n){let a,i;a=this.algorithm.next_interval(e.stability,n),i=this.algorithm.next_interval(t.stability,n),a=Math.min(a,i),i=Math.max(i,a+1);const o=Math.max(this.algorithm.next_interval(r.stability,n),i+1);e.scheduled_days=a,e.due=m(this.review_time,a,!0),t.scheduled_days=i,t.due=m(this.review_time,i,!0),r.scheduled_days=o,r.due=m(this.review_time,o,!0)}next_state(e,t,r){e.state=u.Review,e.learning_steps=0,t.state=u.Review,t.learning_steps=0,r.state=u.Review,r.learning_steps=0}}class et extends G{newState(e){const t=this.next.get(e);if(t)return t;this.current.scheduled_days=0,this.current.elapsed_days=0;const r=d.card(this.current),n=d.card(this.current),a=d.card(this.current),i=d.card(this.current);return this.init_ds(r,n,a,i),this.next_interval(r,n,a,i,0),this.next_state(r,n,a,i),this.update_next(r,n,a,i),this.next.get(e)}init_ds(e,t,r,n){e.difficulty=g(this.algorithm.init_difficulty(l.Again),1,10),e.stability=this.algorithm.init_stability(l.Again),t.difficulty=g(this.algorithm.init_difficulty(l.Hard),1,10),t.stability=this.algorithm.init_stability(l.Hard),r.difficulty=g(this.algorithm.init_difficulty(l.Good),1,10),r.stability=this.algorithm.init_stability(l.Good),n.difficulty=g(this.algorithm.init_difficulty(l.Easy),1,10),n.stability=this.algorithm.init_stability(l.Easy)}learningState(e){return this.reviewState(e)}reviewState(e){const t=this.next.get(e);if(t)return t;const r=this.elapsed_days,{difficulty:n,stability:a}=this.last,i=this.algorithm.forgetting_curve(r,a),o=d.card(this.current),s=d.card(this.current),l=d.card(this.current),c=d.card(this.current);return this.next_ds(o,s,l,c,n,a,i),this.next_interval(o,s,l,c,r),this.next_state(o,s,l,c),o.lapses+=1,this.update_next(o,s,l,c),this.next.get(e)}next_ds(e,t,r,n,a,i,o){e.difficulty=this.algorithm.next_difficulty(a,l.Again);const s=this.algorithm.next_forget_stability(a,i,o);e.stability=g(i,p,s),t.difficulty=this.algorithm.next_difficulty(a,l.Hard),t.stability=this.algorithm.next_recall_stability(a,i,o,l.Hard),r.difficulty=this.algorithm.next_difficulty(a,l.Good),r.stability=this.algorithm.next_recall_stability(a,i,o,l.Good),n.difficulty=this.algorithm.next_difficulty(a,l.Easy),n.stability=this.algorithm.next_recall_stability(a,i,o,l.Easy)}next_interval(e,t,r,n,a){let i,o,s,l;i=this.algorithm.next_interval(e.stability,a),o=this.algorithm.next_interval(t.stability,a),s=this.algorithm.next_interval(r.stability,a),l=this.algorithm.next_interval(n.stability,a),i=Math.min(i,o),o=Math.max(o,i+1),s=Math.max(s,o+1),l=Math.max(l,s+1),e.scheduled_days=i,e.due=m(this.review_time,i,!0),t.scheduled_days=o,t.due=m(this.review_time,o,!0),r.scheduled_days=s,r.due=m(this.review_time,s,!0),n.scheduled_days=l,n.due=m(this.review_time,l,!0)}next_state(e,t,r,n){e.state=u.Review,e.learning_steps=0,t.state=u.Review,t.learning_steps=0,r.state=u.Review,r.learning_steps=0,n.state=u.Review,n.learning_steps=0}update_next(e,t,r,n){const a={card:e,log:this.buildLog(l.Again)},i={card:t,log:super.buildLog(l.Hard)},o={card:r,log:super.buildLog(l.Good)},s={card:n,log:super.buildLog(l.Easy)};this.next.set(l.Again,a),this.next.set(l.Hard,i),this.next.set(l.Good,o),this.next.set(l.Easy,s)}}class gt{fsrs;constructor(e){this.fsrs=e}replay(e,t,r){return this.fsrs.next(e,t,r)}handleManualRating(e,t,r,n,a,i,o){if(typeof t>"u")throw new Error("reschedule: state is required for manual rating");let s,c;if(t===u.New)s={rating:l.Manual,state:t,due:o??r,stability:e.stability,difficulty:e.difficulty,elapsed_days:n,last_elapsed_days:e.elapsed_days,scheduled_days:e.scheduled_days,learning_steps:e.learning_steps,review:r},c=F(r),c.last_review=r;else{if(typeof o>"u")throw new Error("reschedule: due is required for manual rating");const u=v(o,r,"days");s={rating:l.Manual,state:e.state,due:e.last_review||e.due,stability:e.stability,difficulty:e.difficulty,elapsed_days:n,last_elapsed_days:e.elapsed_days,scheduled_days:e.scheduled_days,learning_steps:e.learning_steps,review:r},c={...e,state:t,due:o,last_review:r,stability:a||e.stability,difficulty:i||e.difficulty,elapsed_days:n,scheduled_days:u,reps:e.reps+1}}return{card:c,log:s}}reschedule(e,t){const r=[];let n=F(e.due);for(const e of t){let t;if(e.review=d.time(e.review),e.rating===l.Manual){let r=0;n.state!==u.New&&n.last_review&&(r=v(e.review,n.last_review,"days")),t=this.handleManualRating(n,e.state,e.review,r,e.stability,e.difficulty,e.due?d.time(e.due):void 0)}else t=this.replay(n,e.review,e.rating);r.push(t),n=t.card}return r}calculateManualRecord(e,t,r,n){if(!r)return null;const{card:a,log:i}=r,o=d.card(e);return o.due.getTime()===a.due.getTime()?null:(o.scheduled_days=v(a.due,o.due,"days"),this.handleManualRating(o,a.state,d.time(t),i.elapsed_days,n?a.stability:void 0,n?a.difficulty:void 0,a.due))}}class it extends J{strategyHandler=new Map;Scheduler;constructor(e){super(e);const{enable_short_term:t}=this.parameters;this.Scheduler=t?tt:et}params_handler_proxy(){const e=this;return{set:function(t,r,n){return"request_retention"===r&&Number.isFinite(n)?e.intervalModifier=e.calculate_interval_modifier(Number(n)):"enable_short_term"===r?e.Scheduler=!0===n?tt:et:"w"===r&&(n=E(R(n),t.relearning_steps.length),e.forgetting_curve=A.bind(this,n),e.intervalModifier=e.calculate_interval_modifier(Number(t.request_retention))),Reflect.set(t,r,n),!0}}}useStrategy(e,t){return this.strategyHandler.set(e,t),this}clearStrategy(e){return e?this.strategyHandler.delete(e):this.strategyHandler.clear(),this}getScheduler(e,t){return new(this.strategyHandler.get(S.SCHEDULER)||this.Scheduler)(e,t,this,this.strategyHandler)}repeat(e,t,r){const n=this.getScheduler(e,t).preview();return r&&"function"==typeof r?r(n):n}next(e,t,r,n){const a=this.getScheduler(e,t),i=d.rating(r);if(i===l.Manual)throw new Error("Cannot review a manual rating");const o=a.review(i);return n&&"function"==typeof n?n(o):o}get_retrievability(e,t,r=!0){const n=d.card(e);t=t?d.time(t):new Date;const a=n.state!==u.New?Math.max(v(t,n.last_review,"days"),0):0,i=n.state!==u.New?this.forgetting_curve(a,+n.stability.toFixed(8)):0;return r?`${(100*i).toFixed(2)}%`:i}rollback(e,t,r){const n=d.card(e),a=d.review_log(t);if(a.rating===l.Manual)throw new Error("Cannot rollback a manual rating");let i,o,s;switch(a.state){case u.New:i=a.due,o=void 0,s=0;break;case u.Learning:case u.Relearning:case u.Review:i=a.review,o=a.due,s=n.lapses-(a.rating===l.Again&&a.state===u.Review?1:0)}const c={...n,due:i,stability:a.stability,difficulty:a.difficulty,elapsed_days:a.last_elapsed_days,scheduled_days:a.scheduled_days,reps:Math.max(0,n.reps-1),lapses:Math.max(0,s),learning_steps:a.learning_steps,state:a.state,last_review:o};return r&&"function"==typeof r?r(c):c}forget(e,t,r=!1,n){const a=d.card(e);t=d.time(t);const i=a.state===u.New?0:v(t,a.due,"days"),o={rating:l.Manual,state:a.state,due:a.due,stability:a.stability,difficulty:a.difficulty,elapsed_days:0,last_elapsed_days:a.elapsed_days,scheduled_days:i,learning_steps:a.learning_steps,review:t},s={card:{...a,due:t,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:r?0:a.reps,lapses:r?0:a.lapses,learning_steps:0,state:u.New,last_review:a.last_review},log:o};return n&&"function"==typeof n?n(s):s}reschedule(e,t=[],r={}){const{recordLogHandler:n,reviewsOrderBy:a,skipManual:i=!0,now:o=new Date,update_memory_state:s=!1}=r;a&&"function"==typeof a&&t.sort(a),i&&(t=t.filter(e=>e.rating!==l.Manual));const c=new gt(this),u=c.reschedule(r.first_card||F(),t),f=u.length,p=d.card(e),h=c.calculateManualRecord(p,o,f?u[f-1]:void 0,s);return n&&"function"==typeof n?{collections:u.map(n),reschedule_item:h?n(h):null}:{collections:u,reschedule_item:h}}}const yt=e=>new it(e||{});var f=yt(I()),mapGradeToRating=function(e){switch(e){case 0:case 1:return 1;case 2:return 2;case 3:case 4:default:return 3;case 5:return 4}},fsrsAlgorithm=function(e,t){try{var r;if(e.fsrsState)if("string"==typeof e.fsrsState)try{r=JSON.parse(e.fsrsState)}catch(e){console.warn("FSRS状态解析失败，创建新卡片:",e),r=F()}else r=e.fsrsState;else r=F();var n=mapGradeToRating(t),a=new Date,i=f.repeat(r,a)[n];if(!i||!i.card||!i.card.due)throw new Error("FSRS调度失败: 无法获取有效的nextCard.card");var o=i.card,s=o.due.getTime()-a.getTime();return{interval:Math.max(0,Math.round(s/864e5)),repetition:o.reps,efactor:o.stability,fsrsState:o}}catch(r){return console.error("FSRS算法执行错误:",r),{interval:t>=3?Math.max(1,2*(e.interval||1)):1,repetition:(e.repetition||0)+1,efactor:e.efactor||2.5}}};const fsrs=null;function practice_typeof(e){return practice_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},practice_typeof(e)}var practice_excluded=["dateCreated","reviewMode"],_excluded2=["nextDueDateFromNow"];function practice_regeneratorRuntime(){var e=practice_regenerator(),t=e.m(practice_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,practice_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(practice_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new practice_OverloadYield(e,t)},AsyncIterator:practice_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?practice_regeneratorAsyncGen:practice_regeneratorAsync)(i(e),t,r,a,o)},keys:practice_regeneratorKeys,values:practice_regeneratorValues}})()}function practice_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(practice_typeof(e)+" is not iterable")}function practice_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function practice_regeneratorAsync(e,t,r,n,a){var i=practice_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function practice_regeneratorAsyncGen(e,t,r,n,a){return new practice_regeneratorAsyncIterator(practice_regenerator().w(e,t,r,n),a||Promise)}function practice_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof practice_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(practice_regeneratorDefine2(practice_regeneratorAsyncIterator.prototype),practice_regeneratorDefine2(practice_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),practice_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function practice_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return practice_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(practice_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,practice_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,practice_regeneratorDefine2(f,"constructor",c),practice_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",practice_regeneratorDefine2(c,a,"GeneratorFunction"),practice_regeneratorDefine2(f),practice_regeneratorDefine2(f,a,"Generator"),practice_regeneratorDefine2(f,n,function(){return this}),practice_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(practice_regenerator=function(){return{w:i,m:p}})()}function practice_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}practice_regeneratorDefine2=function(e,t,r,n){function i(t,r){practice_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},practice_regeneratorDefine2(e,t,r,n)}function practice_OverloadYield(e,t){this.v=e,this.k=t}function practice_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function practice_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){practice_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){practice_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function practice_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function practice_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?practice_ownKeys(Object(r),!0).forEach(function(t){practice_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):practice_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function practice_defineProperty(e,t,r){return(t=practice_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function practice_toPropertyKey(e){var t=practice_toPrimitive(e,"string");return"symbol"==practice_typeof(t)?t:t+""}function practice_toPrimitive(e,t){if("object"!=practice_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=practice_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function practice_objectWithoutProperties(e,t){if(null==e)return{};var r,n,a=practice_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function practice_objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r={};for(var n in e)if({}.hasOwnProperty.call(e,n)){if(-1!==t.indexOf(n))continue;r[n]=e[n]}return r}var generatePracticeData=function(e){var t=e.dateCreated,r=e.reviewMode,n=practice_objectWithoutProperties(e,practice_excluded),a={reviewMode:r};if(r===models_session.Z.FixedInterval){var i=n.intervalMultiplier,o=n.intervalMultiplierType,s=new Date,l=void 0;return i&&o===models_session.D.Days?l=date.addDays(s,i):i&&o===models_session.D.Weeks?l=date.addDays(s,7*i):i&&o===models_session.D.Months?l=date.addDays(s,30*i):i&&o===models_session.D.Years&&(l=date.addDays(s,365*i)),practice_objectSpread(practice_objectSpread({},a),{},{reviewMode:models_session.Z.FixedInterval,intervalMultiplier:i,intervalMultiplierType:o,nextDueDate:l,nextDueDateFromNow:l?date.customFromNow(l):void 0})}var c=n.grade,u=n.interval,f=n.repetitions,p=n.eFactor,h=n.fsrsState,d=fsrsAlgorithm({interval:u||0,repetition:f||0,efactor:p||2.5,fsrsState:h},c||0),m=date.addDays(t,d.interval);return practice_objectSpread(practice_objectSpread(practice_objectSpread({},a),{},{reviewMode:models_session.Z.DefaultSpacedInterval,grade:c,repetitions:d.repetition,interval:d.interval,eFactor:d.efactor},d.fsrsState&&{fsrsState:d.fsrsState}),{},{dateCreated:t,nextDueDate:m,nextDueDateFromNow:date.customFromNow(m)})},practice_practice=function(){var e=practice_asyncToGenerator(practice_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c,u,f,p,h,d,m,y;return practice_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.refUid,n=t.dataPageTitle,a=t.dateCreated,i=t.isCramming,o=t.isDryRun,s=t.grade,l=t.reviewMode,c=t.eFactor,u=t.interval,f=t.repetitions,p=t.intervalMultiplier,h=t.intervalMultiplierType,d=t.fsrsState,(m=generatePracticeData({dateCreated:a,reviewMode:l,grade:s,eFactor:c,interval:u,repetitions:f,intervalMultiplier:p,intervalMultiplierType:h,fsrsState:d})).nextDueDateFromNow,y=practice_objectWithoutProperties(m,_excluded2),o||i){e.next=5;break}return e.next=5,savePracticeData(practice_objectSpread({refUid:r,dataPageTitle:n,dateCreated:a},y));case 5:return e.abrupt("return",y);case 6:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}();const src_practice=practice_practice;var ButtonTags_templateObject;function ButtonTags_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ButtonTags=newStyled.span(ButtonTags_templateObject||(ButtonTags_templateObject=ButtonTags_taggedTemplateLiteral(["\n  background-color: ",";\n  color: #abbbc9;\n  text-transform: uppercase;\n  font-size: 9px;\n  padding: 1px 2px;\n  border-radius: 2px;\n  position: relative;\n  top: -0.5px;\n"])),function(e){return"light"===e.kind?"rgba(138, 155, 168, 0.2)":"rgba(138, 155, 168, 0.1)"});const components_ButtonTags=ButtonTags;function Footer_typeof(e){return Footer_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Footer_typeof(e)}var Footer_excluded=["tooltipText","wrapperClassName"],Footer_templateObject,Footer_templateObject2,Footer_templateObject3,_templateObject4;function Footer_objectWithoutProperties(e,t){if(null==e)return{};var r,n,a=Footer_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function Footer_objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r={};for(var n in e)if({}.hasOwnProperty.call(e,n)){if(-1!==t.indexOf(n))continue;r[n]=e[n]}return r}function Footer_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function Footer_regeneratorRuntime(){var e=Footer_regenerator(),t=e.m(Footer_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,Footer_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(Footer_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new Footer_OverloadYield(e,t)},AsyncIterator:Footer_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?Footer_regeneratorAsyncGen:Footer_regeneratorAsync)(i(e),t,r,a,o)},keys:Footer_regeneratorKeys,values:Footer_regeneratorValues}})()}function Footer_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(Footer_typeof(e)+" is not iterable")}function Footer_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function Footer_regeneratorAsync(e,t,r,n,a){var i=Footer_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function Footer_regeneratorAsyncGen(e,t,r,n,a){return new Footer_regeneratorAsyncIterator(Footer_regenerator().w(e,t,r,n),a||Promise)}function Footer_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof Footer_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(Footer_regeneratorDefine2(Footer_regeneratorAsyncIterator.prototype),Footer_regeneratorDefine2(Footer_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),Footer_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function Footer_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return Footer_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(Footer_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Footer_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,Footer_regeneratorDefine2(f,"constructor",c),Footer_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",Footer_regeneratorDefine2(c,a,"GeneratorFunction"),Footer_regeneratorDefine2(f),Footer_regeneratorDefine2(f,a,"Generator"),Footer_regeneratorDefine2(f,n,function(){return this}),Footer_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(Footer_regenerator=function(){return{w:i,m:p}})()}function Footer_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Footer_regeneratorDefine2=function(e,t,r,n){function i(t,r){Footer_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},Footer_regeneratorDefine2(e,t,r,n)}function Footer_OverloadYield(e,t){this.v=e,this.k=t}function Footer_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function Footer_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){Footer_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){Footer_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function Footer_slicedToArray(e,t){return Footer_arrayWithHoles(e)||Footer_iterableToArrayLimit(e,t)||Footer_unsupportedIterableToArray(e,t)||Footer_nonIterableRest()}function Footer_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function Footer_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return Footer_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Footer_arrayLikeToArray(e,t):void 0}}function Footer_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function Footer_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function Footer_arrayWithHoles(e){if(Array.isArray(e))return e}var Footer=function(e){var t=e.setShowAnswers,r=e.showAnswers,n=e.refUid,a=e.onPracticeClick,i=e.onSkipClick,o=e.onPrevClick,s=e.isDone,l=e.hasCards,c=e.onCloseCallback,u=e.currentCardData,f=e.onStartCrammingClick,p=external_React_.useContext(MainContext),h=p.reviewMode,d=p.intervalMultiplier,m=p.intervalMultiplierType,y=Footer_slicedToArray(external_React_.useState(!1),2),g=y[0],v=y[1],_=function(){return v(function(e){return!e})},b=Footer_slicedToArray(external_React_.useState(null),2),x=b[0],S=b[1],C=function(){var e=Footer_asyncToGenerator(Footer_regeneratorRuntime().mark(function e(t,r){var n;return Footer_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return S(t),n="skip-button"===t?50:100,e.next=4,sleep(n);case 4:r(),S(null);case 6:case"end":return e.stop()}},e)}));return function(t,r){return e.apply(this,arguments)}}(),P=external_React_.useMemo(function(){return function(){t(!0)}},[t]),w=external_React_.useMemo(function(){return function(e){var t;switch(e){case 0:t="forgot-button";break;case 2:t="hard-button";break;case 4:t="good-button";break;case 5:t="perfect-button"}C(t,function(){return a({grade:e,refUid:n,reviewMode:h})})}},[a,n,h]),k=external_React_.useMemo(function(){return function(){C("next-button",function(){return a({refUid:n,reviewMode:h})})}},[a,n,h]),D=external_React_.useMemo(function(){return function(){C("skip-button",function(){return i()})}},[i]),E=external_React_.useMemo(function(){return[{combo:"space",global:!0,label:"Primary Action Trigger",onKeyDown:function(){r?h===models_session.Z.FixedInterval?k():w(5):C("space-button",P)}},{combo:"S",global:!0,label:"Skip",onKeyDown:D},{combo:"right",global:!0,label:"Skip",onKeyDown:D},{combo:"left",global:!0,label:"Previous",onKeyDown:o},{combo:"X",global:!0,label:"Forgot (Grade 0)",onKeyDown:function(){return w(0)},disabled:h===models_session.Z.FixedInterval},{combo:"H",global:!0,label:"Grade 2",onKeyDown:function(){return w(2)},disabled:h===models_session.Z.FixedInterval},{combo:"G",global:!0,label:"Grade 4",onKeyDown:function(){return w(4)},disabled:h!==models_session.Z.DefaultSpacedInterval},{combo:"E",global:!0,label:"Edit Interval",onKeyDown:_,disabled:h!==models_session.Z.FixedInterval}]},[D,o,h,r,P,k,w]),A=external_Blueprint_Core_namespaceObject.useHotkeys(E),T=A.handleKeyDown,M=A.handleKeyUp,O=external_React_.useMemo(function(){if(u){for(var e=[0,1,2,3,4,5],t=u.interval,r=u.repetitions,n=u.eFactor,a=u.fsrsState,i={},o=h===models_session.Z.FixedInterval?1:e.length,s=0;s<o;s++){var l=e[s],c=generatePracticeData({grade:l,interval:t,repetitions:r,eFactor:n,fsrsState:a,dateCreated:new Date,reviewMode:h,intervalMultiplier:d,intervalMultiplierType:m});i[l]=c}return i}},[u,d,m,h]);return external_React_.createElement(FooterWrapper,{className:"bp3-multistep-dialog-footer flex items-center justify-center rounded-b-md p-0",onKeyDown:T,onKeyUp:M},external_React_.createElement(FooterActionsWrapper,{className:"bp3-dialog-footer-actions flex items-center justify-between w-full mx-5 my-3","data-testid":"footer-actions-wrapper"},s||!l?external_React_.createElement(FinishedControls,{onStartCrammingClick:f,onCloseCallback:c}):r?external_React_.createElement(GradingControlsWrapper,{activeButtonKey:x,skipFn:D,gradeFn:w,intervalEstimates:O,intervalPractice:k,isIntervalEditorOpen:g,toggleIntervalEditorOpen:_}):external_React_.createElement(AnswerHiddenControls,{activateButtonFn:C,showAnswerFn:P,activeButtonKey:x})))},AnswerHiddenControls=function(e){var t=e.activateButtonFn,r=e.showAnswerFn,n=e.activeButtonKey;return external_React_.createElement(external_React_.Fragment,null,external_React_.createElement("div",{className:"flex-shrink-0"}),external_React_.createElement("div",{className:"flex-1 flex justify-center"},external_React_.createElement(ControlButton,{className:"text-base font-medium py-1",intent:"none",onClick:function(){t("space-button",r)},active:"space-button"===n,outlined:!0},"Show Answer"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"SPACE")))),external_React_.createElement("div",{className:"flex-shrink-0"}))},FinishedControls=function(e){var t=e.onStartCrammingClick,r=e.onCloseCallback;return external_React_.createElement(external_React_.Fragment,null,external_React_.createElement("div",{className:"flex-shrink-0"}),external_React_.createElement("div",{className:"flex-1 flex justify-center gap-4"},external_React_.createElement(components_Tooltip,{content:"Review all cards without waiting for scheduling",placement:"top"},external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{className:"text-base font-medium py-1",intent:"none",onClick:t,outlined:!0},"Continue Cramming")),external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{className:"text-base font-medium py-1",intent:"primary",onClick:r,outlined:!0},"Close")),external_React_.createElement("div",{className:"flex-shrink-0"}))},GradingControlsWrapper=function(e){var t=e.activeButtonKey,r=e.skipFn,n=e.gradeFn,a=e.intervalEstimates,i=e.intervalPractice,o=e.isIntervalEditorOpen,s=e.toggleIntervalEditorOpen,l=external_React_.useContext(MainContext),c=l.reviewMode,u=l.setReviewModeOverride,f=c===models_session.Z.FixedInterval;return external_React_.createElement(external_React_.Fragment,null,external_React_.createElement("div",{className:"flex-shrink-0"},external_React_.createElement(ControlButton,{key:"skip-button",className:"text-base font-medium py-1",tooltipText:"Skip for now",onClick:function(){return r()},active:"skip-button"===t,outlined:!0},"Skip"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"S")))),external_React_.createElement("div",{className:"flex-1 flex justify-center gap-2 flex-wrap"},f?external_React_.createElement(FixedIntervalModeControls,{activeButtonKey:t,intervalPractice:i,isIntervalEditorOpen:o,toggleIntervalEditorOpen:s,intervalEstimates:a}):external_React_.createElement(SpacedIntervalModeControls,{activeButtonKey:t,gradeFn:n,intervalEstimates:a})),external_React_.createElement("div",{className:"flex-shrink-0"},external_React_.createElement(SetIntervalToggleWrapper,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"100px"}},external_React_.createElement("span",{className:"text-xs ".concat(f?"text-gray-400":"text-blue-600 font-medium")},"AUTO"),external_React_.createElement(external_Blueprint_Core_namespaceObject.Switch,{className:"mb-0",style:{transform:"scale(0.9)"},checked:f,onChange:function(){void 0!==u&&u(function(e){if(void 0===e)return c===models_session.Z.DefaultSpacedInterval?models_session.Z.FixedInterval:models_session.Z.DefaultSpacedInterval})},"data-testid":"review-mode-switch"}),external_React_.createElement("span",{className:"text-xs ".concat(f?"text-blue-600 font-medium":"text-gray-400")},"FIX"))))},FixedIntervalEditor=function(){var e=external_React_.useContext(MainContext),t=e.intervalMultiplier,r=e.intervalMultiplierType,n=e.setIntervalMultiplier,a=e.setIntervalMultiplierType,i=[{value:models_session.D.Days,label:"Days"},{value:models_session.D.Weeks,label:"Weeks"},{value:models_session.D.Months,label:"Months"},{value:models_session.D.Years,label:"Years"}];return external_React_.createElement("div",{className:"flex p-2 items-center w-80 justify-evenly"},external_React_.createElement("div",{className:""},"Every"),external_React_.createElement("div",{className:"w-24"},external_React_.createElement(external_Blueprint_Core_namespaceObject.NumericInput,{min:1,max:365,stepSize:1,majorStepSize:30,minorStepSize:1,value:t,onValueChange:function(e){isNaN(e)||n(e)},fill:!0})),external_React_.createElement("div",{className:"bp3-html-select"},external_React_.createElement("select",{value:r,onChange:function(e){return a(e.currentTarget.value)}},i.map(function(e){return external_React_.createElement("option",{key:e.value,value:e.value,selected:e.value===r},e.label)})),external_React_.createElement("span",{className:"bp3-icon bp3-icon-double-caret-vertical"})))},IntervalString=function(e){var t=e.intervalMultiplier,r=e.intervalMultiplierType,n="";if(1===t)switch(r){case models_session.D.Weeks:n+="Weekly";break;case models_session.D.Months:n+="Monthly";break;case models_session.D.Years:n+="Yearly";break;default:n+="Daily"}return external_React_.createElement(external_React_.Fragment,null,"Review"," ",external_React_.createElement("span",{className:"font-medium mr-3"},n||external_React_.createElement(external_React_.Fragment,null,"Every ",t," ",r)))},FixedIntervalModeControls=function(e){var t=e.activeButtonKey,r=e.intervalPractice,n=e.isIntervalEditorOpen,a=e.toggleIntervalEditorOpen,i=e.intervalEstimates,o=external_React_.useContext(MainContext),s=o.intervalMultiplier,l=o.intervalMultiplierType;return i?external_React_.createElement(external_React_.Fragment,null,external_React_.createElement(external_Blueprint_Core_namespaceObject.Popover,{isOpen:n,onInteraction:function(e){!e&&n&&a()}},external_React_.createElement(ControlButton,{icon:"time",className:"text-base font-normal py-1",intent:"default",onClick:a,tooltipText:"Change Interval",active:"change-interval-button"===t,outlined:!0},external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(IntervalString,{intervalMultiplier:s,intervalMultiplierType:l}),external_React_.createElement(components_ButtonTags,null,"E"))),external_React_.createElement(FixedIntervalEditor,null)),external_React_.createElement(ControlButton,{icon:"tick",className:"text-base font-medium py-1",intent:"success",onClick:function(){return r()},tooltipText:"Review ".concat(i[0].nextDueDateFromNow),active:"next-button"===t,outlined:!0},"Next"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"SPACE")))):(console.error("Interval estimates not set"),null)},SpacedIntervalModeControls=function(e){var t,r,n,a,i=e.activeButtonKey,o=e.gradeFn,s=e.intervalEstimates;return s?external_React_.createElement(external_React_.Fragment,null,external_React_.createElement(ControlButton,{key:"forget-button",className:"text-base font-medium py-1",intent:"danger",tooltipText:"Review ".concat(null===(t=s[0])||void 0===t?void 0:t.nextDueDateFromNow),onClick:function(){return o(0)},active:"forgot-button"===i,outlined:!0},"Forgot"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"X"))),external_React_.createElement(ControlButton,{className:"text-base font-medium py-1",intent:"warning",onClick:function(){return o(2)},tooltipText:"Review ".concat(null===(r=s[2])||void 0===r?void 0:r.nextDueDateFromNow),active:"hard-button"===i,outlined:!0},"Hard"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"H"))),external_React_.createElement(ControlButton,{className:"text-base font-medium py-1",intent:"primary",onClick:function(){return o(4)},tooltipText:"Review ".concat(null===(n=s[4])||void 0===n?void 0:n.nextDueDateFromNow),active:"good-button"===i,outlined:!0},"Good"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"G"))),external_React_.createElement(ControlButton,{className:"text-base font-medium py-1",intent:"success",onClick:function(){return o(5)},tooltipText:"Review ".concat(null===(a=s[5])||void 0===a?void 0:a.nextDueDateFromNow),active:"perfect-button"===i,outlined:!0},"Perfect"," ",external_React_.createElement("span",{className:"ml-2"},external_React_.createElement(components_ButtonTags,null,"SPACE")))):(console.error("Interval estimates not set"),null)},FooterWrapper=newStyled.div(Footer_templateObject||(Footer_templateObject=Footer_taggedTemplateLiteral(["\n  background-color: #f6f9fd;\n  min-height: 50px;\n  border-top: 1px solid rgba(16, 22, 26, 0.1);\n\n  & .bp3-button-text {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n"]))),FooterActionsWrapper=newStyled.div(Footer_templateObject2||(Footer_templateObject2=Footer_taggedTemplateLiteral(["\n  &.bp3-dialog-footer-actions .bp3-button {\n    margin-left: 0;\n  }\n\n  /* 📱 Mobile portrait: Skip & Toggle share first row, grading controls second row */\n  "," {\n    /* ❶ 重点：改成 grid，而不是 flex-column */\n    display: grid !important;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas:\n      'skip  toggle'\n      'middle middle';\n    gap: 0.5rem;\n\n    /* ❷ 给 3 个直接子元素绑定网格区域 */\n    & > :nth-child(1) { grid-area: skip;   }   /* Skip */\n    & > :nth-child(2) { grid-area: middle; }   /* 中间评分按钮组 */\n    & > :nth-child(3) { grid-area: toggle; justify-self: end; } /* AUTO/FIX */\n\n    /* 字号、滚动等原有细节保持不变 */\n    & .bp3-button {\n      font-size: clamp(12px, 3vw, 14px);\n      padding: 0.3rem 0.5rem;\n      min-height: 44px; /* maintain tap target */\n    }\n    & > .flex-1 {\n      flex-wrap: nowrap;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n      gap: 0.25rem;\n    }\n  }\n"])),utils_mediaQueries.mobilePortrait),SetIntervalToggleWrapper=newStyled.div(Footer_templateObject3||(Footer_templateObject3=Footer_taggedTemplateLiteral([""]))),ControlButtonWrapper=newStyled(external_Blueprint_Core_namespaceObject.Button)(_templateObject4||(_templateObject4=Footer_taggedTemplateLiteral([""]))),ControlButton=function(e){var t=e.tooltipText,r=e.wrapperClassName,n=void 0===r?"":r,a=Footer_objectWithoutProperties(e,Footer_excluded);return external_React_.createElement(components_Tooltip,{content:t,placement:"top",wrapperClassName:n},external_React_.createElement(ControlButtonWrapper,a))};const overlay_Footer=Footer;function PrioritySlider_typeof(e){return PrioritySlider_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},PrioritySlider_typeof(e)}var PrioritySlider_templateObject,PrioritySlider_templateObject2,PrioritySlider_templateObject3,PrioritySlider_templateObject4,_templateObject5,_templateObject6,_templateObject7;function PrioritySlider_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function PrioritySlider_regeneratorRuntime(){var e=PrioritySlider_regenerator(),t=e.m(PrioritySlider_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,PrioritySlider_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(PrioritySlider_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new PrioritySlider_OverloadYield(e,t)},AsyncIterator:PrioritySlider_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?PrioritySlider_regeneratorAsyncGen:PrioritySlider_regeneratorAsync)(i(e),t,r,a,o)},keys:PrioritySlider_regeneratorKeys,values:PrioritySlider_regeneratorValues}})()}function PrioritySlider_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(PrioritySlider_typeof(e)+" is not iterable")}function PrioritySlider_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function PrioritySlider_regeneratorAsync(e,t,r,n,a){var i=PrioritySlider_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function PrioritySlider_regeneratorAsyncGen(e,t,r,n,a){return new PrioritySlider_regeneratorAsyncIterator(PrioritySlider_regenerator().w(e,t,r,n),a||Promise)}function PrioritySlider_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof PrioritySlider_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(PrioritySlider_regeneratorDefine2(PrioritySlider_regeneratorAsyncIterator.prototype),PrioritySlider_regeneratorDefine2(PrioritySlider_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),PrioritySlider_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function PrioritySlider_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return PrioritySlider_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(PrioritySlider_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,PrioritySlider_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,PrioritySlider_regeneratorDefine2(f,"constructor",c),PrioritySlider_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",PrioritySlider_regeneratorDefine2(c,a,"GeneratorFunction"),PrioritySlider_regeneratorDefine2(f),PrioritySlider_regeneratorDefine2(f,a,"Generator"),PrioritySlider_regeneratorDefine2(f,n,function(){return this}),PrioritySlider_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(PrioritySlider_regenerator=function(){return{w:i,m:p}})()}function PrioritySlider_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}PrioritySlider_regeneratorDefine2=function(e,t,r,n){function i(t,r){PrioritySlider_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},PrioritySlider_regeneratorDefine2(e,t,r,n)}function PrioritySlider_OverloadYield(e,t){this.v=e,this.k=t}function PrioritySlider_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function PrioritySlider_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){PrioritySlider_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){PrioritySlider_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function PrioritySlider_slicedToArray(e,t){return PrioritySlider_arrayWithHoles(e)||PrioritySlider_iterableToArrayLimit(e,t)||PrioritySlider_unsupportedIterableToArray(e,t)||PrioritySlider_nonIterableRest()}function PrioritySlider_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function PrioritySlider_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return PrioritySlider_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?PrioritySlider_arrayLikeToArray(e,t):void 0}}function PrioritySlider_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function PrioritySlider_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function PrioritySlider_arrayWithHoles(e){if(Array.isArray(e))return e}var PrioritySlider=function(e){var t=e.currentPosition,r=e.totalCards,n=e.onPositionChange,a=e.unifiedData,i=e.onDataRefresh,o=e.disabled,s=void 0!==o&&o,l=PrioritySlider_slicedToArray(external_React_.useState(t),2),c=l[0],u=l[1],f=PrioritySlider_slicedToArray(external_React_.useState(!1),2),p=f[0],h=f[1],d=PrioritySlider_slicedToArray(external_React_.useState(!1),2),m=d[0],y=d[1];external_React_.useEffect(function(){u(t)},[t]),external_React_.useEffect(function(){var e=a.priorityManagement.getUndoInfo();y(e.canUndo)},[a]);var g=function(){var e=PrioritySlider_asyncToGenerator(PrioritySlider_regeneratorRuntime().mark(function e(r){var i;return PrioritySlider_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r!==t){e.next=2;break}return e.abrupt("return");case 2:return h(!0),e.prev=3,e.next=6,n(r);case 6:i=a.priorityManagement.getUndoInfo(),y(i.canUndo);case 8:return e.prev=8,h(!1),e.finish(8);case 11:case"end":return e.stop()}},e,null,[[3,,8,11]])}));return function(t){return e.apply(this,arguments)}}(),v=function(){var e=PrioritySlider_asyncToGenerator(PrioritySlider_regeneratorRuntime().mark(function e(){return PrioritySlider_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return h(!0),e.prev=1,e.next=4,a.priorityManagement.undoLastOperation();case 4:e.sent&&(y(!1),null==i||i());case 6:return e.prev=6,h(!1),e.finish(6);case 9:case"end":return e.stop()}},e,null,[[1,,6,9]])}));return function(){return e.apply(this,arguments)}}(),_=Math.round((r-t+1)/r*100);return external_React_.createElement(Container,null,external_React_.createElement(Header,null,external_React_.createElement(Title,null,"卡片优先级 ",p&&external_React_.createElement(external_Blueprint_Core_namespaceObject.Spinner,{size:12})),external_React_.createElement(Info,null,"位置: ",t,"/",r," | 优先级: ",_,"%")),external_React_.createElement(SliderContainer,null,external_React_.createElement(external_Blueprint_Core_namespaceObject.Slider,{min:1,max:r,stepSize:1,value:c,onChange:function(e){u(e)},onRelease:g,disabled:s||p,labelRenderer:function(e){return"".concat(e)},labelStepSize:Math.max(1,Math.floor(r/4)),labelValues:[1,Math.floor(.25*r),Math.floor(.5*r),Math.floor(.75*r),r]})),m&&external_React_.createElement(UndoContainer,null,external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{icon:"undo",minimal:!0,small:!0,intent:"primary",disabled:p,onClick:v,title:a.priorityManagement.getUndoInfo().lastOperation||"撤销操作"},"撤销"),external_React_.createElement(UndoText,null,a.priorityManagement.getUndoInfo().lastOperation||"撤销上次操作")))},Container=newStyled.div(PrioritySlider_templateObject||(PrioritySlider_templateObject=PrioritySlider_taggedTemplateLiteral(["\n  padding: 12px 16px;\n  background: #f5f8fa;\n  border-top: 1px solid #e1e8ed;\n"]))),Header=newStyled.div(PrioritySlider_templateObject2||(PrioritySlider_templateObject2=PrioritySlider_taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n"]))),Title=newStyled.span(PrioritySlider_templateObject3||(PrioritySlider_templateObject3=PrioritySlider_taggedTemplateLiteral(["\n  font-size: 14px;\n  font-weight: 500;\n  color: #182026;\n"]))),Info=newStyled.span(PrioritySlider_templateObject4||(PrioritySlider_templateObject4=PrioritySlider_taggedTemplateLiteral(["\n  font-size: 12px;\n  color: #5c7080;\n"]))),SliderContainer=newStyled.div(_templateObject5||(_templateObject5=PrioritySlider_taggedTemplateLiteral(["\n  margin: 0 8px 12px 8px;\n"]))),UndoContainer=newStyled.div(_templateObject6||(_templateObject6=PrioritySlider_taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  padding: 8px 12px;\n  background: #f0f7ff;\n  border: 1px solid #cce7f0;\n  border-radius: 4px;\n  margin-top: 8px;\n"]))),UndoText=newStyled.span(_templateObject7||(_templateObject7=PrioritySlider_taggedTemplateLiteral(["\n  font-size: 12px;\n  color: #2b95d6;\n  font-weight: 500;\n"])));const components_PrioritySlider=PrioritySlider;var CardDotMatrix=__webpack_require__(3697),CardDotMatrixCanvas_templateObject,CardDotMatrixCanvas_templateObject2,CardDotMatrixCanvas_templateObject3,CardDotMatrixCanvas_templateObject4;function CardDotMatrixCanvas_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function CardDotMatrixCanvas_createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=CardDotMatrixCanvas_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function CardDotMatrixCanvas_slicedToArray(e,t){return CardDotMatrixCanvas_arrayWithHoles(e)||CardDotMatrixCanvas_iterableToArrayLimit(e,t)||CardDotMatrixCanvas_unsupportedIterableToArray(e,t)||CardDotMatrixCanvas_nonIterableRest()}function CardDotMatrixCanvas_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function CardDotMatrixCanvas_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return CardDotMatrixCanvas_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?CardDotMatrixCanvas_arrayLikeToArray(e,t):void 0}}function CardDotMatrixCanvas_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function CardDotMatrixCanvas_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function CardDotMatrixCanvas_arrayWithHoles(e){if(Array.isArray(e))return e}var CardDotMatrixCanvas=function(e){var t,r=e.dots,n=e.config,a=void 0===n?CardDotMatrix.defaultDotMatrixConfig:n,i=e.selectedDeck,o=e.onDotClick,s=e.onDotHover,l=external_React_.useRef(null),c=external_React_.useRef(null),u=CardDotMatrixCanvas_slicedToArray(external_React_.useState(null),2),f=u[0],p=u[1],h=CardDotMatrixCanvas_slicedToArray(external_React_.useState(!0),2),d=h[0],m=h[1],y=external_React_.useCallback(function(e){e.strokeStyle="#e1e8ed",e.lineWidth=1,e.beginPath(),e.moveTo(a.marginX,a.canvasHeight-a.marginY),e.lineTo(a.canvasWidth-a.marginX,a.canvasHeight-a.marginY),e.stroke(),e.beginPath(),e.moveTo(a.marginX,a.marginY),e.lineTo(a.marginX,a.canvasHeight-a.marginY),e.stroke()},[a]),g=external_React_.useCallback(function(e){e.fillStyle="#5c7080",e.font='12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',e.textAlign="center",(0,CardDotMatrix.generatePriorityAxisLabels)().forEach(function(t){var r=t.position,n=t.label,i=(0,CardDotMatrix.logicalToCanvas)(r,0,a).canvasX;e.fillText(n,i,a.canvasHeight-a.marginY+20)});var t=(0,CardDotMatrix.generateTimeAxisLabels)(a);e.textAlign="right",t.forEach(function(t){var r=t.position,n=t.label,i=(0,CardDotMatrix.logicalToCanvas)(0,r,a).canvasY;e.fillText(n,a.marginX-15,i+4)}),e.save(),e.textAlign="center",e.font='bold 13px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',e.fillStyle="#333",e.translate(20,a.canvasHeight/2),e.rotate(-Math.PI/2),e.fillText("到期时间",0,0),e.restore()},[a]),v=external_React_.useCallback(function(e){e.strokeStyle="#f5f8fa",e.lineWidth=1,(0,CardDotMatrix.generatePriorityAxisLabels)().forEach(function(t){var r=t.position,n=(0,CardDotMatrix.logicalToCanvas)(r,0,a).canvasX;e.beginPath(),e.moveTo(n,a.marginY),e.lineTo(n,a.canvasHeight-a.marginY),e.stroke()}),(0,CardDotMatrix.generateTimeAxisLabels)(a).forEach(function(t){var r=t.position,n=(0,CardDotMatrix.logicalToCanvas)(0,r,a).canvasY;e.beginPath(),e.moveTo(a.marginX,n),e.lineTo(a.canvasWidth-a.marginX,n),e.stroke()})},[a]),_=external_React_.useCallback(function(e){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?"#0f9960":e.isOverdue?"#db3737":e.isNew?"#2b95d6":i&&e.deckName===i?"#f29d49":"#5c7080"},[i]),b=external_React_.useCallback(function(e){r.forEach(function(t){var r=(0,CardDotMatrix.logicalToCanvas)(t.x,t.y,a),n=r.canvasX,i=r.canvasY,o=(null==f?void 0:f.uid)===t.uid,s=_(t,o);e.fillStyle=s,e.beginPath(),e.arc(n,i,o?a.dotSize+2:a.dotSize,0,2*Math.PI),e.fill(),t.isOverdue&&(e.strokeStyle="#a82a2a",e.lineWidth=1,e.stroke())})},[r,a,f,_]),x=external_React_.useCallback(function(){c.current||(c.current=document.createElement("canvas"),c.current.width=a.canvasWidth,c.current.height=a.canvasHeight);var e=c.current.getContext("2d");e&&(e.clearRect(0,0,a.canvasWidth,a.canvasHeight),v(e),y(e),g(e),m(!1))},[a,v,y,g]),S=external_React_.useCallback(function(){var e=l.current;if(e){var t=e.getContext("2d");t&&(t.clearRect(0,0,a.canvasWidth,a.canvasHeight),d&&x(),c.current&&t.drawImage(c.current,0,0),b(t))}},[a,x,b,d]),C=external_React_.useCallback(function(e,t){var n=l.current;if(!n)return null;var i,o=n.getBoundingClientRect(),s=e-o.left,c=t-o.top,u=CardDotMatrixCanvas_createForOfIteratorHelper(r);try{for(u.s();!(i=u.n()).done;){var f=i.value,p=(0,CardDotMatrix.logicalToCanvas)(f.x,f.y,a),h=p.canvasX,d=p.canvasY;if(Math.sqrt(Math.pow(s-h,2)+Math.pow(c-d,2))<=a.dotSize+4)return f}}catch(e){u.e(e)}finally{u.f()}return null},[r,a]),P=external_React_.useCallback(function(e){var t=C(e.clientX,e.clientY);p(t),null==s||s(t)},[C,s]),w=external_React_.useCallback(function(e){var t=C(e.clientX,e.clientY);t&&(null==o||o(t))},[C,o]),k=external_React_.useCallback(function(){p(null),null==s||s(null)},[s]);return external_React_.useEffect(function(){m(!0)},[a]),external_React_.useEffect(function(){var e=setTimeout(function(){S()},16);return function(){return clearTimeout(e)}},[S]),external_React_.createElement(CanvasContainer,null,external_React_.createElement(StyledCanvas,{ref:l,width:a.canvasWidth,height:a.canvasHeight,onMouseMove:P,onClick:w,onMouseLeave:k}),f&&external_React_.createElement(CardDotMatrixCanvas_Tooltip,null,external_React_.createElement(TooltipContent,null,external_React_.createElement("div",{className:"card-title"},external_React_.createElement("strong",null,f.title||"加载中...")),external_React_.createElement("div",{className:"card-info"},external_React_.createElement("div",null,"牌组: ",f.deckName),external_React_.createElement("div",null,"UID: ",external_React_.createElement("code",null,f.uid)),external_React_.createElement("div",null,"到期: ",f.daysToDue,"天后"),external_React_.createElement("div",null,"优先级: ",(null!==(t=f.priority)&&void 0!==t?t:0).toFixed(1),"%")),external_React_.createElement("div",{className:"card-tags"},f.isNew&&external_React_.createElement("span",{className:"new-tag"},"新卡片"),f.isOverdue&&external_React_.createElement("span",{className:"overdue-tag"},"已过期")))))},CanvasContainer=newStyled.div(CardDotMatrixCanvas_templateObject||(CardDotMatrixCanvas_templateObject=CardDotMatrixCanvas_taggedTemplateLiteral(["\n  position: relative;\n  display: inline-block;\n  border: 1px solid #e1e8ed;\n  border-radius: 6px;\n  background: white;\n"]))),StyledCanvas=newStyled.canvas(CardDotMatrixCanvas_templateObject2||(CardDotMatrixCanvas_templateObject2=CardDotMatrixCanvas_taggedTemplateLiteral(["\n  display: block;\n  cursor: crosshair;\n  \n  &:hover {\n    cursor: pointer;\n  }\n"]))),CardDotMatrixCanvas_Tooltip=newStyled.div(CardDotMatrixCanvas_templateObject3||(CardDotMatrixCanvas_templateObject3=CardDotMatrixCanvas_taggedTemplateLiteral(["\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  pointer-events: none;\n  z-index: 1000;\n"]))),TooltipContent=newStyled.div(CardDotMatrixCanvas_templateObject4||(CardDotMatrixCanvas_templateObject4=CardDotMatrixCanvas_taggedTemplateLiteral(["\n  background: rgba(0, 0, 0, 0.85);\n  color: white;\n  padding: 10px 14px;\n  border-radius: 6px;\n  font-size: 12px;\n  max-width: 320px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  min-width: 200px;\n  \n  .card-title {\n    margin-bottom: 8px;\n    padding-bottom: 6px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n    word-wrap: break-word;\n    \n    strong {\n      font-size: 13px;\n      font-weight: 600;\n      color: #ffffff;\n      line-height: 1.3;\n      display: block;\n    }\n  }\n  \n  .card-info {\n    margin-bottom: 8px;\n    \n    div {\n      margin-bottom: 3px;\n      font-size: 11px;\n      color: rgba(255, 255, 255, 0.9);\n      \n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n    \n    code {\n      background: rgba(255, 255, 255, 0.15);\n      padding: 1px 4px;\n      border-radius: 3px;\n      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n      font-size: 10px;\n      color: #ffd700;\n    }\n  }\n  \n  .card-tags {\n    display: flex;\n    gap: 6px;\n    flex-wrap: wrap;\n    \n    span {\n      padding: 2px 6px;\n      border-radius: 3px;\n      font-size: 10px;\n      font-weight: 500;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n  }\n  \n  .new-tag {\n    background: rgba(43, 149, 214, 0.2);\n    color: #87ceeb;\n    border: 1px solid rgba(43, 149, 214, 0.4);\n  }\n  \n  .overdue-tag {\n    background: rgba(219, 55, 55, 0.2);\n    color: #ff6b6b;\n    border: 1px solid rgba(219, 55, 55, 0.4);\n  }\n"])));const components_CardDotMatrixCanvas=CardDotMatrixCanvas;function CardDotMatrixManager_typeof(e){return CardDotMatrixManager_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},CardDotMatrixManager_typeof(e)}var CardDotMatrixManager_templateObject,CardDotMatrixManager_templateObject2,CardDotMatrixManager_templateObject3,CardDotMatrixManager_templateObject4,CardDotMatrixManager_templateObject5,CardDotMatrixManager_templateObject6,CardDotMatrixManager_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15,_templateObject16;function CardDotMatrixManager_toConsumableArray(e){return CardDotMatrixManager_arrayWithoutHoles(e)||CardDotMatrixManager_iterableToArray(e)||CardDotMatrixManager_unsupportedIterableToArray(e)||CardDotMatrixManager_nonIterableSpread()}function CardDotMatrixManager_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function CardDotMatrixManager_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function CardDotMatrixManager_arrayWithoutHoles(e){if(Array.isArray(e))return CardDotMatrixManager_arrayLikeToArray(e)}function CardDotMatrixManager_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function CardDotMatrixManager_regeneratorRuntime(){var e=CardDotMatrixManager_regenerator(),t=e.m(CardDotMatrixManager_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,CardDotMatrixManager_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(CardDotMatrixManager_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new CardDotMatrixManager_OverloadYield(e,t)},AsyncIterator:CardDotMatrixManager_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?CardDotMatrixManager_regeneratorAsyncGen:CardDotMatrixManager_regeneratorAsync)(i(e),t,r,a,o)},keys:CardDotMatrixManager_regeneratorKeys,values:CardDotMatrixManager_regeneratorValues}})()}function CardDotMatrixManager_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(CardDotMatrixManager_typeof(e)+" is not iterable")}function CardDotMatrixManager_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function CardDotMatrixManager_regeneratorAsync(e,t,r,n,a){var i=CardDotMatrixManager_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function CardDotMatrixManager_regeneratorAsyncGen(e,t,r,n,a){return new CardDotMatrixManager_regeneratorAsyncIterator(CardDotMatrixManager_regenerator().w(e,t,r,n),a||Promise)}function CardDotMatrixManager_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof CardDotMatrixManager_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(CardDotMatrixManager_regeneratorDefine2(CardDotMatrixManager_regeneratorAsyncIterator.prototype),CardDotMatrixManager_regeneratorDefine2(CardDotMatrixManager_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),CardDotMatrixManager_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function CardDotMatrixManager_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return CardDotMatrixManager_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(CardDotMatrixManager_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,CardDotMatrixManager_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,CardDotMatrixManager_regeneratorDefine2(f,"constructor",c),CardDotMatrixManager_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",CardDotMatrixManager_regeneratorDefine2(c,a,"GeneratorFunction"),CardDotMatrixManager_regeneratorDefine2(f),CardDotMatrixManager_regeneratorDefine2(f,a,"Generator"),CardDotMatrixManager_regeneratorDefine2(f,n,function(){return this}),CardDotMatrixManager_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(CardDotMatrixManager_regenerator=function(){return{w:i,m:p}})()}function CardDotMatrixManager_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}CardDotMatrixManager_regeneratorDefine2=function(e,t,r,n){function i(t,r){CardDotMatrixManager_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},CardDotMatrixManager_regeneratorDefine2(e,t,r,n)}function CardDotMatrixManager_OverloadYield(e,t){this.v=e,this.k=t}function CardDotMatrixManager_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function CardDotMatrixManager_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){CardDotMatrixManager_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){CardDotMatrixManager_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function CardDotMatrixManager_slicedToArray(e,t){return CardDotMatrixManager_arrayWithHoles(e)||CardDotMatrixManager_iterableToArrayLimit(e,t)||CardDotMatrixManager_unsupportedIterableToArray(e,t)||CardDotMatrixManager_nonIterableRest()}function CardDotMatrixManager_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function CardDotMatrixManager_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return CardDotMatrixManager_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?CardDotMatrixManager_arrayLikeToArray(e,t):void 0}}function CardDotMatrixManager_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function CardDotMatrixManager_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function CardDotMatrixManager_arrayWithHoles(e){if(Array.isArray(e))return e}var CardDotMatrixManager=function(e){var t=e.isOpen,r=e.onClose,n=e.unifiedData,a=e.onDataRefresh,i=CardDotMatrixManager_slicedToArray(external_React_.useState(CardDotMatrix.defaultDotMatrixConfig),1)[0],o=CardDotMatrixManager_slicedToArray(external_React_.useState(""),2),s=o[0],l=o[1],c=CardDotMatrixManager_slicedToArray(external_React_.useState(0),2),u=c[0],f=c[1],p=CardDotMatrixManager_slicedToArray(external_React_.useState(1),2),h=p[0],d=p[1];external_React_.useEffect(function(){t&&n.loadBlockTitlesForDotMatrix().catch(console.error)},[t,n]);var m=external_React_.useMemo(function(){return n.getDeckDots(s,u,h)},[n,s,u,h]),y=external_React_.useMemo(function(){var e=n.dotMatrix.stats,t=s?e.byDeck[s]:e;return t?{newCards:t.new,dueCards:t.due,futureCards:t.notDue,totalAll:t.total}:{newCards:0,dueCards:0,futureCards:0,totalAll:0}},[s,n.dotMatrix.stats]),g=function(){f(0),d(1)},v=function(){var e=CardDotMatrixManager_asyncToGenerator(CardDotMatrixManager_regeneratorRuntime().mark(function e(){var t,r,i,o,l,c,f,p,d,m,y;return CardDotMatrixManager_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(s&&n.priorityManagement){e.next=2;break}return e.abrupt("return");case 2:if(0!==(t=n.getDeckCardPriorityInfo(s)).length){e.next=5;break}return e.abrupt("return");case 5:return r=n.priorityOrder,i=r.length,o=(t[0].index+t[t.length-1].index)/2,l=(i-o)/i*100,c=Math.max(0,Math.min(100,l+u)),f=(100-c)/100*i,p=Math.max(1,t[t.length-1].index-t[0].index),d=p*h,m=[],y=[],t.forEach(function(e,r){m.push(e.uid);var n=((t.length>1?r/(t.length-1):.5)-.5)*d,a=Math.round(f+n),o=Math.max(1,Math.min(i,a+1));y.push(o)}),e.prev=16,e.next=19,n.priorityManagement.batchAdjustDeckPriority(s,m,y);case 19:setTimeout(CardDotMatrixManager_asyncToGenerator(CardDotMatrixManager_regeneratorRuntime().mark(function e(){return CardDotMatrixManager_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a();case 2:g();case 3:case"end":return e.stop()}},e)})),200),e.next=25;break;case 22:e.prev=22,e.t0=e.catch(16),console.error("❌ 批量调整牌组优先级失败:",e.t0);case 25:case"end":return e.stop()}},e,null,[[16,22]])}));return function(){return e.apply(this,arguments)}}();return external_React_.createElement(external_Blueprint_Core_namespaceObject.Dialog,{isOpen:t,onClose:r,title:"卡片排期点阵图",style:{width:"1000px",height:"95vh",minHeight:"900px"},canOutsideClickClose:!1},external_React_.createElement(DialogContent,{className:"bp3-dialog-body"},external_React_.createElement(TopControlsSection,null,external_React_.createElement(ControlRow,null,external_React_.createElement(ControlGroup,{style:{flex:"1 1 300px",minWidth:"280px"}},external_React_.createElement(ControlLabel,null,"牌组选择"),external_React_.createElement(DeckSelect,null,external_React_.createElement(DeckSelector,{decks:n.decks,selectedTag:s,onTagChange:function(e){l(e),g()}}))),external_React_.createElement(ControlGroup,{style:{flex:"1 1 200px",minWidth:"180px"}},external_React_.createElement(ControlLabel,null,"X轴偏移",external_React_.createElement(ValueDisplay,null,u>0?"+":"",u)),external_React_.createElement(CardDotMatrixManager_SliderContainer,null,external_React_.createElement(external_Blueprint_Core_namespaceObject.Slider,{min:-50,max:50,stepSize:1,value:u,onChange:f,labelStepSize:25,disabled:!s,showTrackFill:!1}))),external_React_.createElement(ControlGroup,{style:{flex:"1 1 200px",minWidth:"180px"}},external_React_.createElement(ControlLabel,null,"X轴缩放",external_React_.createElement(ValueDisplay,null,"×",h.toFixed(1))),external_React_.createElement(CardDotMatrixManager_SliderContainer,null,external_React_.createElement(external_Blueprint_Core_namespaceObject.Slider,{min:.1,max:3,stepSize:.1,value:h,onChange:d,labelStepSize:1,disabled:!s,showTrackFill:!1}))),external_React_.createElement(ButtonGroup,{style:{flex:"0 0 auto",marginLeft:"16px"}},external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{text:"重置变换",onClick:g,disabled:!s,small:!0}),external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{text:"智能应用",intent:"primary",onClick:v,disabled:!s||0===u&&1===h,icon:"send-to",small:!0})))),external_React_.createElement(ChartSection,null,external_React_.createElement(MatrixContainer,null,external_React_.createElement(components_CardDotMatrixCanvas,{dots:m,config:i,selectedDeck:s,onDotClick:function(){}}),external_React_.createElement(AxisLabel,null,"优先级"))),external_React_.createElement(StatsSection,null,external_React_.createElement(StatItem,{newCard:!0},external_React_.createElement(StatLabel,null,"新卡片"),external_React_.createElement(StatValue,null,y.newCards)),external_React_.createElement(StatItem,{overdue:!0},external_React_.createElement(StatLabel,null,"到期卡片"),external_React_.createElement(StatValue,null,y.dueCards)),external_React_.createElement(StatItem,null,external_React_.createElement(StatLabel,null,"未到期"),external_React_.createElement(StatValue,null,y.futureCards)),external_React_.createElement(StatItem,null,external_React_.createElement(StatLabel,null,"总卡片"),external_React_.createElement(StatValue,null,y.totalAll)))))},DialogContent=newStyled.div(CardDotMatrixManager_templateObject||(CardDotMatrixManager_templateObject=CardDotMatrixManager_taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 12px;\n  box-sizing: border-box;\n  height: 100%;\n  overflow: hidden;\n  background-color: #f0f4f8;\n"]))),TopControlsSection=newStyled.div(CardDotMatrixManager_templateObject2||(CardDotMatrixManager_templateObject2=CardDotMatrixManager_taggedTemplateLiteral(["\n  flex: 0 0 auto;\n  background: #ffffff;\n  border-radius: 8px;\n  border: 1px solid #e1e8ed;\n  padding: 16px;\n  min-height: 100px; /* 🎯 增加高度：80px → 100px */\n"]))),ControlRow=newStyled.div(CardDotMatrixManager_templateObject3||(CardDotMatrixManager_templateObject3=CardDotMatrixManager_taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: 2fr 1.5fr 1.5fr auto;\n  gap: 20px; /* 🎯 减少间距：24px → 20px */\n  align-items: end;\n  min-height: 100px; /* 🎯 匹配父容器高度 */\n  \n  @media (max-width: 960px) {\n    grid-template-columns: 1fr;\n    gap: 16px;\n    align-items: stretch;\n  }\n"]))),ControlGroup=newStyled.div(CardDotMatrixManager_templateObject4||(CardDotMatrixManager_templateObject4=CardDotMatrixManager_taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: 0;\n"]))),ControlLabel=newStyled(external_Blueprint_Core_namespaceObject.Label)(CardDotMatrixManager_templateObject5||(CardDotMatrixManager_templateObject5=CardDotMatrixManager_taggedTemplateLiteral(["\n  && { \n    margin-bottom: 0; \n    font-weight: 500; \n    color: #182026; \n    font-size: 14px; \n  }\n"]))),CardDotMatrixManager_SliderContainer=newStyled.div(CardDotMatrixManager_templateObject6||(CardDotMatrixManager_templateObject6=CardDotMatrixManager_taggedTemplateLiteral(["\n  padding: 0 12px;\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n  \n  .bp3-slider {\n    width: 100%;\n    min-width: 150px;\n  }\n  \n  .bp3-slider-label {\n    font-size: 11px;\n    white-space: nowrap;\n  }\n"]))),ButtonGroup=newStyled.div(CardDotMatrixManager_templateObject7||(CardDotMatrixManager_templateObject7=CardDotMatrixManager_taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column; /* 🎯 改为垂直布局 */\n  gap: 8px;\n  align-items: stretch; /* 🎯 按钮拉伸填充宽度 */\n  min-width: 120px; /* 🎯 设置最小宽度 */\n  \n  .bp3-button {\n    height: 32px; /* 🎯 设置统一按钮高度 */\n    font-size: 12px; /* 🎯 适当减小字体 */\n  }\n  \n  @media (max-width: 960px) {\n    flex-direction: row;\n    justify-content: stretch;\n    \n    .bp3-button {\n      flex: 1;\n    }\n  }\n"]))),DeckSelect=newStyled.div(_templateObject8||(_templateObject8=CardDotMatrixManager_taggedTemplateLiteral(["\n  min-width: 250px;\n  max-width: 320px;\n  \n  .bp3-button {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    height: 36px;\n    padding: 0 12px;\n  }\n  \n  .deck-selector-popover .bp3-popover-content {\n    max-height: 300px;\n    overflow-y: auto;\n  }\n"]))),ValueDisplay=newStyled.span(_templateObject9||(_templateObject9=CardDotMatrixManager_taggedTemplateLiteral(["\n  font-weight: 600; \n  color: #2b95d6; \n  margin-left: 8px; \n  font-size: 13px;\n  background: rgba(43, 149, 214, 0.1); \n  padding: 2px 6px; \n  border-radius: 3px;\n"]))),ChartSection=newStyled.div(_templateObject10||(_templateObject10=CardDotMatrixManager_taggedTemplateLiteral(["\n  flex: 1 1 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 16px;\n  background: #f8fafb;\n  border-radius: 8px;\n  border: 1px solid #e1e8ed;\n  min-height: 350px;\n  max-height: calc(95vh - 320px);\n  overflow: visible;\n"]))),MatrixContainer=newStyled.div(_templateObject11||(_templateObject11=CardDotMatrixManager_taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 16px;\n  background: white;\n  border-radius: 6px;\n  border: 1px solid #e1e8ed;\n  box-shadow: 0 1px 2px rgba(16, 22, 26, 0.05);\n  width: 100%;\n  max-width: 800px;\n  height: 100%;\n  max-height: 100%;\n  overflow: visible;\n"]))),AxisLabel=newStyled.span(_templateObject12||(_templateObject12=CardDotMatrixManager_taggedTemplateLiteral(["\n  font-size: 12px; \n  color: #8a9ba8; \n  font-weight: 500;\n  text-align: center;\n  margin-top: 4px;\n  padding: 2px 8px;\n"]))),StatsSection=newStyled.div(_templateObject13||(_templateObject13=CardDotMatrixManager_taggedTemplateLiteral(["\n  flex: 0 0 auto;\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 12px;\n  padding: 16px 12px; /* 🎯 增加垂直padding：12px → 16px 12px */\n  background: #ffffff;\n  border-radius: 8px;\n  border: 1px solid #e1e8ed;\n  min-height: 80px; /* 🎯 增加高度：60px → 80px */\n  margin-top: auto;\n  flex-shrink: 0;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 8px;\n    min-height: 100px; /* 🎯 移动端更多空间 */\n  }\n"]))),StatItem=newStyled.div(_templateObject14||(_templateObject14=CardDotMatrixManager_taggedTemplateLiteral(["\n  display: flex; \n  flex-direction: column; \n  justify-content: center; \n  align-items: center;\n  gap: 4px; /* 🎯 增加间距：2px → 4px */\n  padding: 12px 8px; /* 🎯 增加padding：8px 6px → 12px 8px */\n  border-radius: 6px; \n  background: #f8fafc;\n  border: 1px solid #eaf0f6;\n  min-width: 80px; /* 🎯 增加最小宽度：60px → 80px */\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(16, 22, 26, 0.1);\n  }\n  \n  ","\n  \n  ","\n"])),function(e){return e.overdue&&"\n    border-color: #db3737;\n    background: #fff5f5;\n  "},function(e){return e.newCard&&"\n    border-color: #2b95d6;\n    background: #f5f9fc;\n  "}),StatLabel=newStyled.span(_templateObject15||(_templateObject15=CardDotMatrixManager_taggedTemplateLiteral(["\n  font-size: 11px; \n  color: #5c7080; \n  font-weight: 500;\n  text-align: center;\n  white-space: nowrap;\n"]))),StatValue=newStyled.span(_templateObject16||(_templateObject16=CardDotMatrixManager_taggedTemplateLiteral(["\n  font-size: 18px; /* 🎯 增加字体大小：16px → 18px */\n  font-weight: 600; \n  color: #182026;\n  line-height: 1.2; /* 🎯 增加行高：1.1 → 1.2 */\n  white-space: nowrap; /* 🎯 防止数字换行 */\n"]))),DeckSelector=function(e){var t,r=e.decks,n=e.selectedTag,a=e.onTagChange,i=[{name:"",cardCount:r.reduce(function(e,t){return e+t.cardCount},0)}].concat(CardDotMatrixManager_toConsumableArray(r));return external_React_.createElement(external_Blueprint_Select_namespaceObject.Select,{items:i,activeItem:i.find(function(e){return e.name===n}),filterable:!0,itemPredicate:function(e,t){return""===t.name?"显示所有牌组".includes(e):t.name.toLowerCase().includes(e.toLowerCase())},itemRenderer:function(e,t){var r=t.handleClick,n=t.modifiers;return external_React_.createElement(external_Blueprint_Core_namespaceObject.MenuItem,{key:e.name||"all",active:n.active,onClick:r,text:""===e.name?"显示所有牌组":"".concat(e.name," (").concat(e.cardCount,")")})},onItemSelect:function(e){return a(e.name)},popoverProps:{minimal:!0,fill:!0}},external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{text:""===n?"显示所有牌组":"".concat(n," (").concat((null===(t=r.find(function(e){return e.name===n}))||void 0===t?void 0:t.cardCount)||0,"张)"),rightIcon:"caret-down",fill:!0,style:{justifyContent:"space-between"}}))};const components_CardDotMatrixManager=CardDotMatrixManager;var models_practice=__webpack_require__(929),PracticeOverlay_templateObject,PracticeOverlay_templateObject2,PracticeOverlay_templateObject3,PracticeOverlay_templateObject4,PracticeOverlay_templateObject5,PracticeOverlay_templateObject6,PracticeOverlay_templateObject7,PracticeOverlay_templateObject8,PracticeOverlay_templateObject9;function useSafeContext(e){var t=(0,external_React_.useContext)(e);if(void 0===t)throw new Error("Context Provider not found");return t}function PracticeOverlay_typeof(e){return PracticeOverlay_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},PracticeOverlay_typeof(e)}function PracticeOverlay_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function PracticeOverlay_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function PracticeOverlay_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?PracticeOverlay_ownKeys(Object(r),!0).forEach(function(t){PracticeOverlay_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):PracticeOverlay_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function PracticeOverlay_defineProperty(e,t,r){return(t=PracticeOverlay_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function PracticeOverlay_toPropertyKey(e){var t=PracticeOverlay_toPrimitive(e,"string");return"symbol"==PracticeOverlay_typeof(t)?t:t+""}function PracticeOverlay_toPrimitive(e,t){if("object"!=PracticeOverlay_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=PracticeOverlay_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function PracticeOverlay_regeneratorRuntime(){var e=PracticeOverlay_regenerator(),t=e.m(PracticeOverlay_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,PracticeOverlay_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(PracticeOverlay_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new PracticeOverlay_OverloadYield(e,t)},AsyncIterator:PracticeOverlay_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?PracticeOverlay_regeneratorAsyncGen:PracticeOverlay_regeneratorAsync)(i(e),t,r,a,o)},keys:PracticeOverlay_regeneratorKeys,values:PracticeOverlay_regeneratorValues}})()}function PracticeOverlay_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(PracticeOverlay_typeof(e)+" is not iterable")}function PracticeOverlay_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function PracticeOverlay_regeneratorAsync(e,t,r,n,a){var i=PracticeOverlay_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function PracticeOverlay_regeneratorAsyncGen(e,t,r,n,a){return new PracticeOverlay_regeneratorAsyncIterator(PracticeOverlay_regenerator().w(e,t,r,n),a||Promise)}function PracticeOverlay_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof PracticeOverlay_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(PracticeOverlay_regeneratorDefine2(PracticeOverlay_regeneratorAsyncIterator.prototype),PracticeOverlay_regeneratorDefine2(PracticeOverlay_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),PracticeOverlay_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function PracticeOverlay_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return PracticeOverlay_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(PracticeOverlay_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,PracticeOverlay_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,PracticeOverlay_regeneratorDefine2(f,"constructor",c),PracticeOverlay_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",PracticeOverlay_regeneratorDefine2(c,a,"GeneratorFunction"),PracticeOverlay_regeneratorDefine2(f),PracticeOverlay_regeneratorDefine2(f,a,"Generator"),PracticeOverlay_regeneratorDefine2(f,n,function(){return this}),PracticeOverlay_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(PracticeOverlay_regenerator=function(){return{w:i,m:p}})()}function PracticeOverlay_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}PracticeOverlay_regeneratorDefine2=function(e,t,r,n){function i(t,r){PracticeOverlay_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},PracticeOverlay_regeneratorDefine2(e,t,r,n)}function PracticeOverlay_OverloadYield(e,t){this.v=e,this.k=t}function PracticeOverlay_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function PracticeOverlay_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){PracticeOverlay_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){PracticeOverlay_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function PracticeOverlay_slicedToArray(e,t){return PracticeOverlay_arrayWithHoles(e)||PracticeOverlay_iterableToArrayLimit(e,t)||PracticeOverlay_unsupportedIterableToArray(e,t)||PracticeOverlay_nonIterableRest()}function PracticeOverlay_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function PracticeOverlay_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return PracticeOverlay_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?PracticeOverlay_arrayLikeToArray(e,t):void 0}}function PracticeOverlay_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function PracticeOverlay_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function PracticeOverlay_arrayWithHoles(e){if(Array.isArray(e))return e}var MainContext=external_React_.createContext({}),PracticeOverlay=function(e){var t,r,n=e.isOpen,a=e.tagsList,i=e.selectedTag,o=e.onCloseCallback,s=e.unifiedData,l=e.handlePracticeClick,c=e.handleMemoTagChange,u=e.isCramming,f=e.setIsCramming,p=e.setRenderMode,h=e.onDataRefresh,d=e.isGlobalMixedMode,m=e.setIsGlobalMixedMode,y=e.moveCard,g=e.getCardPosition,v=e.getTotalCards,_=external_React_.useMemo(function(){return s?s.practiceSession.getStabilizedQueue(d,i):[]},[d,i,u]),b=(null===(t=s.todayStats.tags[i])||void 0===t?void 0:t.renderMode)||models_practice.RenderMode.Normal,x=PracticeOverlay_slicedToArray(external_React_.useState(0),2),S=x[0],C=x[1];external_React_.useEffect(function(){C(0)},[d,i]);var P=_[S],w=useCurrentCardData({currentCardRefUid:P,unifiedData:s}),k=w.cardInfo,D=w.reviewMode,E=w.setReviewModeOverride,A=_.length>0,T=S>=_.length,M=external_React_.useMemo(function(){return(0,utils.cb)({reviewMode:models_session.Z.FixedInterval})},[]),O=PracticeOverlay_slicedToArray(external_React_.useState(1),2),F=O[0],I=O[1],R=PracticeOverlay_slicedToArray(external_React_.useState(models_session.D.Days),2),j=R[0],L=R[1],B=PracticeOverlay_slicedToArray(external_React_.useState(!1),2),N=B[0],G=B[1];external_React_.useEffect(function(){if(k){var e=k.latestSession;(null==e?void 0:e.reviewMode)===models_session.Z.FixedInterval?(I(e.intervalMultiplier),L(e.intervalMultiplierType)):(I(M.intervalMultiplier),L(M.intervalMultiplierType))}},[k,M]);var V=null==k?void 0:k.nextDueDate,U=null==k?void 0:k.isNew,z=V&&0===date.daysBetween(V,new Date),H=U?"new":z?"dueToday":V?"pastDue":null,W=hooks_useBlockInfo({refUid:P||"",unifiedData:s}),$=W.blockInfo,K=W.isLoading,q=!!$.children&&!!$.children.length,Y=!!$.childrenUids&&!!$.childrenUids.length,X=PracticeOverlay_slicedToArray(external_React_.useState(!1),2),Q=X[0],Z=X[1],J=PracticeOverlay_slicedToArray(external_React_.useState(!0),2),ee=J[0],te=J[1],re=b===models_practice.RenderMode.AnswerFirst&&Y&&!Q;external_React_.useEffect(function(){Z(!1)},[P]),external_React_.useEffect(function(){if(P&&!K&&!q&&!Y&&!ee&&!Q){var e=setTimeout(function(){return Z(!0)},100);return function(){return clearTimeout(e)}}},[P,q,Y,ee,K,Q]);var ne=function(){var e=PracticeOverlay_asyncToGenerator(PracticeOverlay_regeneratorRuntime().mark(function e(t){var r;return PracticeOverlay_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return C(0),c(t),f(!1),d&&m(!1),s&&"sessionManager"in s&&(null===(r=s.sessionManager)||void 0===r||r.onDeckChanged(t)),e.next=7,sleep(100);case 7:document.activeElement instanceof HTMLElement&&document.activeElement.blur();case 8:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),ae=external_React_.useCallback(function(e){if(!T&&P){var t=PracticeOverlay_objectSpread(PracticeOverlay_objectSpread({refUid:P},e),{},{intervalMultiplier:F,intervalMultiplierType:j});l(t),C(S+1)}},[l,T,S,P,F,j]),ie=external_React_.useCallback(function(){T||C(S+1)},[S,T]),oe=external_React_.useCallback(function(){0!==S&&C(S-1)},[S]),se={loop:!0,autoplay:!0,animationData:done_namespaceObject,rendererSettings:{preserveAspectRatio:"xMidYMid slice"}},le=PracticeOverlay_slicedToArray(external_React_.useState(!0),2),ce=le[0],ue=le[1],fe=external_React_.useMemo(function(){return[{combo:"B",global:!0,label:"Show BreadCrumbs",onKeyDown:function(){return ue(!ce)}}]},[ce]);return external_Blueprint_Core_namespaceObject.useHotkeys(fe),useZIndexFix(n),useFocusFix(n),external_React_.createElement(MainContext.Provider,{value:{reviewMode:D,setReviewModeOverride:E,intervalMultiplier:F,setIntervalMultiplier:I,intervalMultiplierType:j,setIntervalMultiplierType:L,onPracticeClick:ae,unifiedData:s,selectedTag:i,currentIndex:S,renderMode:b,setRenderMode:p}},external_React_.createElement(PracticeOverlay_DialogContent,null,external_React_.createElement(PracticeOverlay_Header,{className:"bp3-dialog-header outline-none focus:outline-none focus-visible:outline-none",tagsList:a,onCloseCallback:o,onTagChange:ne,status:H,isDone:T,nextDueDate:V,showBreadcrumbs:ce,setShowBreadcrumbs:ue,isCramming:u,practiceCardUids:_,onOpenDeckPriority:function(){return G(!0)},isGlobalMixedMode:d,setIsGlobalMixedMode:m}),external_React_.createElement(DialogBody,{className:"bp3-dialog-body overflow-y-scroll m-0 pt-6 pb-8 px-4"},P&&!T?external_React_.createElement(external_React_.Fragment,null,re?null===(r=$.childrenUids)||void 0===r?void 0:r.map(function(e){return external_React_.createElement(overlay_CardBlock,{key:e,refUid:e,showAnswers:Q,setHasCloze:te,breadcrumbs:$.breadcrumbs,showBreadcrumbs:!1})}):external_React_.createElement(overlay_CardBlock,{refUid:P,showAnswers:Q,setHasCloze:te,breadcrumbs:$.breadcrumbs,showBreadcrumbs:ce})):external_React_.createElement("div",{"data-testid":"practice-overlay-done-state",className:"flex items-center flex-col"},external_React_.createElement(dist.A,{options:se,style:{height:200,width:"auto"}}),external_React_.createElement("div",null,"You're all caught up! 🌟"))),external_React_.createElement(overlay_Footer,{refUid:P,onPracticeClick:ae,onSkipClick:ie,onPrevClick:oe,setShowAnswers:Z,showAnswers:Q,isDone:T,hasCards:A,onCloseCallback:o,currentCardData:k,onStartCrammingClick:function(){h(),f(!0),C(0)}}),!T&&A&&P&&y&&g&&v&&external_React_.createElement(components_PrioritySlider,{currentPosition:g(P),totalCards:v(),onPositionChange:function(){var e=PracticeOverlay_asyncToGenerator(PracticeOverlay_regeneratorRuntime().mark(function e(t){return PracticeOverlay_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y(P,t);case 2:h();case 3:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),unifiedData:s,onDataRefresh:h,disabled:!1})),external_React_.createElement(components_CardDotMatrixManager,{isOpen:N,onClose:function(){return G(!1)},unifiedData:s,tagsList:a,selectedTag:i,onTagSelect:c,onDataRefresh:h}))},PracticeOverlay_DialogContent=newStyled.div(PracticeOverlay_templateObject||(PracticeOverlay_templateObject=PracticeOverlay_taggedTemplateLiteral(["\n  display: grid;\n  grid-template-rows: 50px 1fr auto;\n  height: 100%;\n  width: 100%;\n"]))),DialogBody=newStyled.div(PracticeOverlay_templateObject2||(PracticeOverlay_templateObject2=PracticeOverlay_taggedTemplateLiteral(["\n  overflow-x: hidden; // because of tweaks we do in ContentWrapper container overflows\n  min-height: 200px;\n"]))),HeaderWrapper=newStyled.div(PracticeOverlay_templateObject3||(PracticeOverlay_templateObject3=PracticeOverlay_taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: #5c7080;\n  background-color: #f6f9fd;\n  box-shadow: 0 1px 0 rgb(16 22 26 / 10%);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  line-height: inherit;\n  margin: 0;\n  min-height: 50px;\n  padding: 0 16px;\n\n  /* Shortcut way to tag selector color */\n  & .bp3-button {\n    color: #5c7080;\n  }\n\n  /* 📱 Portrait: 转为两行布局，避免元素挤压 */\n  "," {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    gap: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    min-height: auto;\n\n    & > div:first-of-type,\n    & > div:last-of-type {\n      width: 100%;\n      display: flex;\n      flex-wrap: nowrap;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    & span[data-testid='display-count-current'],\n    & span[data-testid='display-count-total'] {\n      font-size: 0.75rem;\n    }\n  }\n"])),utils_mediaQueries.mobilePortrait),TagSelector=function(e){var t=e.tagsList,r=e.selectedTag,n=e.onTagChange;return external_React_.createElement(external_Blueprint_Select_namespaceObject.Select,{items:t,activeItem:r,filterable:!0,itemPredicate:function(e,t){var r=e.toLowerCase();return t.toLowerCase().includes(r)},inputProps:{placeholder:"搜索牌组..."},itemRenderer:function(e,r){var n=r.handleClick,a=r.modifiers,i=r.query,o=e.toLowerCase().indexOf(i.toLowerCase());if(i&&o>=0){var s=e.substring(0,o),l=e.substring(o,o+i.length),c=e.substring(o+i.length);return external_React_.createElement(TagSelectorItem,{text:external_React_.createElement("span",null,s,external_React_.createElement("strong",{style:{color:"#106ba3"}},l),c),originalText:e,tagsList:t,active:a.active,key:e,onClick:n})}return external_React_.createElement(TagSelectorItem,{text:e,originalText:e,tagsList:t,active:a.active,key:e,onClick:n})},onItemSelect:function(e){n(e)},popoverProps:{minimal:!0,popoverClassName:"tag-selector-popover",modifiers:{preventOverflow:{enabled:!0},flip:{enabled:!0}}},resetOnQuery:!0,resetOnSelect:!0},external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{text:r,rightIcon:"caret-down",minimal:!0,"data-testid":"tag-selector-cta"}))},TagSelectorItemWrapper=newStyled.div(PracticeOverlay_templateObject4||(PracticeOverlay_templateObject4=PracticeOverlay_taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 6px;\n  background-color: ",";\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ",";\n  }\n"])),function(e){return e.active?"rgba(0, 0, 0, 0.05)":"transparent"},function(e){return e.active?"rgba(0, 0, 0, 0.05)":"rgba(0, 0, 0, 0.03)"}),Tag=newStyled(external_Blueprint_Core_namespaceObject.Tag)(PracticeOverlay_templateObject5||(PracticeOverlay_templateObject5=PracticeOverlay_taggedTemplateLiteral(["\n  &.bp3-tag {\n    font-size: 11px;\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"]))),TagSelectorItem=function(e){var t=e.text,r=e.originalText,n=e.onClick,a=e.active,i=e.tagsList,o=external_React_.useContext(MainContext),s=o.unifiedData,l=o.setRenderMode,c=r||t,u=s.todayStats.tags[c],f=(null==u?void 0:u.due)||0,p=(null==u?void 0:u.new)||0,h=(null==u?void 0:u.renderMode)||models_practice.RenderMode.Normal,d=PracticeOverlay_slicedToArray(external_React_.useState(!1),2),m=d[0],y=d[1],g=i.indexOf(c)===i.length-1?"bottom":"top",v=external_React_.createElement("div",{onClick:function(e){return e.stopPropagation()}},external_React_.createElement(external_Blueprint_Core_namespaceObject.Menu,{className:"bg-transparent min-w-full text-sm"},external_React_.createElement(external_Blueprint_Core_namespaceObject.MenuItem,{text:external_React_.createElement("div",{className:"flex items-center justify-between"},external_React_.createElement("span",{className:"text-xs"},"Swap Q/A"),external_React_.createElement(external_Blueprint_Core_namespaceObject.Switch,{alignIndicator:external_Blueprint_Core_namespaceObject.Alignment.RIGHT,checked:h===models_practice.RenderMode.AnswerFirst,onChange:function(){var e=h===models_practice.RenderMode.Normal?models_practice.RenderMode.AnswerFirst:models_practice.RenderMode.Normal;l(c,e)},className:"mb-0"})),className:"hover:bg-transparent hover:no-underline"}),external_React_.createElement(external_Blueprint_Core_namespaceObject.MenuDivider,null)));return external_React_.createElement(TagSelectorItemWrapper,{onClick:n,active:a,key:t,tabIndex:-1,"data-testid":"tag-selector-item",className:"flex-col"},external_React_.createElement("div",{className:"flex"},external_React_.createElement("div",{className:"flex items-center"},t),external_React_.createElement("div",{className:"ml-2"},f>0&&external_React_.createElement(components_Tooltip,{content:"Due",placement:g},external_React_.createElement(Tag,{active:!0,minimal:!0,intent:"primary",className:"text-center","data-testid":"tag-selector-due"},f)),p>0&&external_React_.createElement(components_Tooltip,{content:"New",placement:g},external_React_.createElement(Tag,{active:!0,minimal:!0,intent:"success",className:"text-center ml-2","data-testid":"tag-selector-new"},p))),external_React_.createElement("div",{onClick:function(e){return e.stopPropagation()},className:""},external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{icon:external_React_.createElement(external_Blueprint_Core_namespaceObject.Icon,{icon:m?"chevron-up":"cog",size:11}),className:"ml-1 bp3-small","data-testid":"tag-settings-button",minimal:!0,onClick:function(){return y(!m)}}))),external_React_.createElement(external_Blueprint_Core_namespaceObject.Collapse,{isOpen:m},v))},StatusBadge=function(e){var t=e.status,r=e.nextDueDate;if(e.isCramming)return external_React_.createElement(components_Tooltip,{content:"Reviews don't affect scheduling",placement:"left"},external_React_.createElement(external_Blueprint_Core_namespaceObject.Tag,{intent:"none"},"Cramming"));switch(t){case"new":return external_React_.createElement(external_Blueprint_Core_namespaceObject.Tag,{intent:"success",minimal:!0},"New");case"dueToday":return external_React_.createElement(external_Blueprint_Core_namespaceObject.Tag,{intent:"primary",minimal:!0},"Due Today");case"pastDue":var n=date.customFromNow(r);return external_React_.createElement(external_Blueprint_Core_namespaceObject.Tag,{intent:"warning",title:"Due ".concat(n),minimal:!0},"Past Due");default:return null}},BoxIcon=newStyled(external_Blueprint_Core_namespaceObject.Icon)(PracticeOverlay_templateObject6||(PracticeOverlay_templateObject6=PracticeOverlay_taggedTemplateLiteral(["\n  margin-right: 5px !important;\n"]))),BreadcrumbTooltipContent=function(e){var t=e.showBreadcrumbs;return external_React_.createElement("div",{className:"flex align-center"},"".concat(t?"Hide":"Show"," Breadcrumbs"),external_React_.createElement("span",null,external_React_.createElement(components_ButtonTags,{kind:"light",className:"mx-2"},"B")))},PracticeOverlay_Header=function(e){var t=e.tagsList,r=e.onCloseCallback,n=e.onTagChange,a=e.className,i=e.status,o=e.isDone,s=e.nextDueDate,l=e.showBreadcrumbs,c=e.setShowBreadcrumbs,u=e.isCramming,f=e.practiceCardUids,p=e.onOpenDeckPriority,h=e.isGlobalMixedMode,d=e.setIsGlobalMixedMode,m=useSafeContext(MainContext),y=m.selectedTag,g=m.unifiedData,v=m.currentIndex,_=f.length;return external_React_.createElement(HeaderWrapper,{className:a,tabIndex:0},external_React_.createElement("div",{className:"flex items-center"},external_React_.createElement(BoxIcon,{icon:"box",size:14}),external_React_.createElement("div",{tabIndex:-1},external_React_.createElement(TagSelector,{tagsList:t,selectedTag:y,onTagChange:n})),external_React_.createElement("div",{className:"mx-3"},external_React_.createElement(GlobalMixedToggleWrapper,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"80px"}},external_React_.createElement("span",{className:"text-xs ".concat(h?"text-gray-400":"text-blue-600 font-medium")},"单组"),external_React_.createElement(external_Blueprint_Core_namespaceObject.Switch,{className:"mb-0",style:{transform:"scale(0.8)"},checked:h,onChange:function(){return d(!h)},"data-testid":"global-mixed-mode-switch"}),external_React_.createElement("span",{className:"text-xs ".concat(h?"text-blue-600 font-medium":"text-gray-400")},"混合")))),external_React_.createElement(RightButtonGroup,null,p&&external_React_.createElement(components_Tooltip,{content:"管理牌组优先级",placement:"left"},external_React_.createElement(external_Blueprint_Core_namespaceObject.Button,{icon:"sort",minimal:!0,small:!0,onClick:p})),!o&&external_React_.createElement("div",{onClick:function(){return c(!l)},className:"cursor-pointer"},external_React_.createElement(components_Tooltip,{content:external_React_.createElement(BreadcrumbTooltipContent,{showBreadcrumbs:l}),placement:"left"},external_React_.createElement(external_Blueprint_Core_namespaceObject.Icon,{icon:l?"eye-open":"eye-off",className:l?"opacity-100":"opacity-60"}))),external_React_.createElement("span",{"data-testid":"status-badge"},external_React_.createElement(StatusBadge,{status:i,nextDueDate:s,isCramming:u,"data-testid":"status-badge"})),external_React_.createElement(CounterDisplay,null,external_React_.createElement("span",{style:{color:"#007bff"},"data-testid":"current-position"},o?_:v+1),external_React_.createElement("span",{className:"opacity-50"},"/"),external_React_.createElement("span",{style:{color:"#000"},"data-testid":"total-count"},_),g.todayStats.combinedToday.completed>0&&external_React_.createElement("span",{style:{color:"#28a745",fontSize:"12px",marginLeft:"8px"}},"(今日已完成: ",g.todayStats.combinedToday.completed,")")),external_React_.createElement("button",{"aria-label":"Close",className:"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross",onClick:r})))},GlobalMixedToggleWrapper=newStyled.div(PracticeOverlay_templateObject7||(PracticeOverlay_templateObject7=PracticeOverlay_taggedTemplateLiteral(["\n  &:hover {\n    background-color: #e8f4f8;\n    border-color: #cce7f0;\n  }\n\n  transition: all 0.2s ease;\n"]))),RightButtonGroup=newStyled.div(PracticeOverlay_templateObject8||(PracticeOverlay_templateObject8=PracticeOverlay_taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-left: auto;\n"]))),CounterDisplay=newStyled.span(PracticeOverlay_templateObject9||(PracticeOverlay_templateObject9=PracticeOverlay_taggedTemplateLiteral(["\n  font-size: 14px;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-right: 8px;\n"])));const overlay_PracticeOverlay=PracticeOverlay;var StateShell_templateObject,StateShell_templateObject2,StateShell_templateObject3,StateShell_templateObject4,StateShell_templateObject5,StateShell_templateObject6;function StateShell_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var StateShell=function(e){var t=e.state,r=e.onClose,n=e.showForceClose,a=void 0!==n&&n,i={loading:{text:"正在准备复习...",buttonTitle:"Close"},saving:{text:"正在保存进度...",buttonTitle:"强制关闭"}}[t];return React.createElement(StateContainer,null,React.createElement(DialogHeader,null,React.createElement("span",null,"Roam Memo"),React.createElement(CloseButton,{icon:"cross",minimal:!0,onClick:r,title:i.buttonTitle,showForceClose:a})),React.createElement(StateShell_DialogBody,{className:"bp3-dialog-body overflow-y-scroll m-0 pt-6 pb-8 px-4"},React.createElement(StateContent,null,React.createElement(external_Blueprint_Core_namespaceObject.Spinner,{intent:"primary",size:40}),React.createElement(StateText,null,i.text))))},DialogHeader=newStyled.div(StateShell_templateObject||(StateShell_templateObject=StateShell_taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: #5c7080;\n  background-color: #f6f9fd;\n  box-shadow: 0 1px 0 rgb(16 22 26 / 10%);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  line-height: inherit;\n  margin: 0;\n  min-height: 50px;\n  padding: 0 16px;\n  font-weight: 500;\n  border-radius: 12px 12px 0 0;\n"]))),StateShell_DialogBody=newStyled.div(StateShell_templateObject2||(StateShell_templateObject2=StateShell_taggedTemplateLiteral(["\n  overflow-x: hidden;\n  min-height: 200px;\n"]))),StateContainer=newStyled.div(StateShell_templateObject3||(StateShell_templateObject3=StateShell_taggedTemplateLiteral(["\n  display: grid;\n  grid-template-rows: 50px 1fr;\n  height: 100%;\n  width: 100%;\n"]))),StateContent=newStyled.div(StateShell_templateObject4||(StateShell_templateObject4=StateShell_taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 1.5rem;\n  padding: 2rem;\n"]))),StateText=newStyled.div(StateShell_templateObject5||(StateShell_templateObject5=StateShell_taggedTemplateLiteral(["\n  font-size: 16px;\n  font-weight: 500;\n  color: #5c7080;\n"]))),CloseButton=newStyled(external_Blueprint_Core_namespaceObject.Button)(StateShell_templateObject6||(StateShell_templateObject6=StateShell_taggedTemplateLiteral(["\n  opacity: ",";\n  \n  &:hover {\n    opacity: 1;\n  }\n"])),function(e){return e.showForceClose?.6:1});const components_StateShell=StateShell;var UnifiedDialog_templateObject;function UnifiedDialog_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var UnifiedDialog=function(e){var t=e.isOpen,r=e.onClose,n=e.children,a=e.className;return external_React_.createElement(Dialog,{isOpen:t,onClose:r,className:"pb-0 bg-white ".concat(a||""),canEscapeKeyClose:!1,canOutsideClickClose:!1},n)},Dialog=newStyled(external_Blueprint_Core_namespaceObject.Dialog)(UnifiedDialog_templateObject||(UnifiedDialog_templateObject=UnifiedDialog_taggedTemplateLiteral(["\n  max-height: 80vh;\n  width: 90vw;\n  border-radius: 12px !important;\n  overflow: hidden;\n\n  "," {\n    width: 80vw;\n  }\n\n  "," {\n    width: 70vw;\n  }\n\n  /* 📱 Mobile portrait: full-screen vertical layout */\n  "," {\n    width: 100vw;\n    height: 100vh;\n    max-height: 100vh;\n    margin: 0;\n    border-radius: 0;\n  }\n\n  /* 确保内容背景是白色并移除默认内边距，同时保持圆角 */\n  .bp3-dialog {\n    background: white !important;\n    padding: 0 !important;\n    margin: 0 !important;\n    border-radius: 12px !important;\n    overflow: hidden;\n  }\n"])),utils_mediaQueries.lg,utils_mediaQueries.xl,utils_mediaQueries.mobilePortrait);const components_UnifiedDialog=UnifiedDialog;var SidePanelWidget_templateObject,SidePanelWidget_templateObject2;function SidePanelWidget_taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var SidePanelWidget_Wrapper=newStyled.span(SidePanelWidget_templateObject||(SidePanelWidget_templateObject=SidePanelWidget_taggedTemplateLiteral(["\n  display: flex;\n"]))),SidePanelWidget_Tag=newStyled(external_Blueprint_Core_namespaceObject.Tag)(SidePanelWidget_templateObject2||(SidePanelWidget_templateObject2=SidePanelWidget_taggedTemplateLiteral(["\n  &.bp3-tag {\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"]))),SidePandelWidget=function(e){var t=e.onClickCallback,r=e.stats,n=r.new,a=r.due,i=r.completed,o=0===n&&0===a?"bp3-icon-confirm":"bp3-icon-box";return React.createElement(SidePanelWidget_Wrapper,{"data-testid":"side-panel-wrapper",className:"w-full justify-between",onClick:t},React.createElement("div",null,React.createElement("div",{className:"flex items-center"},React.createElement("span",{className:"bp3-icon ".concat(o," icon bp3-icon-small mr-1")}),React.createElement("div",null,"Review"))),React.createElement("div",{className:"flex items-center ml-2"},n>0&&React.createElement(components_Tooltip,{content:"New Cards",placement:"top"},React.createElement(SidePanelWidget_Tag,{active:!0,minimal:!0,intent:"success",className:"text-center","data-testid":"new-tag"},n)),a>0&&React.createElement(components_Tooltip,{content:"Due Cards",placement:"top"},React.createElement(SidePanelWidget_Tag,{active:!0,minimal:!0,intent:"primary",className:"text-center mx-1","data-testid":"due-tag"},a)),i>0&&React.createElement(components_Tooltip,{content:"Completed",placement:"top"},React.createElement(SidePanelWidget_Tag,{active:!0,minimal:!0,intent:"none",className:"text-center mx-1","data-testid":"completed-tag",style:{color:"#000",backgroundColor:"#f5f5f5",borderColor:"#ccc"}},i))))};const SidePanelWidget=SidePandelWidget;function roamApi_typeof(e){return roamApi_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},roamApi_typeof(e)}function roamApi_slicedToArray(e,t){return roamApi_arrayWithHoles(e)||roamApi_iterableToArrayLimit(e,t)||roamApi_unsupportedIterableToArray(e,t)||roamApi_nonIterableRest()}function roamApi_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function roamApi_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function roamApi_arrayWithHoles(e){if(Array.isArray(e))return e}function roamApi_toConsumableArray(e){return roamApi_arrayWithoutHoles(e)||roamApi_iterableToArray(e)||roamApi_unsupportedIterableToArray(e)||roamApi_nonIterableSpread()}function roamApi_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function roamApi_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return roamApi_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?roamApi_arrayLikeToArray(e,t):void 0}}function roamApi_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function roamApi_arrayWithoutHoles(e){if(Array.isArray(e))return roamApi_arrayLikeToArray(e)}function roamApi_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function roamApi_regeneratorRuntime(){var e=roamApi_regenerator(),t=e.m(roamApi_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,roamApi_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(roamApi_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new roamApi_OverloadYield(e,t)},AsyncIterator:roamApi_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?roamApi_regeneratorAsyncGen:roamApi_regeneratorAsync)(i(e),t,r,a,o)},keys:roamApi_regeneratorKeys,values:roamApi_regeneratorValues}})()}function roamApi_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(roamApi_typeof(e)+" is not iterable")}function roamApi_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function roamApi_regeneratorAsync(e,t,r,n,a){var i=roamApi_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function roamApi_regeneratorAsyncGen(e,t,r,n,a){return new roamApi_regeneratorAsyncIterator(roamApi_regenerator().w(e,t,r,n),a||Promise)}function roamApi_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof roamApi_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(roamApi_regeneratorDefine2(roamApi_regeneratorAsyncIterator.prototype),roamApi_regeneratorDefine2(roamApi_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),roamApi_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function roamApi_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return roamApi_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(roamApi_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,roamApi_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,roamApi_regeneratorDefine2(f,"constructor",c),roamApi_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",roamApi_regeneratorDefine2(c,a,"GeneratorFunction"),roamApi_regeneratorDefine2(f),roamApi_regeneratorDefine2(f,a,"Generator"),roamApi_regeneratorDefine2(f,n,function(){return this}),roamApi_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(roamApi_regenerator=function(){return{w:i,m:p}})()}function roamApi_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}roamApi_regeneratorDefine2=function(e,t,r,n){function i(t,r){roamApi_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},roamApi_regeneratorDefine2(e,t,r,n)}function roamApi_OverloadYield(e,t){this.v=e,this.k=t}function roamApi_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function roamApi_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){roamApi_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){roamApi_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}var createRoamQuery=function(e){return roamApi_asyncToGenerator(roamApi_regeneratorRuntime().mark(function t(){var r,n,a,i,o=arguments;return roamApi_regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:for(r=o.length,n=new Array(r),a=0;a<r;a++)n[a]=o[a];return t.prev=1,t.next=4,(i=window.roamAlphaAPI).q.apply(i,[e].concat(n));case 4:return t.abrupt("return",t.sent);case 7:throw t.prev=7,t.t0=t.catch(1),console.error("Roam API 查询失败:",{query:e,params:n,error:t.t0}),t.t0;case 11:case"end":return t.stop()}},t,null,[[1,7]])}))},getAllPagesQuery=createRoamQuery("[:find ?title :where [?p :node/title ?title] [?p :block/uid ?uid]]"),getPageByTitleQuery=createRoamQuery("[:find ?uid :in $ ?title :where [?page :node/title ?title] [?page :block/uid ?uid]]"),getPageReferenceIds=createRoamQuery("[:find ?uid :in $ ?title :where [?page :node/title ?title] [?referencingBlock :block/refs ?page] [?referencingBlock :block/uid ?uid]]"),getSelectedTagPageBlocksIds=createRoamQuery("[:find ?uid :in $ ?title :where [?page :node/title ?title] [?child :block/page ?page] [?child :block/uid ?uid]]"),withErrorHandling=function(e,t){return function(){try{return e.apply(void 0,arguments)}catch(e){throw console.error("[".concat(t,"] 操作失败:"),e),e}}},batchQuery=null,_ref2,normalizeQueryResults={toPageTitles:function(e){return e.map(function(e){return e[0]}).filter(Boolean)},toUids:function(e){return e.map(function(e){return e[0]}).filter(Boolean)},toPageTitleUidMap:function(e){var t={};return e.forEach(function(e){var r=roamApi_slicedToArray(e,2),n=r[0],a=r[1];n&&a&&(t[n]=a)}),t}};function BlacklistFilter_typeof(e){return BlacklistFilter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},BlacklistFilter_typeof(e)}function BlacklistFilter_toConsumableArray(e){return BlacklistFilter_arrayWithoutHoles(e)||BlacklistFilter_iterableToArray(e)||BlacklistFilter_unsupportedIterableToArray(e)||BlacklistFilter_nonIterableSpread()}function BlacklistFilter_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function BlacklistFilter_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return BlacklistFilter_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?BlacklistFilter_arrayLikeToArray(e,t):void 0}}function BlacklistFilter_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function BlacklistFilter_arrayWithoutHoles(e){if(Array.isArray(e))return BlacklistFilter_arrayLikeToArray(e)}function BlacklistFilter_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,BlacklistFilter_toPropertyKey(n.key),n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function BlacklistFilter_defineProperty(e,t,r){return(t=BlacklistFilter_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function BlacklistFilter_toPropertyKey(e){var t=BlacklistFilter_toPrimitive(e,"string");return"symbol"==BlacklistFilter_typeof(t)?t:t+""}function BlacklistFilter_toPrimitive(e,t){if("object"!=BlacklistFilter_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=BlacklistFilter_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var BlacklistFilter=function(){function e(){_classCallCheck(this,e),BlacklistFilter_defineProperty(this,"name","blacklist"),BlacklistFilter_defineProperty(this,"order",10),BlacklistFilter_defineProperty(this,"enabled",!0),BlacklistFilter_defineProperty(this,"blacklistSet",new Set),BlacklistFilter_defineProperty(this,"lastUpdateTime",0),BlacklistFilter_defineProperty(this,"UPDATE_INTERVAL",1e3),this.updateBlacklist()}return _createClass(e,[{key:"shouldFilter",value:function(e){return this.ensureBlacklistUpdated(),this.blacklistSet.has(e)}},{key:"filterTags",value:function(e){var t=this;return this.ensureBlacklistUpdated(),e.filter(function(e){return!t.blacklistSet.has(e)})}},{key:"filterPages",value:function(e){var t=this;return this.ensureBlacklistUpdated(),e.filter(function(e){return!t.blacklistSet.has(e)})}},{key:"ensureBlacklistUpdated",value:function(){var e=Date.now();e-this.lastUpdateTime>this.UPDATE_INTERVAL&&(this.updateBlacklist(),this.lastUpdateTime=e)}},{key:"updateBlacklist",value:function(){var e=this,t=this.getUserBlacklistFromSettings().split(",").map(function(e){return e.trim()}).filter(Boolean),r=this.getDataPageTitleFromSettings();this.blacklistSet.clear(),[].concat(["fsrsState","reviewMode","eFactor","interval","repetitions","nextDueDate","dateCreated","grade","intervalMultiplier","intervalMultiplierType","isNew","priority-order"],BlacklistFilter_toConsumableArray(t)).forEach(function(t){e.blacklistSet.add(t)}),null!=r&&r.trim()&&this.blacklistSet.add(r)}},{key:"getUserBlacklistFromSettings",value:function(){try{var e,t=null===(e=window.roamMemo)||void 0===e?void 0:e.extensionAPI;if(null==t||!t.settings)return"";var r=t.settings.get("tagBlacklist");return"string"==typeof r?r:""}catch(e){return""}}},{key:"getDataPageTitleFromSettings",value:function(){try{var e,t=null===(e=window.roamMemo)||void 0===e?void 0:e.extensionAPI;if(null==t||!t.settings)return"roam/memo";var r=t.settings.get("dataPageTitle");return"string"==typeof r?r:"roam/memo"}catch(e){return"roam/memo"}}}]),e}();function DailyNoteFilter_typeof(e){return DailyNoteFilter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},DailyNoteFilter_typeof(e)}function DailyNoteFilter_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function DailyNoteFilter_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,DailyNoteFilter_toPropertyKey(n.key),n)}}function DailyNoteFilter_createClass(e,t,r){return t&&DailyNoteFilter_defineProperties(e.prototype,t),r&&DailyNoteFilter_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function DailyNoteFilter_defineProperty(e,t,r){return(t=DailyNoteFilter_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function DailyNoteFilter_toPropertyKey(e){var t=DailyNoteFilter_toPrimitive(e,"string");return"symbol"==DailyNoteFilter_typeof(t)?t:t+""}function DailyNoteFilter_toPrimitive(e,t){if("object"!=DailyNoteFilter_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=DailyNoteFilter_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var DailyNoteFilter=function(){function e(){DailyNoteFilter_classCallCheck(this,e),DailyNoteFilter_defineProperty(this,"name","dailyNote"),DailyNoteFilter_defineProperty(this,"order",20),DailyNoteFilter_defineProperty(this,"enabled",!0),DailyNoteFilter_defineProperty(this,"dailyNoteCache",new Map)}return DailyNoteFilter_createClass(e,[{key:"shouldFilter",value:function(e){return this.isDailyNote(e)}},{key:"filterTags",value:function(e){var t=this;return e.filter(function(e){return!t.isDailyNote(e)})}},{key:"filterPages",value:function(e){var t=this;return e.filter(function(e){return!t.isDailyNote(e)})}},{key:"isDailyNote",value:function(t){if(this.dailyNoteCache.has(t))return this.dailyNoteCache.get(t);var r=e.DAILY_NOTE_PATTERNS.some(function(e){return e.test(t)});return this.dailyNoteCache.set(t,r),this.dailyNoteCache.size>1e3&&this.cleanupCache(),r}},{key:"cleanupCache",value:function(){var e=this;Array.from(this.dailyNoteCache.keys()).slice(0,200).forEach(function(t){return e.dailyNoteCache.delete(t)})}}]),e}();function Logger_typeof(e){return Logger_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Logger_typeof(e)}function Logger_toConsumableArray(e){return Logger_arrayWithoutHoles(e)||Logger_iterableToArray(e)||Logger_unsupportedIterableToArray(e)||Logger_nonIterableSpread()}function Logger_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function Logger_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return Logger_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Logger_arrayLikeToArray(e,t):void 0}}function Logger_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function Logger_arrayWithoutHoles(e){if(Array.isArray(e))return Logger_arrayLikeToArray(e)}function Logger_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function Logger_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function Logger_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Logger_ownKeys(Object(r),!0).forEach(function(t){Logger_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Logger_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function Logger_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Logger_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Logger_toPropertyKey(n.key),n)}}function Logger_createClass(e,t,r){return t&&Logger_defineProperties(e.prototype,t),r&&Logger_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function Logger_defineProperty(e,t,r){return(t=Logger_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Logger_toPropertyKey(e){var t=Logger_toPrimitive(e,"string");return"symbol"==Logger_typeof(t)?t:t+""}function Logger_toPrimitive(e,t){if("object"!=Logger_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=Logger_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}DailyNoteFilter_defineProperty(DailyNoteFilter,"DAILY_NOTE_PATTERNS",[/^\d{4}-\d{2}-\d{2}$/,/^January \d{1,2}(st|nd|rd|th), \d{4}$/,/^February \d{1,2}(st|nd|rd|th), \d{4}$/,/^March \d{1,2}(st|nd|rd|th), \d{4}$/,/^April \d{1,2}(st|nd|rd|th), \d{4}$/,/^May \d{1,2}(st|nd|rd|th), \d{4}$/,/^June \d{1,2}(st|nd|rd|th), \d{4}$/,/^July \d{1,2}(st|nd|rd|th), \d{4}$/,/^August \d{1,2}(st|nd|rd|th), \d{4}$/,/^September \d{1,2}(st|nd|rd|th), \d{4}$/,/^October \d{1,2}(st|nd|rd|th), \d{4}$/,/^November \d{1,2}(st|nd|rd|th), \d{4}$/,/^December \d{1,2}(st|nd|rd|th), \d{4}$/,/^\d{1,2}月\d{1,2}日$/,/^\d{1,2}\/\d{1,2}\/\d{4}$/,/^\d{1,2}-\d{1,2}-\d{4}$/]);var LogLevel=function(e){return e[e.DEBUG=0]="DEBUG",e[e.INFO=1]="INFO",e[e.WARN=2]="WARN",e[e.ERROR=3]="ERROR",e[e.SILENT=4]="SILENT",e}({}),UnifiedLogger=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Logger_classCallCheck(this,e),Logger_defineProperty(this,"performanceMarks",new Map);var r=!1;this.config=Logger_objectSpread({level:LogLevel.WARN,enabledModules:[],disabledModules:[],enablePerformanceLogging:r,enableStackTrace:r},t)}return Logger_createClass(e,[{key:"configure",value:function(e){this.config=Logger_objectSpread(Logger_objectSpread({},this.config),e)}},{key:"shouldLog",value:function(e,t){if(e<this.config.level)return!1;if(t){var r,n;if(null!==(r=this.config.disabledModules)&&void 0!==r&&r.includes(t))return!1;if(null!==(n=this.config.enabledModules)&&void 0!==n&&n.length&&!this.config.enabledModules.includes(t))return!1}return!0}},{key:"formatMessage",value:function(e,t,r,n){var a=(new Date).toLocaleTimeString(),i=this.getLevelIcon(e),o=t?"[".concat(t,"]"):"",s="".concat(i," ").concat(a," ").concat(o," ").concat(r);return n?[s,n]:[s]}},{key:"getLevelIcon",value:function(e){switch(e){case LogLevel.DEBUG:return"🔍";case LogLevel.INFO:return"ℹ️";case LogLevel.WARN:return"⚠️";case LogLevel.ERROR:return"❌";default:return"📝"}}},{key:"getConsoleMethod",value:function(e){switch(e){case LogLevel.DEBUG:return"log";case LogLevel.INFO:return"info";case LogLevel.WARN:return"warn";case LogLevel.ERROR:return"error";default:return"log"}}},{key:"debug",value:function(e,t,r){var n;if(this.shouldLog(LogLevel.DEBUG,r)){var a=this.formatMessage(LogLevel.DEBUG,r,e,t);(n=console).log.apply(n,Logger_toConsumableArray(a))}}},{key:"info",value:function(e,t,r){var n;if(this.shouldLog(LogLevel.INFO,r)){var a=this.formatMessage(LogLevel.INFO,r,e,t);(n=console).info.apply(n,Logger_toConsumableArray(a))}}},{key:"warn",value:function(e,t,r){var n;if(this.shouldLog(LogLevel.WARN,r)){var a=this.formatMessage(LogLevel.WARN,r,e,t);(n=console).warn.apply(n,Logger_toConsumableArray(a))}}},{key:"error",value:function(e,t,r){var n;if(this.shouldLog(LogLevel.ERROR,r)){var a=this.formatMessage(LogLevel.ERROR,r,e,t);(n=console).error.apply(n,Logger_toConsumableArray(a)),this.config.enableStackTrace&&t instanceof Error&&console.error("Stack trace:",t.stack)}}},{key:"performanceStart",value:function(e,t){this.config.enablePerformanceLogging&&(this.performanceMarks.set(e,performance.now()),this.debug("性能测量开始: ".concat(e),void 0,t))}},{key:"performanceEnd",value:function(e,t){if(!this.config.enablePerformanceLogging)return 0;var r=this.performanceMarks.get(e);if(!r)return this.warn("性能测量标签不存在: ".concat(e),void 0,t),0;var n=performance.now()-r;return this.performanceMarks.delete(e),this.info("⏱️ 性能测量 ".concat(e,": ").concat(n.toFixed(2),"ms"),void 0,t),n}},{key:"module",value:function(e){return new ModuleLogger(this,e)}}]),e}(),ModuleLogger=function(){function e(t,r){Logger_classCallCheck(this,e),this.logger=t,this.moduleName=r}return Logger_createClass(e,[{key:"debug",value:function(e,t){this.logger.debug(e,t,this.moduleName)}},{key:"info",value:function(e,t){this.logger.info(e,t,this.moduleName)}},{key:"warn",value:function(e,t){this.logger.warn(e,t,this.moduleName)}},{key:"error",value:function(e,t){this.logger.error(e,t,this.moduleName)}},{key:"performanceStart",value:function(e){this.logger.performanceStart(e,this.moduleName)}},{key:"performanceEnd",value:function(e){return this.logger.performanceEnd(e,this.moduleName)}}]),e}(),Logger=new UnifiedLogger,createModuleLogger=function(e){return Logger.module(e)};function DataPageFilter_typeof(e){return DataPageFilter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},DataPageFilter_typeof(e)}function DataPageFilter_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function DataPageFilter_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,DataPageFilter_toPropertyKey(n.key),n)}}function DataPageFilter_createClass(e,t,r){return t&&DataPageFilter_defineProperties(e.prototype,t),r&&DataPageFilter_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function DataPageFilter_defineProperty(e,t,r){return(t=DataPageFilter_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function DataPageFilter_toPropertyKey(e){var t=DataPageFilter_toPrimitive(e,"string");return"symbol"==DataPageFilter_typeof(t)?t:t+""}function DataPageFilter_toPrimitive(e,t){if("object"!=DataPageFilter_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=DataPageFilter_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var logger=createModuleLogger("DataPageFilter"),DataPageFilter=function(){function e(){DataPageFilter_classCallCheck(this,e),DataPageFilter_defineProperty(this,"name","dataPage"),DataPageFilter_defineProperty(this,"order",30),DataPageFilter_defineProperty(this,"enabled",!0)}return DataPageFilter_createClass(e,[{key:"shouldFilter",value:function(e,t){return e===(t.dataPageTitle||this.getDataPageFromSettings())}},{key:"filterTags",value:function(e){var t=this.getDataPageFromSettings();return e.filter(function(e){return e!==t})}},{key:"filterPages",value:function(e){var t=this.getDataPageFromSettings();return e.filter(function(e){return e!==t})}},{key:"getDataPageFromSettings",value:function(){try{var e,t=null===(e=window.roamMemo)||void 0===e||null===(e=e.extensionAPI)||void 0===e?void 0:e.settings;return(null==t?void 0:t.dataPageTitle)||"roam/memo"}catch(e){return logger.warn("无法获取数据页面设置",e),"roam/memo"}}}]),e}();function SystemFieldFilter_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function SystemFieldFilter_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?SystemFieldFilter_ownKeys(Object(r),!0).forEach(function(t){SystemFieldFilter_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):SystemFieldFilter_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function SystemFieldFilter_typeof(e){return SystemFieldFilter_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},SystemFieldFilter_typeof(e)}function SystemFieldFilter_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function SystemFieldFilter_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,SystemFieldFilter_toPropertyKey(n.key),n)}}function SystemFieldFilter_createClass(e,t,r){return t&&SystemFieldFilter_defineProperties(e.prototype,t),r&&SystemFieldFilter_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function SystemFieldFilter_defineProperty(e,t,r){return(t=SystemFieldFilter_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function SystemFieldFilter_toPropertyKey(e){var t=SystemFieldFilter_toPrimitive(e,"string");return"symbol"==SystemFieldFilter_typeof(t)?t:t+""}function SystemFieldFilter_toPrimitive(e,t){if("object"!=SystemFieldFilter_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=SystemFieldFilter_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var SystemFieldFilter=function(){function e(){SystemFieldFilter_classCallCheck(this,e),SystemFieldFilter_defineProperty(this,"name","systemField"),SystemFieldFilter_defineProperty(this,"order",40),SystemFieldFilter_defineProperty(this,"enabled",!0)}return SystemFieldFilter_createClass(e,[{key:"shouldFilter",value:function(t,r){return"field"===r.type&&e.SYSTEM_FIELDS.has(t)}},{key:"filterCardData",value:function(t){return t.map(function(t){if("object"===SystemFieldFilter_typeof(t)&&null!==t){var r=SystemFieldFilter_objectSpread({},t);return e.SYSTEM_FIELDS.forEach(function(e){delete r[e]}),r}return t})}}]),e}();function FilterManager_typeof(e){return FilterManager_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},FilterManager_typeof(e)}function FilterManager_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function FilterManager_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?FilterManager_ownKeys(Object(r),!0).forEach(function(t){FilterManager_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):FilterManager_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function FilterManager_createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=FilterManager_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function FilterManager_toConsumableArray(e){return FilterManager_arrayWithoutHoles(e)||FilterManager_iterableToArray(e)||FilterManager_unsupportedIterableToArray(e)||FilterManager_nonIterableSpread()}function FilterManager_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function FilterManager_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return FilterManager_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?FilterManager_arrayLikeToArray(e,t):void 0}}function FilterManager_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function FilterManager_arrayWithoutHoles(e){if(Array.isArray(e))return FilterManager_arrayLikeToArray(e)}function FilterManager_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function FilterManager_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function FilterManager_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,FilterManager_toPropertyKey(n.key),n)}}function FilterManager_createClass(e,t,r){return t&&FilterManager_defineProperties(e.prototype,t),r&&FilterManager_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function FilterManager_defineProperty(e,t,r){return(t=FilterManager_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function FilterManager_toPropertyKey(e){var t=FilterManager_toPrimitive(e,"string");return"symbol"==FilterManager_typeof(t)?t:t+""}function FilterManager_toPrimitive(e,t){if("object"!=FilterManager_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=FilterManager_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}SystemFieldFilter_defineProperty(SystemFieldFilter,"SYSTEM_FIELDS",new Set(["rsID","createdAt","updatedAt","syncStatus","version","metadata","systemState","internalId"]));var FilterManager=function(){function e(){FilterManager_classCallCheck(this,e),FilterManager_defineProperty(this,"filters",new Map),FilterManager_defineProperty(this,"filterCache",new Map),FilterManager_defineProperty(this,"MAX_CACHE_SIZE",1e3),this.registerBuiltinFilters()}return FilterManager_createClass(e,[{key:"filterTagsList",value:function(e,t){return this.applyFilters(e,"tag",t)}},{key:"filterPagesList",value:function(e,t){return this.applyFilters(e,"page",t)}},{key:"filterCardData",value:function(e,t){return this.applyFilters(e,"card",t)}},{key:"register",value:function(e){this.filters.set(e.name,e),this.sortFilters()}},{key:"unregister",value:function(e){this.filters.delete(e)}},{key:"setFilterEnabled",value:function(e,t){var r=this.filters.get(e);r&&(r.enabled=t)}},{key:"applyFilters",value:function(e,t,r){var n,a=Array.from(this.filters.values()).filter(function(e){return e.enabled}).sort(function(e,t){return e.order-t.order}),i=FilterManager_toConsumableArray(e),o=FilterManager_createForOfIteratorHelper(a);try{var s=function(){var e=n.value,a=FilterManager_objectSpread({type:t},r);switch(t){case"tag":i=e.filterTags?e.filterTags(i):i.filter(function(t){return!e.shouldFilter(t,a)});break;case"page":i=e.filterPages?e.filterPages(i):i.filter(function(t){return!e.shouldFilter(t,a)});break;case"card":e.filterCardData&&(i=e.filterCardData(i))}if(0===i.length)return 1};for(o.s();!(n=o.n()).done&&!s(););}catch(e){o.e(e)}finally{o.f()}return i}},{key:"registerBuiltinFilters",value:function(){this.register(new BlacklistFilter),this.register(new DailyNoteFilter),this.register(new DataPageFilter),this.register(new SystemFieldFilter)}},{key:"sortFilters",value:function(){}}]),e}();function PracticeSessionManager_typeof(e){return PracticeSessionManager_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},PracticeSessionManager_typeof(e)}function PracticeSessionManager_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function PracticeSessionManager_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?PracticeSessionManager_ownKeys(Object(r),!0).forEach(function(t){PracticeSessionManager_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):PracticeSessionManager_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function PracticeSessionManager_toConsumableArray(e){return PracticeSessionManager_arrayWithoutHoles(e)||PracticeSessionManager_iterableToArray(e)||PracticeSessionManager_unsupportedIterableToArray(e)||PracticeSessionManager_nonIterableSpread()}function PracticeSessionManager_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function PracticeSessionManager_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return PracticeSessionManager_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?PracticeSessionManager_arrayLikeToArray(e,t):void 0}}function PracticeSessionManager_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function PracticeSessionManager_arrayWithoutHoles(e){if(Array.isArray(e))return PracticeSessionManager_arrayLikeToArray(e)}function PracticeSessionManager_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function PracticeSessionManager_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function PracticeSessionManager_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,PracticeSessionManager_toPropertyKey(n.key),n)}}function PracticeSessionManager_createClass(e,t,r){return t&&PracticeSessionManager_defineProperties(e.prototype,t),r&&PracticeSessionManager_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function PracticeSessionManager_defineProperty(e,t,r){return(t=PracticeSessionManager_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function PracticeSessionManager_toPropertyKey(e){var t=PracticeSessionManager_toPrimitive(e,"string");return"symbol"==PracticeSessionManager_typeof(t)?t:t+""}function PracticeSessionManager_toPrimitive(e,t){if("object"!=PracticeSessionManager_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=PracticeSessionManager_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var PracticeSessionManager_logger=createModuleLogger("PracticeSessionManager"),SessionState=function(e){return e.IDLE="idle",e.ACTIVE="active",e.SUSPENDED="suspended",e.TERMINATED="terminated",e}({}),SessionEvent=function(e){return e.CREATE_SESSION="create_session",e.RESUME_SESSION="resume_session",e.SUSPEND_SESSION="suspend_session",e.TERMINATE_SESSION="terminate_session",e.MODE_CHANGED="mode_changed",e.DECK_CHANGED="deck_changed",e.SETTINGS_CHANGED="settings_changed",e.DATA_REFRESHED="data_refreshed",e.CARD_PRACTICED="card_practiced",e.QUEUE_INVALIDATED="queue_invalidated",e}({}),PracticeSessionManager=function(){function e(t){PracticeSessionManager_classCallCheck(this,e),PracticeSessionManager_defineProperty(this,"currentSession",null),PracticeSessionManager_defineProperty(this,"eventListeners",new Map),this.queueProvider=t,this.initializeEventListeners()}return PracticeSessionManager_createClass(e,[{key:"getPracticeQueue",value:function(e){var t;return this.shouldUpdateSession(e)&&this.handleContextChange(e),this.currentSession&&this.currentSession.state===SessionState.ACTIVE||this.createNewSession(e),this.currentSession&&(this.currentSession.snapshot.metadata.lastAccessed=new Date),(null===(t=this.currentSession)||void 0===t?void 0:t.snapshot.queue)||[]}},{key:"createSession",value:function(e){var t;return this.createNewSession(e),(null===(t=this.currentSession)||void 0===t?void 0:t.id)||""}},{key:"resumeSession",value:function(){return!(!this.currentSession||this.currentSession.state!==SessionState.SUSPENDED||(this.currentSession.state=SessionState.ACTIVE,this.emitEvent(SessionEvent.RESUME_SESSION,{sessionId:this.currentSession.id}),0))}},{key:"suspendSession",value:function(){return!(!this.currentSession||this.currentSession.state!==SessionState.ACTIVE||(this.currentSession.state=SessionState.SUSPENDED,this.emitEvent(SessionEvent.SUSPEND_SESSION,{sessionId:this.currentSession.id}),0))}},{key:"terminateSession",value:function(){var e,t;this.currentSession&&(this.currentSession.state=SessionState.TERMINATED,this.emitEvent(SessionEvent.TERMINATE_SESSION,{sessionId:this.currentSession.id}),"clearTodayCompletedCache"in this.queueProvider&&(null===(e=(t=this.queueProvider).clearTodayCompletedCache)||void 0===e||e.call(t)),this.currentSession=null)}},{key:"onDataRefresh",value:function(){this.emitEvent(SessionEvent.DATA_REFRESHED),this.currentSession&&this.emitEvent(SessionEvent.QUEUE_INVALIDATED,{reason:"data_refresh",sessionId:this.currentSession.id})}},{key:"onCardPracticed",value:function(e){this.currentSession&&this.currentSession.state===SessionState.ACTIVE&&(this.currentSession.statistics.cardsCompleted++,this.emitEvent(SessionEvent.CARD_PRACTICED,{cardUid:e,sessionId:this.currentSession.id,completed:this.currentSession.statistics.cardsCompleted}))}},{key:"onModeChanged",value:function(e){this.emitEvent(SessionEvent.MODE_CHANGED,{newMode:e})}},{key:"onDeckChanged",value:function(e){this.emitEvent(SessionEvent.DECK_CHANGED,{newDeck:e})}},{key:"getCurrentSessionInfo",value:function(){if(!this.currentSession)return{hasActiveSession:!1};var e=(new Date).getTime()-this.currentSession.statistics.sessionStartTime.getTime();return{hasActiveSession:!0,sessionId:this.currentSession.id,state:this.currentSession.state,queueLength:this.currentSession.snapshot.queue.length,cardsCompleted:this.currentSession.statistics.cardsCompleted,sessionDuration:e,context:this.currentSession.snapshot.context}}},{key:"getSessionStats",value:function(){var e={totalSessions:1};if(this.currentSession){var t=this.currentSession.statistics.cardsCompleted,r=this.currentSession.snapshot.queue.length,n=(new Date).getTime()-this.currentSession.statistics.sessionStartTime.getTime();e.currentSessionStats={efficiency:r>0?t/r*100:0,averageTimePerCard:t>0?n/t:0,remainingCards:Math.max(0,r-t)}}return e}},{key:"shouldUpdateSession",value:function(e){if(!this.currentSession)return!0;var t=this.currentSession.snapshot.context;return t.isGlobalMixedMode!==e.isGlobalMixedMode||t.selectedTag!==e.selectedTag||t.isCramming!==e.isCramming||t.dailyLimit!==e.dailyLimit||t.dataVersion!==e.dataVersion}},{key:"handleContextChange",value:function(e){if(this.currentSession){var t=this.currentSession.snapshot.context;t.isGlobalMixedMode!==e.isGlobalMixedMode&&this.emitEvent(SessionEvent.MODE_CHANGED,{from:t.isGlobalMixedMode,to:e.isGlobalMixedMode}),t.selectedTag!==e.selectedTag&&this.emitEvent(SessionEvent.DECK_CHANGED,{from:t.selectedTag,to:e.selectedTag}),t.isCramming===e.isCramming&&t.dailyLimit===e.dailyLimit||this.emitEvent(SessionEvent.SETTINGS_CHANGED,{oldContext:t,newContext:e}),t.dataVersion!==e.dataVersion&&this.emitEvent(SessionEvent.DATA_REFRESHED,{oldVersion:t.dataVersion,newVersion:e.dataVersion})}this.createNewSession(e)}},{key:"createNewSession",value:function(e){this.currentSession&&this.terminateSession();var t=e.isGlobalMixedMode?this.queueProvider.getGlobalQueue(e):this.queueProvider.getDeckQueue(e.selectedTag,e),r=this.queueProvider.getQueueStats(t),n="session_".concat(Date.now(),"_").concat(Math.random().toString(36).substring(2,11)),a=new Date;this.currentSession={id:n,state:SessionState.ACTIVE,snapshot:{queue:PracticeSessionManager_toConsumableArray(t),context:PracticeSessionManager_objectSpread({},e),metadata:PracticeSessionManager_objectSpread(PracticeSessionManager_objectSpread({},r),{},{createdAt:a,lastAccessed:a})},statistics:{cardsCompleted:0,sessionStartTime:a,totalPracticeTime:0}},this.emitEvent(SessionEvent.CREATE_SESSION,{sessionId:n,queueLength:t.length,context:e,stats:r}),PracticeSessionManager_logger.info("创建新会话",{sessionId:n,queueLength:t.length,context:e,stats:r})}},{key:"initializeEventListeners",value:function(){var e=this;Object.values(SessionEvent).forEach(function(t){e.eventListeners.set(t,[])})}},{key:"emitEvent",value:function(e,t){(this.eventListeners.get(e)||[]).forEach(function(r){try{r(t)}catch(t){PracticeSessionManager_logger.error("事件监听器错误",{event:e,error:t})}})}},{key:"addEventListener",value:function(e,t){var r=this.eventListeners.get(e)||[];r.push(t),this.eventListeners.set(e,r)}},{key:"removeEventListener",value:function(e,t){var r=this.eventListeners.get(e)||[],n=r.indexOf(t);n>-1&&r.splice(n,1)}}]),e}();function UnifiedDataCore_typeof(e){return UnifiedDataCore_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},UnifiedDataCore_typeof(e)}function UnifiedDataCore_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function UnifiedDataCore_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?UnifiedDataCore_ownKeys(Object(r),!0).forEach(function(t){UnifiedDataCore_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):UnifiedDataCore_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function UnifiedDataCore_toConsumableArray(e){return UnifiedDataCore_arrayWithoutHoles(e)||UnifiedDataCore_iterableToArray(e)||UnifiedDataCore_unsupportedIterableToArray(e)||UnifiedDataCore_nonIterableSpread()}function UnifiedDataCore_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function UnifiedDataCore_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function UnifiedDataCore_arrayWithoutHoles(e){if(Array.isArray(e))return UnifiedDataCore_arrayLikeToArray(e)}function UnifiedDataCore_regeneratorRuntime(){var e=UnifiedDataCore_regenerator(),t=e.m(UnifiedDataCore_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,UnifiedDataCore_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(UnifiedDataCore_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new UnifiedDataCore_OverloadYield(e,t)},AsyncIterator:UnifiedDataCore_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?UnifiedDataCore_regeneratorAsyncGen:UnifiedDataCore_regeneratorAsync)(i(e),t,r,a,o)},keys:UnifiedDataCore_regeneratorKeys,values:UnifiedDataCore_regeneratorValues}})()}function UnifiedDataCore_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(UnifiedDataCore_typeof(e)+" is not iterable")}function UnifiedDataCore_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function UnifiedDataCore_regeneratorAsync(e,t,r,n,a){var i=UnifiedDataCore_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function UnifiedDataCore_regeneratorAsyncGen(e,t,r,n,a){return new UnifiedDataCore_regeneratorAsyncIterator(UnifiedDataCore_regenerator().w(e,t,r,n),a||Promise)}function UnifiedDataCore_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof UnifiedDataCore_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(UnifiedDataCore_regeneratorDefine2(UnifiedDataCore_regeneratorAsyncIterator.prototype),UnifiedDataCore_regeneratorDefine2(UnifiedDataCore_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),UnifiedDataCore_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function UnifiedDataCore_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return UnifiedDataCore_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(UnifiedDataCore_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,UnifiedDataCore_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,UnifiedDataCore_regeneratorDefine2(f,"constructor",c),UnifiedDataCore_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",UnifiedDataCore_regeneratorDefine2(c,a,"GeneratorFunction"),UnifiedDataCore_regeneratorDefine2(f),UnifiedDataCore_regeneratorDefine2(f,a,"Generator"),UnifiedDataCore_regeneratorDefine2(f,n,function(){return this}),UnifiedDataCore_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(UnifiedDataCore_regenerator=function(){return{w:i,m:p}})()}function UnifiedDataCore_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}UnifiedDataCore_regeneratorDefine2=function(e,t,r,n){function i(t,r){UnifiedDataCore_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},UnifiedDataCore_regeneratorDefine2(e,t,r,n)}function UnifiedDataCore_OverloadYield(e,t){this.v=e,this.k=t}function UnifiedDataCore_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function UnifiedDataCore_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){UnifiedDataCore_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){UnifiedDataCore_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function UnifiedDataCore_slicedToArray(e,t){return UnifiedDataCore_arrayWithHoles(e)||UnifiedDataCore_iterableToArrayLimit(e,t)||UnifiedDataCore_unsupportedIterableToArray(e,t)||UnifiedDataCore_nonIterableRest()}function UnifiedDataCore_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function UnifiedDataCore_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function UnifiedDataCore_arrayWithHoles(e){if(Array.isArray(e))return e}function UnifiedDataCore_createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=UnifiedDataCore_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function UnifiedDataCore_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return UnifiedDataCore_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?UnifiedDataCore_arrayLikeToArray(e,t):void 0}}function UnifiedDataCore_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function UnifiedDataCore_classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function UnifiedDataCore_defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,UnifiedDataCore_toPropertyKey(n.key),n)}}function UnifiedDataCore_createClass(e,t,r){return t&&UnifiedDataCore_defineProperties(e.prototype,t),r&&UnifiedDataCore_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function UnifiedDataCore_defineProperty(e,t,r){return(t=UnifiedDataCore_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function UnifiedDataCore_toPropertyKey(e){var t=UnifiedDataCore_toPrimitive(e,"string");return"symbol"==UnifiedDataCore_typeof(t)?t:t+""}function UnifiedDataCore_toPrimitive(e,t){if("object"!=UnifiedDataCore_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=UnifiedDataCore_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}var UnifiedDataCore_logger=createModuleLogger("UnifiedDataCore"),UnifiedCacheManager=function(){function e(){UnifiedDataCore_classCallCheck(this,e),UnifiedDataCore_defineProperty(this,"memory",new Map),UnifiedDataCore_defineProperty(this,"blockTitles",new Map),UnifiedDataCore_defineProperty(this,"blockDetails",new Map),UnifiedDataCore_defineProperty(this,"computedMaps",new Map),UnifiedDataCore_defineProperty(this,"DEFAULT_TTL",3e5)}return UnifiedDataCore_createClass(e,[{key:"setMemory",value:function(e,t,r){this.memory.set(e,{data:t,timestamp:Date.now(),ttl:r||this.DEFAULT_TTL})}},{key:"getMemory",value:function(e){var t=this.memory.get(e);return t?Date.now()-t.timestamp>(t.ttl||this.DEFAULT_TTL)?(this.memory.delete(e),null):t.data:null}},{key:"setBlockTitle",value:function(e,t){this.blockTitles.set(e,t)}},{key:"getBlockTitle",value:function(e){return this.blockTitles.get(e)||null}},{key:"setBlockDetail",value:function(e,t){this.blockDetails.set(e,t)}},{key:"getBlockDetail",value:function(e){return this.blockDetails.get(e)||null}},{key:"setComputedMap",value:function(e,t){this.computedMaps.set(e,t),this.computedMaps.set("timestamp",Date.now())}},{key:"getComputedMap",value:function(e){return this.computedMaps.get(e)||null}},{key:"isComputedMapsValid",value:function(){var e=this.computedMaps.get("timestamp");return!!e&&Date.now()-e<1e3}},{key:"clear",value:function(e,t){if(!e||"all"===e)return this.memory.clear(),this.blockTitles.clear(),this.blockDetails.clear(),void this.computedMaps.clear();switch(e){case"memory":t?this.memory.delete(t):this.memory.clear();break;case"blocks":t?(this.blockTitles.delete(t),this.blockDetails.delete(t)):(this.blockTitles.clear(),this.blockDetails.clear());break;case"computed":this.computedMaps.clear()}}},{key:"getMultipleBlockTitles",value:function(e){var t,r=new Map,n=UnifiedDataCore_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var a=t.value,i=this.blockTitles.get(a);i&&r.set(a,i)}}catch(e){n.e(e)}finally{n.f()}return r}},{key:"setMultipleBlockTitles",value:function(e){var t,r=UnifiedDataCore_createForOfIteratorHelper(e);try{for(r.s();!(t=r.n()).done;){var n=UnifiedDataCore_slicedToArray(t.value,2),a=n[0],i=n[1];this.blockTitles.set(a,i)}}catch(e){r.e(e)}finally{r.f()}}}]),e}(),UnifiedDataManager=function(){function e(t){UnifiedDataCore_classCallCheck(this,e),this.cache=t}var t,r,n,a;return UnifiedDataCore_createClass(e,[{key:"roamQuery",value:(a=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a,i,o=arguments;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:for(r=o.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=o[a];return e.prev=1,e.next=4,(i=window.roamAlphaAPI).q.apply(i,[t].concat(n));case 4:return e.abrupt("return",e.sent);case 7:throw e.prev=7,e.t0=e.catch(1),UnifiedDataCore_logger.error("Roam API查询失败",{query:t,params:n,error:e.t0}),e.t0;case 11:case"end":return e.stop()}},e,null,[[1,7]])})),function(e){return a.apply(this,arguments)})},{key:"batchFetchBlockTitles",value:(n=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a,i,o=this;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==(r=t.filter(function(e){return!o.cache.getBlockTitle(e)})).length){e.next=3;break}return e.abrupt("return",this.cache.getMultipleBlockTitles(t));case 3:return n=r.map(function(){var e=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,(0,utils.YD)(t);case 3:if(null==(r=e.sent)||!r.string){e.next=7;break}return n=r.string.length>20?r.string.substring(0,20)+"...":r.string,e.abrupt("return",[t,n]);case 7:e.next=14;break;case 9:return e.prev=9,e.t0=e.catch(0),UnifiedDataCore_logger.warn("获取卡片标题失败 ".concat(t),e.t0),a=t.substring(0,8)+"...",e.abrupt("return",[t,a]);case 14:return e.abrupt("return",null);case 15:case"end":return e.stop()}},e,null,[[0,9]])}));return function(t){return e.apply(this,arguments)}}()),e.next=6,Promise.all(n);case 6:return a=e.sent,i=new Map,a.forEach(function(e){e&&i.set(e[0],e[1])}),this.cache.setMultipleBlockTitles(i),e.abrupt("return",this.cache.getMultipleBlockTitles(t));case 11:case"end":return e.stop()}},e,this)})),function(e){return n.apply(this,arguments)})},{key:"getCacheData",value:(r=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t,r){var n;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return",{});case 2:return e.prev=2,e.next=5,getPluginPageCachedData({dataPageTitle:t});case 5:return n=e.sent,e.abrupt("return",r?n[r]||{}:n);case 9:return e.prev=9,e.t0=e.catch(2),UnifiedDataCore_logger.error("获取缓存数据失败",e.t0),e.abrupt("return",{});case 13:case"end":return e.stop()}},e,null,[[2,9]])})),function(e,t){return r.apply(this,arguments)})},{key:"setCacheData",value:(t=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t,r,n){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,e.next=5,saveCacheData({dataPageTitle:t,data:UnifiedDataCore_defineProperty({},r,n),selectedTag:r});case 5:e.next=10;break;case 7:e.prev=7,e.t0=e.catch(2),UnifiedDataCore_logger.error("保存缓存数据失败",e.t0);case 10:case"end":return e.stop()}},e,null,[[2,7]])})),function(e,r,n){return t.apply(this,arguments)})}]),e}(),UnifiedStatsCalculator=function(){function e(){UnifiedDataCore_classCallCheck(this,e)}return UnifiedDataCore_createClass(e,null,[{key:"computeAllStats",value:function(e,t,r,n){var a=this,i=n.getComputedMap("priorityRankMap"),o={total:0,new:0,due:0,notDue:0,byDeck:{}},s={total:0,new:0,due:0,notDue:0,byDeck:{}},l={allDots:[],dotsByDeck:{}},c={};e.forEach(function(e){a.processCardForDotMatrix(e,o,l,c,i,n)});var u={};t.forEach(function(e){a.processCardForPracticeStats(e,s,u)});var f=this.computeTodayStats(u,r);return{dotMatrixStats:o,practiceStats:s,dotMatrix:l,todayStats:f,deckInfo:c}}},{key:"processCardForDotMatrix",value:function(e,t,r,n,a,i){var o=i.getBlockTitle(e.uid),s={uid:e.uid,deckName:e.deckName,title:o||e.uid.substring(0,8)+"...",x:e.userPriority,y:(0,CardDotMatrix.mapDaysToY)(e.daysToDue,{maxDays:30}),priority:e.userPriority,daysToDue:e.daysToDue,dueDate:e.nextDueDate,isOverdue:e.isOverdue,isNew:e.isNew};r.allDots.push(s),r.dotsByDeck[e.deckName]||(r.dotsByDeck[e.deckName]=[]),r.dotsByDeck[e.deckName].push(s),this.updateStats(e,t),this.updateDeckInfo(e,n,a)}},{key:"processCardForPracticeStats",value:function(e,t,r){this.updateStats(e,t),r[e.deckName]||(r[e.deckName]=[]),r[e.deckName].push(e)}},{key:"updateStats",value:function(e,t){t.total++,t.byDeck[e.deckName]||(t.byDeck[e.deckName]={total:0,new:0,due:0,notDue:0});var r=t.byDeck[e.deckName];r.total++,e.isNew?(t.new++,r.new++):"due"===e.scheduleStatus||"overdue"===e.scheduleStatus?(t.due++,r.due++):(t.notDue++,r.notDue++)}},{key:"updateDeckInfo",value:function(e,t,r){var n=e.deckName;if(!t[n]){var a=r.get(e.uid)||Number.MAX_SAFE_INTEGER;t[n]={name:n,cardCount:0,position:a+1}}t[n].cardCount++;var i=r.get(e.uid)||Number.MAX_SAFE_INTEGER;i<t[n].position-1&&(t[n].position=i+1)}},{key:"computeTodayStats",value:function(e,t){for(var r=__webpack_require__(929),n=r.CompletionStatus,a=r.RenderMode,i={tags:{},combinedToday:{status:n.Unstarted,due:0,new:0,dueUids:[],newUids:[],completed:t.totalCompleted,completedUids:t.totalCompletedUids,completedDue:t.totalCompletedDue,completedNew:t.totalCompletedNew,completedDueUids:t.totalCompletedDueUids,completedNewUids:t.totalCompletedNewUids}},o=0,s=Object.entries(e);o<s.length;o++){var l,c,u=UnifiedDataCore_slicedToArray(s[o],2),f=u[0],p=u[1],h=p.filter(function(e){return!e.isNew&&("due"===e.scheduleStatus||"overdue"===e.scheduleStatus)}),d=p.filter(function(e){return e.isNew}),m=t.byDeck[f]||{completed:0,completedUids:[],completedDue:0,completedNew:0,completedDueUids:[],completedNewUids:[]};i.tags[f]={status:n.Unstarted,due:h.length,new:d.length,dueUids:h.map(function(e){return e.uid}),newUids:d.map(function(e){return e.uid}),completed:m.completed,completedUids:m.completedUids,completedDue:m.completedDue,completedNew:m.completedNew,completedDueUids:m.completedDueUids,completedNewUids:m.completedNewUids,renderMode:a.Normal},i.combinedToday.due+=h.length,i.combinedToday.new+=d.length,(l=i.combinedToday.dueUids).push.apply(l,UnifiedDataCore_toConsumableArray(h.map(function(e){return e.uid}))),(c=i.combinedToday.newUids).push.apply(c,UnifiedDataCore_toConsumableArray(d.map(function(e){return e.uid})))}return i}}]),e}(),VipSortingAlgorithm=function(){function e(){UnifiedDataCore_classCallCheck(this,e)}return UnifiedDataCore_createClass(e,null,[{key:"mergeWithPositions",value:function(t,r,n){for(var a=t.length+r.length,i=new Array(a).fill(null),o=0;o<t.length;o++){var s=n[o]-1,l=t[o],c=e.findNearestAvailablePosition(i,s,a);-1!==c&&(i[c]=l)}for(var u=0,f=0;f<a&&u<r.length;f++)null===i[f]&&(i[f]=r[u],u++);return i.filter(function(e){return null!==e})}},{key:"findNearestAvailablePosition",value:function(e,t,r){if((t<0||t>=r)&&(t=Math.max(0,Math.min(r-1,t))),null===e[t])return t;for(var n=1;n<r;n++){var a=t+n;if(a<r&&null===e[a])return a;var i=t-n;if(i>=0&&null===e[i])return i}return-1}}]),e}(),PriorityCalculator=function(){function e(){UnifiedDataCore_classCallCheck(this,e)}return UnifiedDataCore_createClass(e,null,[{key:"insertNewCards",value:function(e,t,r){if(0===t.length)return e;var n=e.length+t.length,a=Math.round((100-r)/100*n),i=Math.max(0,Math.min(e.length,a));return[].concat(UnifiedDataCore_toConsumableArray(e.slice(0,i)),UnifiedDataCore_toConsumableArray(t),UnifiedDataCore_toConsumableArray(e.slice(i)))}},{key:"generatePreciseQueue",value:function(e,t,r,n,a){if(!r||!n||!a)return this.generateNormalQueue(e,t);var i,o=[],s=[],l=UnifiedDataCore_createForOfIteratorHelper(e);try{for(l.s();!(i=l.n()).done;){var c=i.value;c.deckName===r?o.push(c):s.push(c)}}catch(e){l.e(e)}finally{l.f()}var u=n.map(function(e){return o.find(function(t){return t.uid===e})}).filter(function(e){return void 0!==e}),f=new Map(t.map(function(e,t){return[e,t]})),p=function(e){var t;return null!==(t=f.get(e))&&void 0!==t?t:Number.MAX_SAFE_INTEGER};s.sort(function(e,t){return p(e.uid)-p(t.uid)});var h=u.map(function(e){return e.uid}),d=s.map(function(e){return e.uid});return VipSortingAlgorithm.mergeWithPositions(h,d,a)}},{key:"generateNormalQueue",value:function(e,t){var r=new Map(t.map(function(e,t){return[e,t]})),n=function(e){var t;return null!==(t=r.get(e))&&void 0!==t?t:Number.MAX_SAFE_INTEGER};return e.sort(function(e,t){return n(e.uid)-n(t.uid)}),e.map(function(e){return e.uid})}}]),e}(),UnifiedDataCore=function(){function e(){UnifiedDataCore_classCallCheck(this,e),UnifiedDataCore_defineProperty(this,"filterManager",new FilterManager),UnifiedDataCore_defineProperty(this,"rawPracticeData",{}),UnifiedDataCore_defineProperty(this,"rawCardsByTag",{}),UnifiedDataCore_defineProperty(this,"scheduledCards",[]),UnifiedDataCore_defineProperty(this,"userPriorityOrder",[]),UnifiedDataCore_defineProperty(this,"finalPracticeQueue",[]),UnifiedDataCore_defineProperty(this,"filteredCandidates",[]),UnifiedDataCore_defineProperty(this,"allManageableCards",[]),UnifiedDataCore_defineProperty(this,"cache",new UnifiedCacheManager),UnifiedDataCore_defineProperty(this,"dataManager",new UnifiedDataManager(this.cache)),UnifiedDataCore_defineProperty(this,"precomputedDotMatrix",null),UnifiedDataCore_defineProperty(this,"currentDataPageTitle",""),UnifiedDataCore_defineProperty(this,"currentDailyLimit",0),UnifiedDataCore_defineProperty(this,"currentIsCramming",!1),UnifiedDataCore_defineProperty(this,"currentIsGlobalMixedMode",!1),UnifiedDataCore_defineProperty(this,"isLoading",!1),UnifiedDataCore_defineProperty(this,"lastOperation",null),this.sessionManager=new PracticeSessionManager(this),this.initializeSessionEventListeners()}var t,r,n,a,i,o,s,l,c,u,f,p,h,d,m,y,g;return UnifiedDataCore_createClass(e,[{key:"getGlobalQueue",value:function(e){return this.currentIsGlobalMixedMode===e.isGlobalMixedMode&&this.currentDailyLimit===e.dailyLimit&&this.currentIsCramming===e.isCramming||this.regenerateQueue(e),UnifiedDataCore_toConsumableArray(this.finalPracticeQueue)}},{key:"getDeckQueue",value:function(e,t){return this.currentIsGlobalMixedMode===t.isGlobalMixedMode&&this.currentDailyLimit===t.dailyLimit&&this.currentIsCramming===t.isCramming||this.regenerateQueue(t),this.getQueueForDeck(e)}},{key:"getDataVersion",value:function(){var e={scheduledCardsCount:this.scheduledCards.length,priorityOrderHash:this.userPriorityOrder.slice(0,10).join(","),finalQueueLength:this.finalPracticeQueue.length,timestamp:Date.now()};return btoa(JSON.stringify(e)).substring(0,16)}},{key:"getQueueStats",value:function(e){var t=this,r=0,n=0;return e.forEach(function(e){var a=t.scheduledCards.find(function(t){return t.uid===e});a&&(a.isNew?r++:"due"!==a.scheduleStatus&&"overdue"!==a.scheduleStatus||n++)}),{totalCards:e.length,newCards:r,dueCards:n}}},{key:"initializeSessionEventListeners",value:function(){this.sessionManager.addEventListener(SessionEvent.DATA_REFRESHED,function(e){UnifiedDataCore_logger.debug("会话检测到数据刷新",e)}),this.sessionManager.addEventListener(SessionEvent.CREATE_SESSION,function(e){UnifiedDataCore_logger.info("新会话已创建",e)}),this.sessionManager.addEventListener(SessionEvent.MODE_CHANGED,function(e){UnifiedDataCore_logger.info("检测到模式切换",e)})}},{key:"getFilterManager",value:function(){return this.filterManager}},{key:"refreshFilters",value:(g=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:this.filterManager=new FilterManager,this.currentDataPageTitle&&this.scheduledCards.length>0&&UnifiedDataCore_logger.info("过滤规则已更新，建议重新加载数据");case 2:case"end":return e.stop()}},e,this)})),function(){return g.apply(this,arguments)})},{key:"regenerateQueue",value:function(e){UnifiedDataCore_logger.debug("检测到模式切换，重新生成队列",{from:{isGlobalMixedMode:this.currentIsGlobalMixedMode,dailyLimit:this.currentDailyLimit,isCramming:this.currentIsCramming},to:{isGlobalMixedMode:e.isGlobalMixedMode,dailyLimit:e.dailyLimit,isCramming:e.isCramming}}),this.currentIsGlobalMixedMode=e.isGlobalMixedMode,this.currentDailyLimit=e.dailyLimit,this.currentIsCramming=e.isCramming,this.generateFinalQueue(e.isCramming,e.dailyLimit,e.isGlobalMixedMode),this.resetComputedMaps()}},{key:"setMemoryCache",value:function(e,t,r){this.cache.setMemory(e,t,r)}},{key:"getMemoryCache",value:function(e){return this.cache.getMemory(e)}},{key:"ensureComputedMaps",value:function(){this.cache.isComputedMapsValid()||(this.cache.setComputedMap("allManageableCardsMap",new Map(this.allManageableCards.map(function(e){return[e.uid,e]}))),this.cache.setComputedMap("scheduledCardsMap",new Map(this.scheduledCards.map(function(e){return[e.uid,e]}))),this.cache.setComputedMap("priorityRankMap",new Map(this.userPriorityOrder.map(function(e,t){return[e,t]}))),this.cache.setComputedMap("cardDetailsMap",Object.fromEntries(this.allManageableCards.map(function(e){return[e.uid,e]}))))}},{key:"ensureTodayCompletedData",value:function(){var e=this.cache.getComputedMap("todayCompletedData");return e||(e=this.calculateTodayCompletedData(),this.cache.setComputedMap("todayCompletedData",e)),e}},{key:"resetComputedMaps",value:function(){this.cache.clear("computed")}},{key:"clearTodayCompletedCache",value:function(){this.cache.clear("computed","todayCompletedData")}},{key:"loadUnifiedData",value:(y=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c,u,f,p;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.tagsList,n=t.dataPageTitle,a=t.isCramming,i=void 0!==a&&a,o=t.dailyLimit,s=void 0===o?20:o,l=t.isGlobalMixedMode,c=void 0!==l&&l,u=t.defaultPriority,f=void 0===u?70:u,!this.isLoading){e.next=3;break}return e.abrupt("return",null);case 3:return this.isLoading=!0,this.currentDataPageTitle=n,this.currentDailyLimit=s,this.currentIsCramming=i,this.currentIsGlobalMixedMode=c,e.prev=8,e.next=11,this.loadRawData(r,n);case 11:return this.computeScheduling(),e.next=14,this.applyUserPriorities(n,f);case 14:return this.generateFinalQueue(i,s,c),this.resetComputedMaps(),p=this.buildNewUnifiedResult(),this.scheduledCards.length!==this.userPriorityOrder.length&&UnifiedDataCore_logger.warn("架构一致性警告: scheduledCards和priorityOrder长度不匹配"),this.sessionManager.onDataRefresh(),e.abrupt("return",p);case 20:return e.prev=20,this.isLoading=!1,e.finish(20);case 23:case"end":return e.stop()}},e,this,[[8,,20,23]])})),function(e){return y.apply(this,arguments)})},{key:"loadRawData",value:(m=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t,r){var n,a,i,o,s;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=this.filterManager.filterTagsList(t,{type:"tag",dataPageTitle:r}),e.next=3,Promise.all([getPluginPageData({dataPageTitle:r,limitToLatest:!1}),collectAllTagsCardUidsBatch(n)]);case 3:a=e.sent,i=UnifiedDataCore_slicedToArray(a,2),o=i[0],s=i[1],this.rawPracticeData=o,this.rawCardsByTag=s;case 9:case"end":return e.stop()}},e,this)})),function(e,t){return m.apply(this,arguments)})},{key:"computeScheduling",value:function(){var e=this;this.scheduledCards=[];var t=new Date,r=new Set,n=new Map;Object.entries(this.rawCardsByTag).forEach(function(e){var t=UnifiedDataCore_slicedToArray(e,2),a=t[0];t[1].forEach(function(e){r.add(e),n.has(e)||n.set(e,a)})}),r.forEach(function(r){var a=n.get(r),i=e.rawPracticeData[r]||[],o=i.length>0?i[i.length-1]:null,s=e.computeCardSchedule(r,a,i,o,t);e.scheduledCards.push(s)})}},{key:"computeCardSchedule",value:function(e,t,r,n,a){var i,o,s,l=(0,CardDotMatrix.getNextDueDate)(r),c=new Date(a.getFullYear(),a.getMonth(),a.getDate()),u=new Date(l.getFullYear(),l.getMonth(),l.getDate()).getTime()===c.getTime();if(u)i=a,o="new",s=0;else{i=l;var f=new Date(i.getFullYear(),i.getMonth(),i.getDate());o=(s=Math.floor((f.getTime()-c.getTime())/864e5))<0?"overdue":0===s?"due":"future"}return{uid:e,deckName:t,sessions:r,latestSession:n,nextDueDate:i,scheduleStatus:o,daysToDue:s,isNew:u,isOverdue:s<0,userPriority:50}}},{key:"applyUserPriorities",value:(d=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a,i,o,s,l,c=this,u=arguments;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=u.length>1&&void 0!==u[1]?u[1]:70,n=[],e.prev=2,e.next=5,loadPriorityOrder({dataPageTitle:t});case 5:if(e.t0=e.sent,e.t0){e.next=8;break}e.t0=[];case 8:n=e.t0,e.next=15;break;case 11:e.prev=11,e.t1=e.catch(2),console.error("优先级数据加载失败:",e.t1),n=[];case 15:if(a=UnifiedDataCore_toConsumableArray(new Set(this.scheduledCards.map(function(e){return e.uid}))),0!==n.length){e.next=20;break}this.userPriorityOrder=UnifiedDataCore_toConsumableArray(a),e.next=33;break;case 20:if(i=new Set(n),o=n.filter(function(e){return a.includes(e)}),(s=a.filter(function(e){return!i.has(e)})).length>0?this.userPriorityOrder=this.insertNewCardsWithDefaultPriority(o,s,r):this.userPriorityOrder=UnifiedDataCore_toConsumableArray(o),!(s.length>0)){e.next=33;break}return e.prev=25,e.next=28,savePriorityOrder({dataPageTitle:t,priorityOrder:this.userPriorityOrder});case 28:e.next=33;break;case 30:e.prev=30,e.t2=e.catch(25),UnifiedDataCore_logger.error("新卡片优先级保存失败",e.t2);case 33:l=new Map,this.userPriorityOrder.forEach(function(e,t){var r=(c.userPriorityOrder.length-t)/c.userPriorityOrder.length*100;l.set(e,r)}),this.scheduledCards.forEach(function(e){e.userPriority=l.get(e.uid)||50});case 36:case"end":return e.stop()}},e,this,[[2,11],[25,30]])})),function(e){return d.apply(this,arguments)})},{key:"generateFinalQueue",value:function(e,t,r){var n=UnifiedDataCore_toConsumableArray(this.scheduledCards);e||(n=n.filter(function(e){return e.isNew||"due"===e.scheduleStatus||"overdue"===e.scheduleStatus}));var a=new Set(this.userPriorityOrder);this.allManageableCards=this.scheduledCards.filter(function(e){return a.has(e.uid)}),t>0&&!e&&r&&(n=this.applyDailyLimit(n,t)),this.filteredCandidates=n;var i=this.generatePrecisePositionQueue(n);this.finalPracticeQueue=i}},{key:"generatePrecisePositionQueue",value:function(e,t,r,n){return PriorityCalculator.generatePreciseQueue(e,this.userPriorityOrder,t,r,n)}},{key:"applyDailyLimit",value:function(e,t){var r=this.calculateTodayCompletedData(),n=e.filter(function(e){return!r.totalCompletedUids.includes(e.uid)}),a=new Map(this.userPriorityOrder.map(function(e,t){return[e,t]})),i=function(e){var t;return null!==(t=a.get(e))&&void 0!==t?t:Number.MAX_SAFE_INTEGER},o=UnifiedDataCore_toConsumableArray(n).sort(function(e,t){return i(e.uid)-i(t.uid)}),s=r.totalCompleted,l=Math.max(0,t-s);if(0===l)return[];var c=o.filter(function(e){return e.isNew}),u=o.filter(function(e){return!e.isNew}),f=Math.floor(.75*l),p=Math.floor(.25*l),h=u.slice(0,f),d=c.slice(0,p),m=h.length+d.length,y=Math.min(l-m,n.length-m);if(y>0){var g=new Set([].concat(UnifiedDataCore_toConsumableArray(h),UnifiedDataCore_toConsumableArray(d)).map(function(e){return e.uid})),v=o.filter(function(e){return!g.has(e.uid)}).slice(0,y);return[].concat(UnifiedDataCore_toConsumableArray(h),UnifiedDataCore_toConsumableArray(d),UnifiedDataCore_toConsumableArray(v))}return[].concat(UnifiedDataCore_toConsumableArray(h),UnifiedDataCore_toConsumableArray(d))}},{key:"savePriorityOrderToDatabase",value:(h=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,savePriorityOrder({dataPageTitle:this.currentDataPageTitle,priorityOrder:this.userPriorityOrder});case 3:e.next=9;break;case 5:throw e.prev=5,e.t0=e.catch(0),console.error("保存优先级队列失败:",e.t0),e.t0;case 9:case"end":return e.stop()}},e,this,[[0,5]])})),function(){return h.apply(this,arguments)})},{key:"moveCardInPriorityOrder",value:(p=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t,r){var n;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(-1!==(n=this.userPriorityOrder.indexOf(t))){e.next=3;break}return e.abrupt("return");case 3:return this.recordOperation("moveCard","移动卡片从位置 ".concat(n+1," 到位置 ").concat(r+1)),this.userPriorityOrder.splice(n,1),this.userPriorityOrder.splice(r,0,t),this.resetComputedMaps(),this.updateLastOperationAfterState(),e.next=10,this.savePriorityOrderToDatabase();case 10:case"end":return e.stop()}},e,this)})),function(e,t){return p.apply(this,arguments)})},{key:"updatePriorityOrder",value:(f=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this.recordOperation("updateOrder","批量更新优先级顺序 (".concat(t.length,"张卡片)")),this.userPriorityOrder=t,this.resetComputedMaps(),this.updateLastOperationAfterState(),e.next=6,this.savePriorityOrderToDatabase();case 6:case"end":return e.stop()}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"buildNewUnifiedResult",value:function(){var e=this;this.ensureComputedMaps();var t=this.ensureTodayCompletedData(),r=UnifiedStatsCalculator.computeAllStats(this.allManageableCards,this.filteredCandidates,t,this.cache);this.precomputedDotMatrix=r.dotMatrix;var n=this.cache.getComputedMap("cardDetailsMap"),a=Object.values(r.deckInfo).sort(function(e,t){return e.position-t.position});return{stats:r.practiceStats,dotMatrix:UnifiedDataCore_objectSpread(UnifiedDataCore_objectSpread({},r.dotMatrix),{},{stats:r.dotMatrixStats}),practiceQueue:this.finalPracticeQueue,priorityOrder:this.userPriorityOrder,cardDetails:n,decks:a,todayStats:r.todayStats,priorityManagement:{moveCard:this.moveCardInPriorityOrder.bind(this),updatePriorityOrder:this.updatePriorityOrder.bind(this),batchAdjustDeckPriority:this.batchAdjustDeckPriority.bind(this),undoLastOperation:this.undoLastOperationInternal.bind(this),getUndoInfo:this.getUndoInfoInternal.bind(this)},getQueueForDeck:this.getQueueForDeck.bind(this),getDeckDots:this.getDeckDots.bind(this),getDeckCardPriorityInfo:this.getDeckCardPriorityInfo.bind(this),loadBlockTitlesForDotMatrix:this.loadBlockTitlesForDotMatrix.bind(this),dataManagement:{getBlockInfo:this.getBlockInfo.bind(this),clearBlockInfoCache:this.clearBlockInfoCache.bind(this),getCacheData:this.getCacheData.bind(this),setCacheData:this.setCacheData.bind(this),deleteCacheData:this.deleteCacheData.bind(this),getAllPages:function(t){return e.getAllPages(t)},getImportData:this.getImportData.bind(this),queryRoam:this.queryRoam.bind(this)},practiceSession:{getStabilizedQueue:this.getStabilizedPracticeQueue.bind(this),getCurrentSessionInfo:this.getCurrentPracticeSessionInfo.bind(this),terminateSession:this.terminatePracticeSession.bind(this)},rawPracticeData:this.rawPracticeData}}},{key:"loadBlockTitlesForDotMatrix",value:(u=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(){var t;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.allManageableCards.map(function(e){return e.uid}),e.next=3,this.dataManager.batchFetchBlockTitles(t);case 3:this.updateDotMatrixTitles();case 4:case"end":return e.stop()}},e,this)})),function(){return u.apply(this,arguments)})},{key:"updateDotMatrixTitles",value:function(){var e,t=this;this.precomputedDotMatrix&&(null===(e=this.precomputedDotMatrix.allDots)||void 0===e||e.forEach(function(e){var r=t.cache.getBlockTitle(e.uid);r&&(e.title=r)}),Object.values(this.precomputedDotMatrix.dotsByDeck||{}).forEach(function(e){null==e||e.forEach(function(e){var r=t.cache.getBlockTitle(e.uid);r&&(e.title=r)})}))}},{key:"calculateTodayCompletedData",value:function(){var e=__webpack_require__(8825).isSameDay,t=new Date,r={totalCompleted:0,totalCompletedUids:[],totalCompletedDue:0,totalCompletedNew:0,totalCompletedDueUids:[],totalCompletedNewUids:[],byDeck:{}},n=new Map(this.allManageableCards.map(function(e){return[e.uid,e]})),a=new Map(this.scheduledCards.map(function(e){return[e.uid,e]}));return Object.entries(this.rawPracticeData).forEach(function(i){var o=UnifiedDataCore_slicedToArray(i,2),s=o[0],l=o[1];if(Array.isArray(l)&&0!==l.length){var c=l.filter(function(r){if(!r.dateCreated)return!1;var n=new Date(r.dateCreated);return e(n,t)});if(0!==c.length){var u=c.sort(function(e,t){var r=e.dateCreated?new Date(e.dateCreated).getTime():0;return(t.dateCreated?new Date(t.dateCreated).getTime():0)-r})[0],f=n.get(s);if(f){var p=a.get(s);if(p&&p.nextDueDate&&!e(p.nextDueDate,t)){var h=f.deckName,d=1===u.repetitions;r.byDeck[h]||(r.byDeck[h]={completed:0,completedUids:[],completedDue:0,completedNew:0,completedDueUids:[],completedNewUids:[]}),r.totalCompleted++,r.totalCompletedUids.push(s),r.byDeck[h].completed++,r.byDeck[h].completedUids.push(s),d?(r.totalCompletedNew++,r.totalCompletedNewUids.push(s),r.byDeck[h].completedNew++,r.byDeck[h].completedNewUids.push(s)):(r.totalCompletedDue++,r.totalCompletedDueUids.push(s),r.byDeck[h].completedDue++,r.byDeck[h].completedDueUids.push(s))}}}}}),r}},{key:"getStabilizedPracticeQueue",value:function(e,t){var r={isGlobalMixedMode:e,selectedTag:t,isCramming:this.currentIsCramming,dailyLimit:this.currentDailyLimit,dataVersion:this.getDataVersion()};return this.sessionManager.getPracticeQueue(r)}},{key:"getCurrentPracticeSessionInfo",value:function(){var e=this.sessionManager.getCurrentSessionInfo();return e.hasActiveSession?{isActive:!0,sessionId:e.sessionId,queueLength:e.queueLength,createdAt:e.sessionDuration?new Date(Date.now()-e.sessionDuration):void 0,params:e.context?{isGlobalMixedMode:e.context.isGlobalMixedMode,selectedTag:e.context.selectedTag,isCramming:e.context.isCramming}:void 0}:{isActive:!1}}},{key:"terminatePracticeSession",value:function(){this.sessionManager.terminateSession()}},{key:"getDeckDots",value:function(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return this.precomputedDotMatrix?(t=e?this.precomputedDotMatrix.dotsByDeck[e]||[]:this.precomputedDotMatrix.allDots,0!==r||1!==n?(0,__webpack_require__(3697).applyDeckTransform)(t,r,n):t):[]}},{key:"getDeckCardPriorityInfo",value:function(e){var t=this,r=this.allManageableCards.filter(function(t){return t.deckName===e}).map(function(e){return{uid:e.uid,index:t.userPriorityOrder.indexOf(e.uid)}}).filter(function(e){return-1!==e.index}).sort(function(e,t){return e.index-t.index});return r}},{key:"getQueueForDeck",value:function(e){var t=this.filteredCandidates.filter(function(t){return t.deckName===e}),r=t;this.currentDailyLimit>0&&!this.currentIsCramming&&!this.currentIsGlobalMixedMode&&(r=this.applyDailyLimit(t,this.currentDailyLimit));var n=new Map(this.userPriorityOrder.map(function(e,t){return[e,t]})),a=function(e){var t;return null!==(t=n.get(e))&&void 0!==t?t:Number.MAX_SAFE_INTEGER};return r.sort(function(e,t){return a(e.uid)-a(t.uid)}),r.map(function(e){return e.uid})}},{key:"insertNewCardsWithDefaultPriority",value:function(e,t,r){return PriorityCalculator.insertNewCards(e,t,r)}},{key:"batchAdjustDeckPriority",value:(c=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t,r,n){var a,i,o,s,l;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r.length===n.length){e.next=2;break}throw new Error("卡片顺序和插入位置数量必须匹配");case 2:return a=new Map(this.allManageableCards.map(function(e){return[e.uid,e]})),r.filter(function(e){var r=a.get(e);return!r||r.deckName!==t}).length,i=this.userPriorityOrder,o=new Set(r),s=i.filter(function(e){return!o.has(e)}),l=VipSortingAlgorithm.mergeWithPositions(r,s,n),this.userPriorityOrder=l,e.next=12,this.savePriorityOrderToDatabase();case 12:case"end":return e.stop()}},e,this)})),function(e,t,r){return c.apply(this,arguments)})},{key:"recordOperation",value:function(e,t){this.lastOperation={type:e,beforeState:UnifiedDataCore_toConsumableArray(this.userPriorityOrder),afterState:[],description:t,timestamp:new Date}}},{key:"updateLastOperationAfterState",value:function(){this.lastOperation&&(this.lastOperation.afterState=UnifiedDataCore_toConsumableArray(this.userPriorityOrder))}},{key:"undoLastOperationInternal",value:(l=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.lastOperation){e.next=2;break}return e.abrupt("return",!1);case 2:return this.userPriorityOrder=UnifiedDataCore_toConsumableArray(this.lastOperation.beforeState),this.lastOperation=null,e.prev=4,e.next=7,this.savePriorityOrderToDatabase();case 7:return e.abrupt("return",!0);case 10:return e.prev=10,e.t0=e.catch(4),UnifiedDataCore_logger.error("撤销操作保存失败",e.t0),e.abrupt("return",!1);case 14:case"end":return e.stop()}},e,this,[[4,10]])})),function(){return l.apply(this,arguments)})},{key:"getUndoInfoInternal",value:function(){var e,t;return{canUndo:!!this.lastOperation,lastOperation:null===(e=this.lastOperation)||void 0===e?void 0:e.description,operationTime:null===(t=this.lastOperation)||void 0===t?void 0:t.timestamp}}},{key:"getBlockInfo",value:(s=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a=arguments;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(a.length>1&&void 0!==a[1]&&a[1]){e.next=5;break}if(!(r=this.cache.getBlockDetail(t))){e.next=5;break}return e.abrupt("return",r);case 5:return e.prev=5,e.next=8,(0,utils.YD)(t);case 8:return(n=e.sent)&&this.cache.setBlockDetail(t,n),e.abrupt("return",n);case 13:return e.prev=13,e.t0=e.catch(5),UnifiedDataCore_logger.error("获取block信息失败",e.t0),e.abrupt("return",null);case 17:case"end":return e.stop()}},e,this,[[5,13]])})),function(e){return s.apply(this,arguments)})},{key:"clearBlockInfoCache",value:function(e){this.cache.clear("blocks",e)}},{key:"getCacheData",value:(o=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dataManager.getCacheData(this.currentDataPageTitle,t));case 1:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"setCacheData",value:(i=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t,r){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dataManager.setCacheData(this.currentDataPageTitle,t,r));case 1:case"end":return e.stop()}},e,this)})),function(e,t){return i.apply(this,arguments)})},{key:"deleteCacheData",value:(a=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.currentDataPageTitle){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,e.next=5,deleteCacheDataKey({dataPageTitle:this.currentDataPageTitle,selectedTag:t,toDeleteKeyId:t});case 5:e.next=10;break;case 7:e.prev=7,e.t0=e.catch(2),UnifiedDataCore_logger.error("删除缓存数据失败",e.t0);case 10:case"end":return e.stop()}},e,this,[[2,7]])})),function(e){return a.apply(this,arguments)})},{key:"getAllPages",value:(n=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(){var t,r,n,a,i,o,s,l,c=arguments;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t="all-pages-filtered",c.length>0&&void 0!==c[0]&&c[0]){e.next=6;break}if(!(r=this.getMemoryCache(t))){e.next=6;break}return e.abrupt("return",r);case 6:return e.prev=6,n=createRoamQuery("[:find ?title :where [?p :node/title ?title] [?p :block/uid ?uid]]"),e.next=10,n();case 10:return a=e.sent,i=normalizeQueryResults.toPageTitles(a),o=this.filterManager.filterPagesList(i,{type:"page",dataPageTitle:this.currentDataPageTitle}),s=UnifiedDataCore_toConsumableArray(new Set(o.filter(function(e){return null==e?void 0:e.trim()}))),this.setMemoryCache(t,s),e.abrupt("return",s);case 18:return e.prev=18,e.t0=e.catch(6),console.error("获取页面列表失败:",e.t0),l=this.getMemoryCache(t),e.abrupt("return",l||[]);case 23:case"end":return e.stop()}},e,this,[[6,18]])})),function(){return n.apply(this,arguments)})},{key:"getImportData",value:(r=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(){var t,r;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.currentDataPageTitle){e.next=2;break}throw new Error("DataPageTitle not set");case 2:return e.prev=2,e.next=5,getPluginPageData({dataPageTitle:this.currentDataPageTitle,limitToLatest:!1});case 5:return t=e.sent,r={},e.abrupt("return",{existingPracticeData:t,generatedRecords:r});case 10:throw e.prev=10,e.t0=e.catch(2),UnifiedDataCore_logger.error("获取导入数据失败",e.t0),e.t0;case 14:case"end":return e.stop()}},e,this,[[2,10]])})),function(){return r.apply(this,arguments)})},{key:"queryRoam",value:(t=UnifiedDataCore_asyncToGenerator(UnifiedDataCore_regeneratorRuntime().mark(function e(t){var r,n,a,i,o=arguments;return UnifiedDataCore_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:for(r=o.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=o[a];return e.prev=1,e.next=4,(i=window.roamAlphaAPI).q.apply(i,[t].concat(n));case 4:return e.abrupt("return",e.sent);case 7:throw e.prev=7,e.t0=e.catch(1),UnifiedDataCore_logger.error("Roam API查询失败",{query:t,params:n,error:e.t0}),e.t0;case 11:case"end":return e.stop()}},e,null,[[1,7]])})),function(e){return t.apply(this,arguments)})}]),e}();function useUnifiedData_typeof(e){return useUnifiedData_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},useUnifiedData_typeof(e)}function useUnifiedData_regeneratorRuntime(){var e=useUnifiedData_regenerator(),t=e.m(useUnifiedData_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,useUnifiedData_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(useUnifiedData_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new useUnifiedData_OverloadYield(e,t)},AsyncIterator:useUnifiedData_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?useUnifiedData_regeneratorAsyncGen:useUnifiedData_regeneratorAsync)(i(e),t,r,a,o)},keys:useUnifiedData_regeneratorKeys,values:useUnifiedData_regeneratorValues}})()}function useUnifiedData_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(useUnifiedData_typeof(e)+" is not iterable")}function useUnifiedData_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function useUnifiedData_regeneratorAsync(e,t,r,n,a){var i=useUnifiedData_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function useUnifiedData_regeneratorAsyncGen(e,t,r,n,a){return new useUnifiedData_regeneratorAsyncIterator(useUnifiedData_regenerator().w(e,t,r,n),a||Promise)}function useUnifiedData_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof useUnifiedData_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(useUnifiedData_regeneratorDefine2(useUnifiedData_regeneratorAsyncIterator.prototype),useUnifiedData_regeneratorDefine2(useUnifiedData_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),useUnifiedData_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function useUnifiedData_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return useUnifiedData_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(useUnifiedData_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,useUnifiedData_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,useUnifiedData_regeneratorDefine2(f,"constructor",c),useUnifiedData_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",useUnifiedData_regeneratorDefine2(c,a,"GeneratorFunction"),useUnifiedData_regeneratorDefine2(f),useUnifiedData_regeneratorDefine2(f,a,"Generator"),useUnifiedData_regeneratorDefine2(f,n,function(){return this}),useUnifiedData_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(useUnifiedData_regenerator=function(){return{w:i,m:p}})()}function useUnifiedData_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}useUnifiedData_regeneratorDefine2=function(e,t,r,n){function i(t,r){useUnifiedData_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},useUnifiedData_regeneratorDefine2(e,t,r,n)}function useUnifiedData_OverloadYield(e,t){this.v=e,this.k=t}function useUnifiedData_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function useUnifiedData_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){useUnifiedData_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){useUnifiedData_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function useUnifiedData_slicedToArray(e,t){return useUnifiedData_arrayWithHoles(e)||useUnifiedData_iterableToArrayLimit(e,t)||useUnifiedData_unsupportedIterableToArray(e,t)||useUnifiedData_nonIterableRest()}function useUnifiedData_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useUnifiedData_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return useUnifiedData_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?useUnifiedData_arrayLikeToArray(e,t):void 0}}function useUnifiedData_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function useUnifiedData_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function useUnifiedData_arrayWithHoles(e){if(Array.isArray(e))return e}var useUnifiedData=function(e){var t=e.tagsList,r=e.dataPageTitle,n=e.isCramming,a=void 0!==n&&n,i=e.dailyLimit,o=void 0===i?20:i,s=e.isGlobalMixedMode,l=void 0!==s&&s,c=e.defaultPriority,u=void 0===c?70:c,f=external_React_.useRef(null),p=useUnifiedData_slicedToArray(external_React_.useState(null),2),h=p[0],d=p[1],m=useUnifiedData_slicedToArray(external_React_.useState(!0),2),y=m[0],g=m[1],v=useUnifiedData_slicedToArray(external_React_.useState(null),2),_=v[0],b=v[1],x=useUnifiedData_slicedToArray(external_React_.useState(0),1)[0];external_React_.useEffect(function(){f.current||(f.current=new UnifiedDataCore)},[]);var S=external_React_.useCallback(useUnifiedData_asyncToGenerator(useUnifiedData_regeneratorRuntime().mark(function e(){var n,i;return useUnifiedData_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(f.current&&0!==t.length&&r){e.next=3;break}return g(!1),e.abrupt("return");case 3:return g(!0),b(null),e.prev=5,e.next=8,f.current.loadUnifiedData({tagsList:t,dataPageTitle:r,isCramming:a,dailyLimit:o,isGlobalMixedMode:l,defaultPriority:u});case 8:n=e.sent,d(n),e.next=16;break;case 12:e.prev=12,e.t0=e.catch(5),i=e.t0 instanceof Error?e.t0:new Error("数据加载失败"),b(i);case 16:return e.prev=16,g(!1),e.finish(16);case 19:case"end":return e.stop()}},e,null,[[5,12,16,19]])})),[t,r,a,o,l,u,x]);return external_React_.useEffect(function(){S()},[S]),{unifiedData:h,isLoading:y,error:_,refreshData:external_React_.useCallback(useUnifiedData_asyncToGenerator(useUnifiedData_regeneratorRuntime().mark(function e(){return useUnifiedData_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,S();case 2:case"end":return e.stop()}},e)})),[S]),refreshFilters:external_React_.useCallback(useUnifiedData_asyncToGenerator(useUnifiedData_regeneratorRuntime().mark(function e(){var t;return useUnifiedData_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(f.current){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,e.next=5,f.current.refreshFilters();case 5:return e.next=7,S();case 7:e.next=13;break;case 9:e.prev=9,e.t0=e.catch(2),t=e.t0 instanceof Error?e.t0:new Error("过滤器刷新失败"),b(t);case 13:case"end":return e.stop()}},e,null,[[2,9]])})),[S])}};const hooks_useUnifiedData=useUnifiedData;function settingsPanelConfig_typeof(e){return settingsPanelConfig_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},settingsPanelConfig_typeof(e)}function settingsPanelConfig_regeneratorRuntime(){var e=settingsPanelConfig_regenerator(),t=e.m(settingsPanelConfig_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,settingsPanelConfig_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(settingsPanelConfig_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new settingsPanelConfig_OverloadYield(e,t)},AsyncIterator:settingsPanelConfig_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?settingsPanelConfig_regeneratorAsyncGen:settingsPanelConfig_regeneratorAsync)(i(e),t,r,a,o)},keys:settingsPanelConfig_regeneratorKeys,values:settingsPanelConfig_regeneratorValues}})()}function settingsPanelConfig_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(settingsPanelConfig_typeof(e)+" is not iterable")}function settingsPanelConfig_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function settingsPanelConfig_regeneratorAsync(e,t,r,n,a){var i=settingsPanelConfig_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function settingsPanelConfig_regeneratorAsyncGen(e,t,r,n,a){return new settingsPanelConfig_regeneratorAsyncIterator(settingsPanelConfig_regenerator().w(e,t,r,n),a||Promise)}function settingsPanelConfig_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof settingsPanelConfig_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(settingsPanelConfig_regeneratorDefine2(settingsPanelConfig_regeneratorAsyncIterator.prototype),settingsPanelConfig_regeneratorDefine2(settingsPanelConfig_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),settingsPanelConfig_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function settingsPanelConfig_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return settingsPanelConfig_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(settingsPanelConfig_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,settingsPanelConfig_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,settingsPanelConfig_regeneratorDefine2(f,"constructor",c),settingsPanelConfig_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",settingsPanelConfig_regeneratorDefine2(c,a,"GeneratorFunction"),settingsPanelConfig_regeneratorDefine2(f),settingsPanelConfig_regeneratorDefine2(f,a,"Generator"),settingsPanelConfig_regeneratorDefine2(f,n,function(){return this}),settingsPanelConfig_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(settingsPanelConfig_regenerator=function(){return{w:i,m:p}})()}function settingsPanelConfig_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}settingsPanelConfig_regeneratorDefine2=function(e,t,r,n){function i(t,r){settingsPanelConfig_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},settingsPanelConfig_regeneratorDefine2(e,t,r,n)}function settingsPanelConfig_OverloadYield(e,t){this.v=e,this.k=t}function settingsPanelConfig_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function settingsPanelConfig_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?settingsPanelConfig_ownKeys(Object(r),!0).forEach(function(t){settingsPanelConfig_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):settingsPanelConfig_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function settingsPanelConfig_defineProperty(e,t,r){return(t=settingsPanelConfig_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function settingsPanelConfig_toPropertyKey(e){var t=settingsPanelConfig_toPrimitive(e,"string");return"symbol"==settingsPanelConfig_typeof(t)?t:t+""}function settingsPanelConfig_toPrimitive(e,t){if("object"!=settingsPanelConfig_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=settingsPanelConfig_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function settingsPanelConfig_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function settingsPanelConfig_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){settingsPanelConfig_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){settingsPanelConfig_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}var settingsPanelConfig=function(e){var t=e.setSettings,r=function(){var e=settingsPanelConfig_asyncToGenerator(settingsPanelConfig_regeneratorRuntime().mark(function e(r){var n,a;return settingsPanelConfig_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:n=r.key,a=r.value,window.roamMemo.extensionAPI.settings.set(n,a),t(function(e){return settingsPanelConfig_objectSpread(settingsPanelConfig_objectSpread({},e),{},settingsPanelConfig_defineProperty({},n,a))});case 3:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),n=debounce(function(e){return r(e)});return{tabTitle:"Memo Enhanced",settings:[{id:"dataPageTitle",name:"数据页面标题",description:"存储所有间隔重复数据的页面名称",action:{type:"input",placeholder:defaultSettings.dataPageTitle,onChange:function(e){var t=e.target.value.trim();n({key:"dataPageTitle",value:t})}}},{id:"dailyLimit",name:"每日复习限制",description:"每天复习的卡片数量限制（整数）。设置为 0 表示无限制。限制规则：75% 到期卡片 + 25% 新卡片，按全局优先级排序。适用于所有模式（混合模式和单组模式）。输入负数会自动调整为 0，小数会向下取整。",action:{type:"input",placeholder:defaultSettings.dailyLimit,onChange:function(e){var t=e.target.value.trim(),r=Number(t);if(isNaN(r))""===t&&n({key:"dailyLimit",value:defaultSettings.dailyLimit});else{var a=Math.floor(r),i=Math.max(0,a);n({key:"dailyLimit",value:i})}}}},{id:"defaultPriority",name:"新卡片默认优先级",description:"设置新卡片的默认优先级（0-100）。数值越高优先级越高。超出范围的值会自动调整到 0-100 范围内。",action:{type:"input",placeholder:defaultSettings.defaultPriority.toString(),onChange:function(e){var t=e.target.value.trim(),r=Number(t);if(isNaN(r))""===t&&n({key:"defaultPriority",value:defaultSettings.defaultPriority});else{var a=Math.max(0,Math.min(100,r));n({key:"defaultPriority",value:a})}}}},{id:"tagBlacklist",name:"标签黑名单",description:"从间隔重复系统中排除的标签，用逗号分隔。插件内部数据字段会自动过滤，无需手动添加。",action:{type:"input",placeholder:"例如：personal,draft,temp",onChange:function(e){var t=e.target.value.trim();n({key:"tagBlacklist",value:t})}}}]}};const src_settingsPanelConfig=settingsPanelConfig;function useSettings_typeof(e){return useSettings_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},useSettings_typeof(e)}function useSettings_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function useSettings_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?useSettings_ownKeys(Object(r),!0).forEach(function(t){useSettings_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):useSettings_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function useSettings_defineProperty(e,t,r){return(t=useSettings_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function useSettings_toPropertyKey(e){var t=useSettings_toPrimitive(e,"string");return"symbol"==useSettings_typeof(t)?t:t+""}function useSettings_toPrimitive(e,t){if("object"!=useSettings_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=useSettings_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function useSettings_slicedToArray(e,t){return useSettings_arrayWithHoles(e)||useSettings_iterableToArrayLimit(e,t)||useSettings_unsupportedIterableToArray(e,t)||useSettings_nonIterableRest()}function useSettings_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useSettings_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return useSettings_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?useSettings_arrayLikeToArray(e,t):void 0}}function useSettings_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function useSettings_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function useSettings_arrayWithHoles(e){if(Array.isArray(e))return e}var defaultSettings={dataPageTitle:"roam/memo",dailyLimit:0,defaultPriority:70,isGlobalMixedMode:!1,tagBlacklist:""},useSettings=function(){var e=useSettings_slicedToArray(external_React_default().useState(defaultSettings),2),t=e[0],r=e[1];return external_React_default().useEffect(function(){window.roamMemo.extensionAPI.settings.panel.create(src_settingsPanelConfig({setSettings:r}))},[r,t.dataPageTitle]),external_React_default().useEffect(function(){var e=window.roamMemo.extensionAPI.settings.getAll()||{},t=useSettings_objectSpread(useSettings_objectSpread({},defaultSettings),e);["dailyLimit","defaultPriority"].forEach(function(e){"string"==typeof t[e]&&(t[e]=Number(t[e]))}),r(t),Object.keys(defaultSettings).forEach(function(t){t in e||window.roamMemo.extensionAPI.settings.set(t,defaultSettings[t])})},[r]),[t,r]};const hooks_useSettings=useSettings;var arrive=__webpack_require__(5207),arrive_default=__webpack_require__.n(arrive);arrive_default();var useOnBlockInteract=function(e){var t=e.onEnterCallback,r=e.onLeaveCallback,n=e.enabled,a=void 0===n||n;external_React_default().useEffect(function(){return a?(document.leave("textarea.rm-block-input",r),document.arrive("textarea.rm-block-input",t),function(){document.unbindLeave("textarea.rm-block-input",r),document.unbindArrive("textarea.rm-block-input",t)}):(document.unbindLeave("textarea.rm-block-input",r),void document.unbindArrive("textarea.rm-block-input",t))},[t,r,a])};const hooks_useOnBlockInteract=useOnBlockInteract;var useCommandPaletteAction=function(e){var t=e.onShowPracticeOverlay;external_React_default().useEffect(function(){var e="Memo: Start Review Session";return window.roamAlphaAPI.ui.commandPalette.addCommand({label:e,callback:function(){return t()}}),function(){window.roamAlphaAPI.ui.commandPalette.removeCommand({label:e})}},[t])};const hooks_useCommandPaletteAction=useCommandPaletteAction;function useCachedData_typeof(e){return useCachedData_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},useCachedData_typeof(e)}function useCachedData_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function useCachedData_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?useCachedData_ownKeys(Object(r),!0).forEach(function(t){useCachedData_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):useCachedData_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function useCachedData_defineProperty(e,t,r){return(t=useCachedData_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function useCachedData_toPropertyKey(e){var t=useCachedData_toPrimitive(e,"string");return"symbol"==useCachedData_typeof(t)?t:t+""}function useCachedData_toPrimitive(e,t){if("object"!=useCachedData_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=useCachedData_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function useCachedData_regeneratorRuntime(){var e=useCachedData_regenerator(),t=e.m(useCachedData_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,useCachedData_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(useCachedData_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new useCachedData_OverloadYield(e,t)},AsyncIterator:useCachedData_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?useCachedData_regeneratorAsyncGen:useCachedData_regeneratorAsync)(i(e),t,r,a,o)},keys:useCachedData_regeneratorKeys,values:useCachedData_regeneratorValues}})()}function useCachedData_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(useCachedData_typeof(e)+" is not iterable")}function useCachedData_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function useCachedData_regeneratorAsync(e,t,r,n,a){var i=useCachedData_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function useCachedData_regeneratorAsyncGen(e,t,r,n,a){return new useCachedData_regeneratorAsyncIterator(useCachedData_regenerator().w(e,t,r,n),a||Promise)}function useCachedData_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof useCachedData_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(useCachedData_regeneratorDefine2(useCachedData_regeneratorAsyncIterator.prototype),useCachedData_regeneratorDefine2(useCachedData_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),useCachedData_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function useCachedData_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return useCachedData_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(useCachedData_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,useCachedData_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,useCachedData_regeneratorDefine2(f,"constructor",c),useCachedData_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",useCachedData_regeneratorDefine2(c,a,"GeneratorFunction"),useCachedData_regeneratorDefine2(f),useCachedData_regeneratorDefine2(f,a,"Generator"),useCachedData_regeneratorDefine2(f,n,function(){return this}),useCachedData_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(useCachedData_regenerator=function(){return{w:i,m:p}})()}function useCachedData_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}useCachedData_regeneratorDefine2=function(e,t,r,n){function i(t,r){useCachedData_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},useCachedData_regeneratorDefine2(e,t,r,n)}function useCachedData_OverloadYield(e,t){this.v=e,this.k=t}function useCachedData_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function useCachedData_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){useCachedData_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){useCachedData_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function useCachedData_slicedToArray(e,t){return useCachedData_arrayWithHoles(e)||useCachedData_iterableToArrayLimit(e,t)||useCachedData_unsupportedIterableToArray(e,t)||useCachedData_nonIterableRest()}function useCachedData_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useCachedData_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return useCachedData_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?useCachedData_arrayLikeToArray(e,t):void 0}}function useCachedData_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function useCachedData_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function useCachedData_arrayWithHoles(e){if(Array.isArray(e))return e}var useCachedData=function(e){var t=e.unifiedData,r=e.selectedTag,n=useCachedData_slicedToArray(external_React_default().useState({}),2),a=n[0],i=n[1],o=useCachedData_slicedToArray(external_React_default().useState(!1),2),s=o[0],l=o[1],c=external_React_default().useCallback(useCachedData_asyncToGenerator(useCachedData_regeneratorRuntime().mark(function e(){var n;return useCachedData_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:return l(!0),e.prev=3,e.next=6,t.dataManagement.getCacheData(r);case 6:n=e.sent,i(n),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(3),console.error("🔍 [useCachedData] 获取缓存数据失败:",e.t0);case 13:return e.prev=13,l(!1),e.finish(13);case 16:case"end":return e.stop()}},e,null,[[3,10,13,16]])})),[t,r]);external_React_default().useEffect(function(){c()},[c]);var u=external_React_default().useCallback(function(){var e=useCachedData_asyncToGenerator(useCachedData_regeneratorRuntime().mark(function e(n,a){var i,o;return useCachedData_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,i=r||"default",o=useCachedData_objectSpread(useCachedData_objectSpread({},n),a),e.next=7,t.dataManagement.setCacheData(i,o);case 7:return e.next=9,c();case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(2),console.error("💾 [useCachedData] 保存缓存数据失败:",e.t0);case 14:case"end":return e.stop()}},e,null,[[2,11]])}));return function(t,r){return e.apply(this,arguments)}}(),[t,r,c]),f=external_React_default().useCallback(function(){var e=useCachedData_asyncToGenerator(useCachedData_regeneratorRuntime().mark(function e(r){return useCachedData_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,e.next=5,t.dataManagement.deleteCacheData(r);case 5:return e.next=7,c();case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(2),console.error("🗑️ [useCachedData] 删除缓存数据失败:",e.t0);case 12:case"end":return e.stop()}},e,null,[[2,9]])}));return function(t){return e.apply(this,arguments)}}(),[t,c]);return{data:a,isLoading:s,saveCacheData:u,deleteCacheDataKey:f,fetchCacheData:c}};const hooks_useCachedData=useCachedData;var useOnVisibilityStateChange=function(e){external_React_.useEffect(function(){var t=function(){"visible"===document.visibilityState&&e()};return document.addEventListener("visibilitychange",t),function(){document.removeEventListener("visibilitychange",t)}},[e])};const hooks_useOnVisibilityStateChange=useOnVisibilityStateChange;function useAllPages_typeof(e){return useAllPages_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},useAllPages_typeof(e)}function useAllPages_regeneratorRuntime(){var e=useAllPages_regenerator(),t=e.m(useAllPages_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,useAllPages_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(useAllPages_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new useAllPages_OverloadYield(e,t)},AsyncIterator:useAllPages_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?useAllPages_regeneratorAsyncGen:useAllPages_regeneratorAsync)(i(e),t,r,a,o)},keys:useAllPages_regeneratorKeys,values:useAllPages_regeneratorValues}})()}function useAllPages_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(useAllPages_typeof(e)+" is not iterable")}function useAllPages_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function useAllPages_regeneratorAsync(e,t,r,n,a){var i=useAllPages_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function useAllPages_regeneratorAsyncGen(e,t,r,n,a){return new useAllPages_regeneratorAsyncIterator(useAllPages_regenerator().w(e,t,r,n),a||Promise)}function useAllPages_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof useAllPages_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(useAllPages_regeneratorDefine2(useAllPages_regeneratorAsyncIterator.prototype),useAllPages_regeneratorDefine2(useAllPages_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),useAllPages_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function useAllPages_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return useAllPages_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(useAllPages_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,useAllPages_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,useAllPages_regeneratorDefine2(f,"constructor",c),useAllPages_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",useAllPages_regeneratorDefine2(c,a,"GeneratorFunction"),useAllPages_regeneratorDefine2(f),useAllPages_regeneratorDefine2(f,a,"Generator"),useAllPages_regeneratorDefine2(f,n,function(){return this}),useAllPages_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(useAllPages_regenerator=function(){return{w:i,m:p}})()}function useAllPages_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}useAllPages_regeneratorDefine2=function(e,t,r,n){function i(t,r){useAllPages_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},useAllPages_regeneratorDefine2(e,t,r,n)}function useAllPages_OverloadYield(e,t){this.v=e,this.k=t}function useAllPages_toConsumableArray(e){return useAllPages_arrayWithoutHoles(e)||useAllPages_iterableToArray(e)||useAllPages_unsupportedIterableToArray(e)||useAllPages_nonIterableSpread()}function useAllPages_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useAllPages_iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function useAllPages_arrayWithoutHoles(e){if(Array.isArray(e))return useAllPages_arrayLikeToArray(e)}function useAllPages_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function useAllPages_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){useAllPages_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){useAllPages_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function useAllPages_slicedToArray(e,t){return useAllPages_arrayWithHoles(e)||useAllPages_iterableToArrayLimit(e,t)||useAllPages_unsupportedIterableToArray(e,t)||useAllPages_nonIterableRest()}function useAllPages_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function useAllPages_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return useAllPages_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?useAllPages_arrayLikeToArray(e,t):void 0}}function useAllPages_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function useAllPages_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function useAllPages_arrayWithHoles(e){if(Array.isArray(e))return e}var useAllPages=function(e){var t=e.unifiedData,r=useAllPages_slicedToArray(external_React_.useState([]),2),n=r[0],a=r[1],i=useAllPages_slicedToArray(external_React_.useState(!1),2),o=i[0],s=i[1],l=external_React_.useCallback(useAllPages_asyncToGenerator(useAllPages_regeneratorRuntime().mark(function e(){var r,n,i,o=arguments;return useAllPages_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=o.length>0&&void 0!==o[0]&&o[0],s(!0),e.prev=2,!t){e.next=9;break}return e.next=6,t.dataManagement.getAllPages(r);case 6:n=e.sent,e.next=13;break;case 9:return e.next=11,getAllPagesQuery();case 11:i=e.sent,n=normalizeQueryResults.toPageTitles(i);case 13:a(useAllPages_toConsumableArray(new Set(n))),e.next=20;break;case 16:e.prev=16,e.t0=e.catch(2),console.error("🔍 [useAllPages] 获取页面列表失败:",e.t0),a([]);case 20:return e.prev=20,s(!1),e.finish(20);case 23:case"end":return e.stop()}},e,null,[[2,16,20,23]])})),[t]);return external_React_.useEffect(function(){l()},[l]),{allPages:n,isLoading:o,refreshPages:external_React_.useCallback(function(){l(!0)},[l])}};const hooks_useAllPages=useAllPages;function app_typeof(e){return app_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},app_typeof(e)}var app_excluded=["refUid"];function app_objectWithoutProperties(e,t){if(null==e)return{};var r,n,a=app_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function app_objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r={};for(var n in e)if({}.hasOwnProperty.call(e,n)){if(-1!==t.indexOf(n))continue;r[n]=e[n]}return r}function app_ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function app_objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?app_ownKeys(Object(r),!0).forEach(function(t){app_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):app_ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function app_defineProperty(e,t,r){return(t=app_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function app_toPropertyKey(e){var t=app_toPrimitive(e,"string");return"symbol"==app_typeof(t)?t:t+""}function app_toPrimitive(e,t){if("object"!=app_typeof(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=app_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function app_regeneratorRuntime(){var e=app_regenerator(),t=e.m(app_regeneratorRuntime),r=(Object.getPrototypeOf?Object.getPrototypeOf(t):t.__proto__).constructor;function n(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===r||"GeneratorFunction"===(t.displayName||t.name))}var a={throw:1,return:2,break:3,continue:3};function i(e){var t,r;return function(n){t||(t={stop:function(){return r(n.a,2)},catch:function(){return n.v},abrupt:function(e,t){return r(n.a,a[e],t)},delegateYield:function(e,a,i){return t.resultName=a,r(n.d,app_regeneratorValues(e),i)},finish:function(e){return r(n.f,e)}},r=function(e,r,a){n.p=t.prev,n.n=t.next;try{return e(r,a)}finally{t.next=n.n}}),t.resultName&&(t[t.resultName]=n.v,t.resultName=void 0),t.sent=n.v,t.next=n.n;try{return e.call(this,t)}finally{n.p=t.prev,n.n=t.next}}}return(app_regeneratorRuntime=function(){return{wrap:function(t,r,n,a){return e.w(i(t),r,n,a&&a.reverse())},isGeneratorFunction:n,mark:e.m,awrap:function(e,t){return new app_OverloadYield(e,t)},AsyncIterator:app_regeneratorAsyncIterator,async:function(e,t,r,a,o){return(n(t)?app_regeneratorAsyncGen:app_regeneratorAsync)(i(e),t,r,a,o)},keys:app_regeneratorKeys,values:app_regeneratorValues}})()}function app_regeneratorValues(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],r=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}}throw new TypeError(app_typeof(e)+" is not iterable")}function app_regeneratorKeys(e){var t=Object(e),r=[];for(var n in t)r.unshift(n);return function e(){for(;r.length;)if((n=r.pop())in t)return e.value=n,e.done=!1,e;return e.done=!0,e}}function app_regeneratorAsync(e,t,r,n,a){var i=app_regeneratorAsyncGen(e,t,r,n,a);return i.next().then(function(e){return e.done?e.value:i.next()})}function app_regeneratorAsyncGen(e,t,r,n,a){return new app_regeneratorAsyncIterator(app_regenerator().w(e,t,r,n),a||Promise)}function app_regeneratorAsyncIterator(e,t){function r(n,a,i,o){try{var s=e[n](a),l=s.value;return l instanceof app_OverloadYield?t.resolve(l.v).then(function(e){r("next",e,i,o)},function(e){r("throw",e,i,o)}):t.resolve(l).then(function(e){s.value=e,i(s)},function(e){return r("throw",e,i,o)})}catch(e){o(e)}}var n;this.next||(app_regeneratorDefine2(app_regeneratorAsyncIterator.prototype),app_regeneratorDefine2(app_regeneratorAsyncIterator.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",function(){return this})),app_regeneratorDefine2(this,"_invoke",function(e,a,i){function o(){return new t(function(t,n){r(e,i,t,n)})}return n=n?n.then(o,o):o()},!0)}function app_regenerator(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",a=r.toStringTag||"@@toStringTag";function i(r,n,a,i){var l=n&&n.prototype instanceof s?n:s,c=Object.create(l.prototype);return app_regeneratorDefine2(c,"_invoke",function(r,n,a){var i,s,l,c=0,u=a||[],f=!1,p={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(t,r){return i=t,s=0,l=e,p.n=r,o}};function h(r,n){for(s=r,l=n,t=0;!f&&c&&!a&&t<u.length;t++){var a,i=u[t],h=p.p,d=i[2];r>3?(a=d===n)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((a=r<2&&h<i[1])?(s=0,p.v=n,p.n=i[1]):h<d&&(a=r<3||i[0]>n||n>d)&&(i[4]=r,i[5]=n,p.n=d,s=0))}if(a||r>1)return o;throw f=!0,n}return function(a,u,d){if(c>1)throw TypeError("Generator is already running");for(f&&1===u&&h(u,d),s=u,l=d;(t=s<2?e:l)||!f;){i||(s?s<3?(s>1&&(p.n=-1),h(s,l)):p.n=l:p.v=l);try{if(c=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(f=p.n<0)?l:r.call(n,p))!==o)break}catch(t){i=e,s=1,l=t}finally{c=1}}return{value:t,done:f}}}(r,a,i),!0),c}var o={};function s(){}function l(){}function c(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(app_regeneratorDefine2(t={},n,function(){return this}),t),f=c.prototype=s.prototype=Object.create(u);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,app_regeneratorDefine2(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return l.prototype=c,app_regeneratorDefine2(f,"constructor",c),app_regeneratorDefine2(c,"constructor",l),l.displayName="GeneratorFunction",app_regeneratorDefine2(c,a,"GeneratorFunction"),app_regeneratorDefine2(f),app_regeneratorDefine2(f,a,"Generator"),app_regeneratorDefine2(f,n,function(){return this}),app_regeneratorDefine2(f,"toString",function(){return"[object Generator]"}),(app_regenerator=function(){return{w:i,m:p}})()}function app_regeneratorDefine2(e,t,r,n){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}app_regeneratorDefine2=function(e,t,r,n){function i(t,r){app_regeneratorDefine2(e,t,function(e){return this._invoke(t,r,e)})}t?a?a(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},app_regeneratorDefine2(e,t,r,n)}function app_OverloadYield(e,t){this.v=e,this.k=t}function app_asyncGeneratorStep(e,t,r,n,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void r(e)}s.done?t(l):Promise.resolve(l).then(n,a)}function app_asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,a){var i=e.apply(t,r);function o(e){app_asyncGeneratorStep(i,n,a,o,s,"next",e)}function s(e){app_asyncGeneratorStep(i,n,a,o,s,"throw",e)}o(void 0)})}}function app_slicedToArray(e,t){return app_arrayWithHoles(e)||app_iterableToArrayLimit(e,t)||app_unsupportedIterableToArray(e,t)||app_nonIterableRest()}function app_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function app_unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return app_arrayLikeToArray(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?app_arrayLikeToArray(e,t):void 0}}function app_arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function app_iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,o,s=[],l=!0,c=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw a}}return s}}function app_arrayWithHoles(e){if(Array.isArray(e))return e}var App=function(){var e=app_slicedToArray(external_React_.useState("closed"),2),t=e[0],r=e[1],n=app_slicedToArray(external_React_.useState(!1),2),a=n[0],i=n[1],o=app_slicedToArray(external_React_.useState(""),2),s=o[0],l=o[1],c=app_slicedToArray(hooks_useSettings(),2),u=c[0],f=c[1],p=u.dataPageTitle,h=u.dailyLimit,d=u.isGlobalMixedMode,m=u.defaultPriority,y=u.tagBlacklist,g=hooks_useAllPages({unifiedData:null}).allPages,v=external_React_.useMemo(function(){return g||[]},[g]),_=hooks_useUnifiedData({tagsList:v,dataPageTitle:p,isCramming:a,dailyLimit:h,isGlobalMixedMode:d,defaultPriority:m}),b=_.unifiedData,x=_.refreshData,S=_.refreshFilters,C=hooks_useCachedData({unifiedData:b}),P=C.fetchCacheData,w=C.saveCacheData,k=external_React_.useRef(y),D=external_React_.useRef(p);external_React_.useEffect(function(){if(void 0===k.current&&void 0===D.current)return k.current=y,void(D.current=p);k.current===y&&D.current===p||(S(),k.current=y,D.current=p)},[y,p,S]);var E=b||{},A=E.decks,T=E.priorityManagement,M=external_React_.useMemo(function(){var e;return null!=A&&A.some(function(e){return e.name===s})?s:(null==A||null===(e=A[0])||void 0===e?void 0:e.name)||""},[s,A]);external_React_.useEffect(function(){M&&M!==s&&l(M)},[M,s]);var O=external_React_.useCallback(function(){var e=app_asyncToGenerator(app_regeneratorRuntime().mark(function e(t,r){return app_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:console.log("Move deck:",t,r);case 1:case"end":return e.stop()}},e)}));return function(t,r){return e.apply(this,arguments)}}(),[]),F=function(){var e=app_asyncToGenerator(app_regeneratorRuntime().mark(function e(t){var r,n,i;return app_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.refUid,n=app_objectWithoutProperties(t,app_excluded),r){e.next=3;break}return e.abrupt("return");case 3:return e.prev=3,e.next=6,src_practice(app_objectSpread(app_objectSpread({},n),{},{dataPageTitle:p,dateCreated:new Date,refUid:r,isCramming:a}));case 6:return b&&"sessionManager"in b&&(null===(i=b.sessionManager)||void 0===i||i.onCardPracticed(r)),e.next=9,x();case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(3),console.error("Error Saving Practice Data",e.t0);case 14:case"end":return e.stop()}},e,null,[[3,11]])}));return function(t){return e.apply(this,arguments)}}(),I=function(){var e=app_asyncToGenerator(app_regeneratorRuntime().mark(function e(){return app_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return P(),e.next=3,x();case 3:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}();hooks_useOnVisibilityStateChange(function(){"closed"!==t&&"practice"!==t&&I()});var R=function(){r("loading"),i(!1),setTimeout(app_asyncToGenerator(app_regeneratorRuntime().mark(function e(){return app_regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,I();case 2:r("practice");case 3:case"end":return e.stop()}},e)})),0)},j=function(){var e;r("saving"),i(!1),null==b||null===(e=b.practiceSession)||void 0===e||e.terminateSession(),setTimeout(function(){r("closed"),window.gc&&setTimeout(function(){var e,t;return null===(e=(t=window).gc)||void 0===e?void 0:e.call(t)},100)},200)},L=app_slicedToArray(external_React_.useState([]),2),B=L[0],N=L[1];hooks_useOnBlockInteract({onEnterCallback:function(e){N((g||[]).filter(function(t){return e.value.includes(t)}))},onLeaveCallback:function(e){if("practice"!==t){var r=(g||[]).filter(function(t){return e.value.includes(t)});B.length!==r.length&&x()}},enabled:"practice"===t}),hooks_useCommandPaletteAction({onShowPracticeOverlay:R});var G=external_React_.useMemo(function(){if(!b)return{new:0,due:0,completed:0};var e;e=d?b.practiceQueue:b.getQueueForDeck(M);var t=0,r=0;return e.forEach(function(e){var n=b.cardDetails[e];null!=n&&n.isNew?t++:"due"!==(null==n?void 0:n.scheduleStatus)&&"overdue"!==(null==n?void 0:n.scheduleStatus)||r++}),{new:t,due:r,completed:0}},[b,d,M]);return external_React_.createElement(external_Blueprint_Core_namespaceObject.HotkeysProvider,null,external_React_.createElement(external_React_.Fragment,null,external_React_.createElement(SidePanelWidget,{onClickCallback:R,stats:G}),external_React_.createElement(components_UnifiedDialog,{isOpen:"closed"!==t,onClose:j},"loading"===t&&external_React_.createElement(components_StateShell,{state:"loading",onClose:j}),"saving"===t&&external_React_.createElement(components_StateShell,{state:"saving",onClose:function(){return r("closed")},showForceClose:!0}),"practice"===t&&b&&T&&external_React_.createElement(overlay_PracticeOverlay,{isOpen:"practice"===t,onCloseCallback:j,unifiedData:b,handlePracticeClick:F,tagsList:(null==A?void 0:A.map(function(e){return e.name}))||[],selectedTag:M,handleMemoTagChange:l,isCramming:a,setIsCramming:i,setRenderMode:function(e,t){w({renderMode:t},{selectedTag:e}),P()},onDataRefresh:I,isGlobalMixedMode:d,setIsGlobalMixedMode:function(e){var t;f(function(t){return app_objectSpread(app_objectSpread({},t),{},{isGlobalMixedMode:e})}),window.roamMemo.extensionAPI.settings.set("isGlobalMixedMode",e),b&&"sessionManager"in b&&(null===(t=b.sessionManager)||void 0===t||t.onModeChanged(e))},priorityManager:T,moveCard:T.moveCard,getCardPosition:function(e){return b.priorityOrder.indexOf(e)},getTotalCards:function(){return b.priorityOrder.length},getDeckPositions:function(){return b.decks.map(function(e){return{deckName:e.name,position:e.position,cardCount:e.cardCount}})},moveDeck:O}))))};const app=App;var container_id="roam-memo-wrapper",createAndRenderContainer=function(){var e=document.querySelectorAll("#".concat(container_id));if(e.length>0)return e.forEach(function(e,t){t>0&&e.parentNode&&e.parentNode.removeChild(e)}),e[0];var t=document.querySelector(".rm-left-sidebar__daily-notes"),r=document.createElement("div");return r.id=container_id,r.classList.add("log-button"),t&&t.parentNode?t.parentNode.insertBefore(r,t.nextSibling):document.body.appendChild(r),r};function extension_onload(e){var t=e.extensionAPI;window.roamMemo={extensionAPI:t},external_Blueprint_Core_namespaceObject.FocusStyleManager.onlyShowFocusOnTabs();var r=createAndRenderContainer();external_ReactDOM_default().render(React.createElement(app,null),r)}function onunload(){var e=document.getElementById(container_id);e&&(external_ReactDOM_default().unmountComponentAtNode(e),e.remove())}const extension={onload:extension_onload,onunload};export{extension as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,